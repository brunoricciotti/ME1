
TUT_LCD_I2C_F103_CUBEIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001eb8  08001eb8  00011eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ef8  08001ef8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ef8  08001ef8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ef8  08001ef8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ef8  08001ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001efc  08001efc  00011efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08001f0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08001f0c  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000675f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001350  00000000  00000000  00026794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  00027ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  000281c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015efb  00000000  00000000  00028818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000879c  00000000  00000000  0003e713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e26e  00000000  00000000  00046eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c511d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b04  00000000  00000000  000c5170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ea0 	.word	0x08001ea0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001ea0 	.word	0x08001ea0

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 1000);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000194:	9300      	str	r3, [sp, #0]
 8000196:	2304      	movs	r3, #4
 8000198:	214e      	movs	r1, #78	; 0x4e
 800019a:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019c:	f000 ff48 	bl	8001030 <HAL_I2C_Master_Transmit>
}
 80001a0:	bf00      	nop
 80001a2:	3710      	adds	r7, #16
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	2000007c 	.word	0x2000007c

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 1000);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	2304      	movs	r3, #4
 80001f8:	214e      	movs	r1, #78	; 0x4e
 80001fa:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fc:	f000 ff18 	bl	8001030 <HAL_I2C_Master_Transmit>
}
 8000200:	bf00      	nop
 8000202:	3710      	adds	r7, #16
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	2000007c 	.word	0x2000007c

0800020c <lcd_clear>:

void lcd_clear (void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000212:	2080      	movs	r0, #128	; 0x80
 8000214:	f7ff ff9a 	bl	800014c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000218:	2300      	movs	r3, #0
 800021a:	607b      	str	r3, [r7, #4]
 800021c:	e005      	b.n	800022a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800021e:	2020      	movs	r0, #32
 8000220:	f7ff ffc4 	bl	80001ac <lcd_send_data>
	for (int i=0; i<70; i++)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3301      	adds	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b45      	cmp	r3, #69	; 0x45
 800022e:	ddf6      	ble.n	800021e <lcd_clear+0x12>
	}
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}

0800023a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	b082      	sub	sp, #8
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
 8000242:	6039      	str	r1, [r7, #0]
    switch (row)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d003      	beq.n	8000252 <lcd_put_cur+0x18>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d005      	beq.n	800025c <lcd_put_cur+0x22>
 8000250:	e009      	b.n	8000266 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000258:	603b      	str	r3, [r7, #0]
            break;
 800025a:	e004      	b.n	8000266 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000262:	603b      	str	r3, [r7, #0]
            break;
 8000264:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4618      	mov	r0, r3
 800026c:	f7ff ff6e 	bl	800014c <lcd_send_cmd>
}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <lcd_init>:


void lcd_init (void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800027c:	2032      	movs	r0, #50	; 0x32
 800027e:	f000 fb07 	bl	8000890 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000282:	2030      	movs	r0, #48	; 0x30
 8000284:	f7ff ff62 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000288:	2005      	movs	r0, #5
 800028a:	f000 fb01 	bl	8000890 <HAL_Delay>
	lcd_send_cmd (0x30);
 800028e:	2030      	movs	r0, #48	; 0x30
 8000290:	f7ff ff5c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000294:	2001      	movs	r0, #1
 8000296:	f000 fafb 	bl	8000890 <HAL_Delay>
	lcd_send_cmd (0x30);
 800029a:	2030      	movs	r0, #48	; 0x30
 800029c:	f7ff ff56 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 80002a0:	200a      	movs	r0, #10
 80002a2:	f000 faf5 	bl	8000890 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80002a6:	2020      	movs	r0, #32
 80002a8:	f7ff ff50 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 80002ac:	200a      	movs	r0, #10
 80002ae:	f000 faef 	bl	8000890 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80002b2:	2028      	movs	r0, #40	; 0x28
 80002b4:	f7ff ff4a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002b8:	2001      	movs	r0, #1
 80002ba:	f000 fae9 	bl	8000890 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80002be:	2008      	movs	r0, #8
 80002c0:	f7ff ff44 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002c4:	2001      	movs	r0, #1
 80002c6:	f000 fae3 	bl	8000890 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80002ca:	2001      	movs	r0, #1
 80002cc:	f7ff ff3e 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002d0:	2001      	movs	r0, #1
 80002d2:	f000 fadd 	bl	8000890 <HAL_Delay>
	HAL_Delay(1);
 80002d6:	2001      	movs	r0, #1
 80002d8:	f000 fada 	bl	8000890 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80002dc:	2006      	movs	r0, #6
 80002de:	f7ff ff35 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 fad4 	bl	8000890 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80002e8:	200c      	movs	r0, #12
 80002ea:	f7ff ff2f 	bl	800014c <lcd_send_cmd>
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b082      	sub	sp, #8
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80002fa:	e006      	b.n	800030a <lcd_send_string+0x18>
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	1c5a      	adds	r2, r3, #1
 8000300:	607a      	str	r2, [r7, #4]
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ff51 	bl	80001ac <lcd_send_data>
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d1f4      	bne.n	80002fc <lcd_send_string+0xa>
}
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000322:	f000 fa53 	bl	80007cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000326:	f000 f859 	bl	80003dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032a:	f000 f8f9 	bl	8000520 <MX_GPIO_Init>
  MX_I2C1_Init();
 800032e:	f000 f89b 	bl	8000468 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000332:	f000 f8c7 	bl	80004c4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  lcd_init ();
 8000336:	f7ff ff9f 	bl	8000278 <lcd_init>

  lcd_send_string ("HELLO WORLD");
 800033a:	4824      	ldr	r0, [pc, #144]	; (80003cc <main+0xb0>)
 800033c:	f7ff ffd9 	bl	80002f2 <lcd_send_string>

  HAL_Delay(1000);
 8000340:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000344:	f000 faa4 	bl	8000890 <HAL_Delay>

  lcd_put_cur(1, 0);
 8000348:	2100      	movs	r1, #0
 800034a:	2001      	movs	r0, #1
 800034c:	f7ff ff75 	bl	800023a <lcd_put_cur>

  lcd_send_string("from CTECH");
 8000350:	481f      	ldr	r0, [pc, #124]	; (80003d0 <main+0xb4>)
 8000352:	f7ff ffce 	bl	80002f2 <lcd_send_string>

  HAL_Delay(2000);
 8000356:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800035a:	f000 fa99 	bl	8000890 <HAL_Delay>

  lcd_clear ();
 800035e:	f7ff ff55 	bl	800020c <lcd_clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for (int i=0;i<128;i++)
 8000362:	2300      	movs	r3, #0
 8000364:	607b      	str	r3, [r7, #4]
 8000366:	e02c      	b.n	80003c2 <main+0xa6>
	  {
		  lcd_put_cur(row, col);
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <main+0xb8>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a1a      	ldr	r2, [pc, #104]	; (80003d8 <main+0xbc>)
 800036e:	6812      	ldr	r2, [r2, #0]
 8000370:	4611      	mov	r1, r2
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ff61 	bl	800023a <lcd_put_cur>

		  lcd_send_data(i+48);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	b2db      	uxtb	r3, r3
 800037c:	3330      	adds	r3, #48	; 0x30
 800037e:	b2db      	uxtb	r3, r3
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff13 	bl	80001ac <lcd_send_data>

		  col++;
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <main+0xbc>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	4a12      	ldr	r2, [pc, #72]	; (80003d8 <main+0xbc>)
 800038e:	6013      	str	r3, [r2, #0]

		  if (col > 15) {row++; col = 0;}
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <main+0xbc>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b0f      	cmp	r3, #15
 8000396:	dd07      	ble.n	80003a8 <main+0x8c>
 8000398:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <main+0xb8>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	3301      	adds	r3, #1
 800039e:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <main+0xb8>)
 80003a0:	6013      	str	r3, [r2, #0]
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <main+0xbc>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
		  if (row > 1) row=0;
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <main+0xb8>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	dd02      	ble.n	80003b6 <main+0x9a>
 80003b0:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <main+0xb8>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]

		  HAL_Delay(250);
 80003b6:	20fa      	movs	r0, #250	; 0xfa
 80003b8:	f000 fa6a 	bl	8000890 <HAL_Delay>
	  for (int i=0;i<128;i++)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3301      	adds	r3, #1
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2b7f      	cmp	r3, #127	; 0x7f
 80003c6:	ddcf      	ble.n	8000368 <main+0x4c>
 80003c8:	e7cb      	b.n	8000362 <main+0x46>
 80003ca:	bf00      	nop
 80003cc:	08001eb8 	.word	0x08001eb8
 80003d0:	08001ec4 	.word	0x08001ec4
 80003d4:	200000d0 	.word	0x200000d0
 80003d8:	200000d4 	.word	0x200000d4

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b090      	sub	sp, #64	; 0x40
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	f107 0318 	add.w	r3, r7, #24
 80003e6:	2228      	movs	r2, #40	; 0x28
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 fd50 	bl	8001e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003fe:	2301      	movs	r3, #1
 8000400:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000406:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040c:	2301      	movs	r3, #1
 800040e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000410:	2302      	movs	r3, #2
 8000412:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000418:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800041a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800041e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000420:	f107 0318 	add.w	r3, r7, #24
 8000424:	4618      	mov	r0, r3
 8000426:	f001 f909 	bl	800163c <HAL_RCC_OscConfig>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000430:	f000 f8a4 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000434:	230f      	movs	r3, #15
 8000436:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000438:	2302      	movs	r3, #2
 800043a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000444:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2102      	movs	r1, #2
 800044e:	4618      	mov	r0, r3
 8000450:	f001 fb76 	bl	8001b40 <HAL_RCC_ClockConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800045a:	f000 f88f 	bl	800057c <Error_Handler>
  }
}
 800045e:	bf00      	nop
 8000460:	3740      	adds	r7, #64	; 0x40
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_I2C1_Init+0x50>)
 800046e:	4a13      	ldr	r2, [pc, #76]	; (80004bc <MX_I2C1_Init+0x54>)
 8000470:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_I2C1_Init+0x50>)
 8000474:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <MX_I2C1_Init+0x58>)
 8000476:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_I2C1_Init+0x50>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <MX_I2C1_Init+0x50>)
 8000480:	2200      	movs	r2, #0
 8000482:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <MX_I2C1_Init+0x50>)
 8000486:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800048a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <MX_I2C1_Init+0x50>)
 800048e:	2200      	movs	r2, #0
 8000490:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <MX_I2C1_Init+0x50>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <MX_I2C1_Init+0x50>)
 800049a:	2200      	movs	r2, #0
 800049c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_I2C1_Init+0x50>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004a4:	4804      	ldr	r0, [pc, #16]	; (80004b8 <MX_I2C1_Init+0x50>)
 80004a6:	f000 fc7f 	bl	8000da8 <HAL_I2C_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004b0:	f000 f864 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000028 	.word	0x20000028
 80004bc:	40005400 	.word	0x40005400
 80004c0:	000186a0 	.word	0x000186a0

080004c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <MX_I2C2_Init+0x50>)
 80004ca:	4a13      	ldr	r2, [pc, #76]	; (8000518 <MX_I2C2_Init+0x54>)
 80004cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <MX_I2C2_Init+0x50>)
 80004d0:	4a12      	ldr	r2, [pc, #72]	; (800051c <MX_I2C2_Init+0x58>)
 80004d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <MX_I2C2_Init+0x50>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_I2C2_Init+0x50>)
 80004dc:	2200      	movs	r2, #0
 80004de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_I2C2_Init+0x50>)
 80004e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004e8:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <MX_I2C2_Init+0x50>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_I2C2_Init+0x50>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <MX_I2C2_Init+0x50>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_I2C2_Init+0x50>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000500:	4804      	ldr	r0, [pc, #16]	; (8000514 <MX_I2C2_Init+0x50>)
 8000502:	f000 fc51 	bl	8000da8 <HAL_I2C_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800050c:	f000 f836 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	2000007c 	.word	0x2000007c
 8000518:	40005800 	.word	0x40005800
 800051c:	000186a0 	.word	0x000186a0

08000520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_GPIO_Init+0x58>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a13      	ldr	r2, [pc, #76]	; (8000578 <MX_GPIO_Init+0x58>)
 800052c:	f043 0320 	orr.w	r3, r3, #32
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_GPIO_Init+0x58>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0320 	and.w	r3, r3, #32
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MX_GPIO_Init+0x58>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <MX_GPIO_Init+0x58>)
 8000544:	f043 0308 	orr.w	r3, r3, #8
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <MX_GPIO_Init+0x58>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0308 	and.w	r3, r3, #8
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <MX_GPIO_Init+0x58>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	4a07      	ldr	r2, [pc, #28]	; (8000578 <MX_GPIO_Init+0x58>)
 800055c:	f043 0304 	orr.w	r3, r3, #4
 8000560:	6193      	str	r3, [r2, #24]
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <MX_GPIO_Init+0x58>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <HAL_MspInit+0x5c>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <HAL_MspInit+0x5c>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6193      	str	r3, [r2, #24]
 800059a:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <HAL_MspInit+0x5c>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <HAL_MspInit+0x5c>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <HAL_MspInit+0x5c>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <HAL_MspInit+0x5c>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <HAL_MspInit+0x60>)
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_MspInit+0x60>)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010000 	.word	0x40010000

080005ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0318 	add.w	r3, r7, #24
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a2b      	ldr	r2, [pc, #172]	; (80006b4 <HAL_I2C_MspInit+0xc8>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d124      	bne.n	8000656 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <HAL_I2C_MspInit+0xcc>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a29      	ldr	r2, [pc, #164]	; (80006b8 <HAL_I2C_MspInit+0xcc>)
 8000612:	f043 0308 	orr.w	r3, r3, #8
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <HAL_I2C_MspInit+0xcc>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0308 	and.w	r3, r3, #8
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000624:	23c0      	movs	r3, #192	; 0xc0
 8000626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000628:	2312      	movs	r3, #18
 800062a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062c:	2303      	movs	r3, #3
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000630:	f107 0318 	add.w	r3, r7, #24
 8000634:	4619      	mov	r1, r3
 8000636:	4821      	ldr	r0, [pc, #132]	; (80006bc <HAL_I2C_MspInit+0xd0>)
 8000638:	f000 fa32 	bl	8000aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <HAL_I2C_MspInit+0xcc>)
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	4a1d      	ldr	r2, [pc, #116]	; (80006b8 <HAL_I2C_MspInit+0xcc>)
 8000642:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000646:	61d3      	str	r3, [r2, #28]
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <HAL_I2C_MspInit+0xcc>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000654:	e029      	b.n	80006aa <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a19      	ldr	r2, [pc, #100]	; (80006c0 <HAL_I2C_MspInit+0xd4>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d124      	bne.n	80006aa <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_I2C_MspInit+0xcc>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <HAL_I2C_MspInit+0xcc>)
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_I2C_MspInit+0xcc>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0308 	and.w	r3, r3, #8
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000678:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800067c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800067e:	2312      	movs	r3, #18
 8000680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000682:	2303      	movs	r3, #3
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	4619      	mov	r1, r3
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <HAL_I2C_MspInit+0xd0>)
 800068e:	f000 fa07 	bl	8000aa0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_I2C_MspInit+0xcc>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <HAL_I2C_MspInit+0xcc>)
 8000698:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_I2C_MspInit+0xcc>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40005400 	.word	0x40005400
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010c00 	.word	0x40010c00
 80006c0:	40005800 	.word	0x40005800

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <HardFault_Handler+0x4>

080006d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <MemManage_Handler+0x4>

080006dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <BusFault_Handler+0x4>

080006e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <UsageFault_Handler+0x4>

080006e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000710:	f000 f8a2 	bl	8000858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <SystemInit+0x5c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a14      	ldr	r2, [pc, #80]	; (8000774 <SystemInit+0x5c>)
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <SystemInit+0x5c>)
 800072a:	685a      	ldr	r2, [r3, #4]
 800072c:	4911      	ldr	r1, [pc, #68]	; (8000774 <SystemInit+0x5c>)
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <SystemInit+0x60>)
 8000730:	4013      	ands	r3, r2
 8000732:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <SystemInit+0x5c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <SystemInit+0x5c>)
 800073a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800073e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000742:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <SystemInit+0x5c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <SystemInit+0x5c>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <SystemInit+0x5c>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <SystemInit+0x5c>)
 8000756:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800075a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <SystemInit+0x5c>)
 800075e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000762:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <SystemInit+0x64>)
 8000766:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800076a:	609a      	str	r2, [r3, #8]
#endif 
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	40021000 	.word	0x40021000
 8000778:	f8ff0000 	.word	0xf8ff0000
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000780:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000782:	e003      	b.n	800078c <LoopCopyDataInit>

08000784 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000786:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000788:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800078a:	3104      	adds	r1, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800078c:	480a      	ldr	r0, [pc, #40]	; (80007b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000790:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000792:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000794:	d3f6      	bcc.n	8000784 <CopyDataInit>
  ldr r2, =_sbss
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000798:	e002      	b.n	80007a0 <LoopFillZerobss>

0800079a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800079c:	f842 3b04 	str.w	r3, [r2], #4

080007a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007a4:	d3f9      	bcc.n	800079a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007a6:	f7ff ffb7 	bl	8000718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007aa:	f001 fb4d 	bl	8001e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ae:	f7ff fdb5 	bl	800031c <main>
  bx lr
 80007b2:	4770      	bx	lr
  ldr r3, =_sidata
 80007b4:	08001f00 	.word	0x08001f00
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80007c0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80007c4:	200000dc 	.word	0x200000dc

080007c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <ADC1_2_IRQHandler>
	...

080007cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_Init+0x28>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <HAL_Init+0x28>)
 80007d6:	f043 0310 	orr.w	r3, r3, #16
 80007da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 f92b 	bl	8000a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 f808 	bl	80007f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e8:	f7ff fece 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40022000 	.word	0x40022000

080007f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x54>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_InitTick+0x58>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000812:	fbb2 f3f3 	udiv	r3, r2, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f935 	bl	8000a86 <HAL_SYSTICK_Config>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e00e      	b.n	8000844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d80a      	bhi.n	8000842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f000 f90b 	bl	8000a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_InitTick+0x5c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000000 	.word	0x20000000
 8000850:	20000008 	.word	0x20000008
 8000854:	20000004 	.word	0x20000004

08000858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_IncTick+0x1c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_IncTick+0x20>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a03      	ldr	r2, [pc, #12]	; (8000878 <HAL_IncTick+0x20>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	20000008 	.word	0x20000008
 8000878:	200000d8 	.word	0x200000d8

0800087c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return uwTick;
 8000880:	4b02      	ldr	r3, [pc, #8]	; (800088c <HAL_GetTick+0x10>)
 8000882:	681b      	ldr	r3, [r3, #0]
}
 8000884:	4618      	mov	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	200000d8 	.word	0x200000d8

08000890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000898:	f7ff fff0 	bl	800087c <HAL_GetTick>
 800089c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a8:	d005      	beq.n	80008b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_Delay+0x44>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4413      	add	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008b6:	bf00      	nop
 80008b8:	f7ff ffe0 	bl	800087c <HAL_GetTick>
 80008bc:	4602      	mov	r2, r0
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d8f7      	bhi.n	80008b8 <HAL_Delay+0x28>
  {
  }
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000008 	.word	0x20000008

080008d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <__NVIC_SetPriorityGrouping+0x44>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090a:	4a04      	ldr	r2, [pc, #16]	; (800091c <__NVIC_SetPriorityGrouping+0x44>)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	60d3      	str	r3, [r2, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <__NVIC_GetPriorityGrouping+0x18>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	f003 0307 	and.w	r3, r3, #7
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	2b00      	cmp	r3, #0
 800094e:	db0a      	blt.n	8000966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	490c      	ldr	r1, [pc, #48]	; (8000988 <__NVIC_SetPriority+0x4c>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	0112      	lsls	r2, r2, #4
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	440b      	add	r3, r1
 8000960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000964:	e00a      	b.n	800097c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4908      	ldr	r1, [pc, #32]	; (800098c <__NVIC_SetPriority+0x50>)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	f003 030f 	and.w	r3, r3, #15
 8000972:	3b04      	subs	r3, #4
 8000974:	0112      	lsls	r2, r2, #4
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	440b      	add	r3, r1
 800097a:	761a      	strb	r2, [r3, #24]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	; 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	f1c3 0307 	rsb	r3, r3, #7
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	bf28      	it	cs
 80009ae:	2304      	movcs	r3, #4
 80009b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3304      	adds	r3, #4
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d902      	bls.n	80009c0 <NVIC_EncodePriority+0x30>
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3b03      	subs	r3, #3
 80009be:	e000      	b.n	80009c2 <NVIC_EncodePriority+0x32>
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c4:	f04f 32ff 	mov.w	r2, #4294967295
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43da      	mvns	r2, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	401a      	ands	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	43d9      	mvns	r1, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	4313      	orrs	r3, r2
         );
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3724      	adds	r7, #36	; 0x24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a04:	d301      	bcc.n	8000a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00f      	b.n	8000a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <SysTick_Config+0x40>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a12:	210f      	movs	r1, #15
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f7ff ff90 	bl	800093c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <SysTick_Config+0x40>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <SysTick_Config+0x40>)
 8000a24:	2207      	movs	r2, #7
 8000a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	e000e010 	.word	0xe000e010

08000a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ff49 	bl	80008d8 <__NVIC_SetPriorityGrouping>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4603      	mov	r3, r0
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a60:	f7ff ff5e 	bl	8000920 <__NVIC_GetPriorityGrouping>
 8000a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	68b9      	ldr	r1, [r7, #8]
 8000a6a:	6978      	ldr	r0, [r7, #20]
 8000a6c:	f7ff ff90 	bl	8000990 <NVIC_EncodePriority>
 8000a70:	4602      	mov	r2, r0
 8000a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff5f 	bl	800093c <__NVIC_SetPriority>
}
 8000a7e:	bf00      	nop
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ffb0 	bl	80009f4 <SysTick_Config>
 8000a94:	4603      	mov	r3, r0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b08b      	sub	sp, #44	; 0x2c
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab2:	e169      	b.n	8000d88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	69fa      	ldr	r2, [r7, #28]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f040 8158 	bne.w	8000d82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	4a9a      	ldr	r2, [pc, #616]	; (8000d40 <HAL_GPIO_Init+0x2a0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d05e      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000adc:	4a98      	ldr	r2, [pc, #608]	; (8000d40 <HAL_GPIO_Init+0x2a0>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d875      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000ae2:	4a98      	ldr	r2, [pc, #608]	; (8000d44 <HAL_GPIO_Init+0x2a4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d058      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000ae8:	4a96      	ldr	r2, [pc, #600]	; (8000d44 <HAL_GPIO_Init+0x2a4>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d86f      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000aee:	4a96      	ldr	r2, [pc, #600]	; (8000d48 <HAL_GPIO_Init+0x2a8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d052      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000af4:	4a94      	ldr	r2, [pc, #592]	; (8000d48 <HAL_GPIO_Init+0x2a8>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d869      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000afa:	4a94      	ldr	r2, [pc, #592]	; (8000d4c <HAL_GPIO_Init+0x2ac>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d04c      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <HAL_GPIO_Init+0x2ac>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d863      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000b06:	4a92      	ldr	r2, [pc, #584]	; (8000d50 <HAL_GPIO_Init+0x2b0>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d046      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000b0c:	4a90      	ldr	r2, [pc, #576]	; (8000d50 <HAL_GPIO_Init+0x2b0>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d85d      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000b12:	2b12      	cmp	r3, #18
 8000b14:	d82a      	bhi.n	8000b6c <HAL_GPIO_Init+0xcc>
 8000b16:	2b12      	cmp	r3, #18
 8000b18:	d859      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000b1a:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <HAL_GPIO_Init+0x80>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000b9b 	.word	0x08000b9b
 8000b24:	08000b75 	.word	0x08000b75
 8000b28:	08000b87 	.word	0x08000b87
 8000b2c:	08000bc9 	.word	0x08000bc9
 8000b30:	08000bcf 	.word	0x08000bcf
 8000b34:	08000bcf 	.word	0x08000bcf
 8000b38:	08000bcf 	.word	0x08000bcf
 8000b3c:	08000bcf 	.word	0x08000bcf
 8000b40:	08000bcf 	.word	0x08000bcf
 8000b44:	08000bcf 	.word	0x08000bcf
 8000b48:	08000bcf 	.word	0x08000bcf
 8000b4c:	08000bcf 	.word	0x08000bcf
 8000b50:	08000bcf 	.word	0x08000bcf
 8000b54:	08000bcf 	.word	0x08000bcf
 8000b58:	08000bcf 	.word	0x08000bcf
 8000b5c:	08000bcf 	.word	0x08000bcf
 8000b60:	08000bcf 	.word	0x08000bcf
 8000b64:	08000b7d 	.word	0x08000b7d
 8000b68:	08000b91 	.word	0x08000b91
 8000b6c:	4a79      	ldr	r2, [pc, #484]	; (8000d54 <HAL_GPIO_Init+0x2b4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d013      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b72:	e02c      	b.n	8000bce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	623b      	str	r3, [r7, #32]
          break;
 8000b7a:	e029      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	3304      	adds	r3, #4
 8000b82:	623b      	str	r3, [r7, #32]
          break;
 8000b84:	e024      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	3308      	adds	r3, #8
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e01f      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	330c      	adds	r3, #12
 8000b96:	623b      	str	r3, [r7, #32]
          break;
 8000b98:	e01a      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d102      	bne.n	8000ba8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	623b      	str	r3, [r7, #32]
          break;
 8000ba6:	e013      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d105      	bne.n	8000bbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	611a      	str	r2, [r3, #16]
          break;
 8000bba:	e009      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	615a      	str	r2, [r3, #20]
          break;
 8000bc6:	e003      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
          break;
 8000bcc:	e000      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          break;
 8000bce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	2bff      	cmp	r3, #255	; 0xff
 8000bd4:	d801      	bhi.n	8000bda <HAL_GPIO_Init+0x13a>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	e001      	b.n	8000bde <HAL_GPIO_Init+0x13e>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	2bff      	cmp	r3, #255	; 0xff
 8000be4:	d802      	bhi.n	8000bec <HAL_GPIO_Init+0x14c>
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	e002      	b.n	8000bf2 <HAL_GPIO_Init+0x152>
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	3b08      	subs	r3, #8
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	401a      	ands	r2, r3
 8000c04:	6a39      	ldr	r1, [r7, #32]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f000 80b1 	beq.w	8000d82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c20:	4b4d      	ldr	r3, [pc, #308]	; (8000d58 <HAL_GPIO_Init+0x2b8>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a4c      	ldr	r2, [pc, #304]	; (8000d58 <HAL_GPIO_Init+0x2b8>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <HAL_GPIO_Init+0x2b8>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c38:	4a48      	ldr	r2, [pc, #288]	; (8000d5c <HAL_GPIO_Init+0x2bc>)
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	3302      	adds	r3, #2
 8000c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	220f      	movs	r2, #15
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a40      	ldr	r2, [pc, #256]	; (8000d60 <HAL_GPIO_Init+0x2c0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d013      	beq.n	8000c8c <HAL_GPIO_Init+0x1ec>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a3f      	ldr	r2, [pc, #252]	; (8000d64 <HAL_GPIO_Init+0x2c4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d00d      	beq.n	8000c88 <HAL_GPIO_Init+0x1e8>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a3e      	ldr	r2, [pc, #248]	; (8000d68 <HAL_GPIO_Init+0x2c8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d007      	beq.n	8000c84 <HAL_GPIO_Init+0x1e4>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a3d      	ldr	r2, [pc, #244]	; (8000d6c <HAL_GPIO_Init+0x2cc>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d101      	bne.n	8000c80 <HAL_GPIO_Init+0x1e0>
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	e006      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c80:	2304      	movs	r3, #4
 8000c82:	e004      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c84:	2302      	movs	r3, #2
 8000c86:	e002      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c90:	f002 0203 	and.w	r2, r2, #3
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	4093      	lsls	r3, r2
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c9e:	492f      	ldr	r1, [pc, #188]	; (8000d5c <HAL_GPIO_Init+0x2bc>)
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	492c      	ldr	r1, [pc, #176]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	600b      	str	r3, [r1, #0]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4928      	ldr	r1, [pc, #160]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	4922      	ldr	r1, [pc, #136]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	604b      	str	r3, [r1, #4]
 8000cec:	e006      	b.n	8000cfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	491e      	ldr	r1, [pc, #120]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d006      	beq.n	8000d16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	4918      	ldr	r1, [pc, #96]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
 8000d14:	e006      	b.n	8000d24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	4914      	ldr	r1, [pc, #80]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d20:	4013      	ands	r3, r2
 8000d22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d021      	beq.n	8000d74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	490e      	ldr	r1, [pc, #56]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60cb      	str	r3, [r1, #12]
 8000d3c:	e021      	b.n	8000d82 <HAL_GPIO_Init+0x2e2>
 8000d3e:	bf00      	nop
 8000d40:	10320000 	.word	0x10320000
 8000d44:	10310000 	.word	0x10310000
 8000d48:	10220000 	.word	0x10220000
 8000d4c:	10210000 	.word	0x10210000
 8000d50:	10120000 	.word	0x10120000
 8000d54:	10110000 	.word	0x10110000
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010000 	.word	0x40010000
 8000d60:	40010800 	.word	0x40010800
 8000d64:	40010c00 	.word	0x40010c00
 8000d68:	40011000 	.word	0x40011000
 8000d6c:	40011400 	.word	0x40011400
 8000d70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	4909      	ldr	r1, [pc, #36]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	3301      	adds	r3, #1
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f47f ae8e 	bne.w	8000ab4 <HAL_GPIO_Init+0x14>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	372c      	adds	r7, #44	; 0x2c
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40010400 	.word	0x40010400

08000da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e12b      	b.n	8001012 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d106      	bne.n	8000dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff fc0c 	bl	80005ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2224      	movs	r2, #36	; 0x24
 8000dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 0201 	bic.w	r2, r2, #1
 8000dea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e0c:	f000 ffea 	bl	8001de4 <HAL_RCC_GetPCLK1Freq>
 8000e10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	4a81      	ldr	r2, [pc, #516]	; (800101c <HAL_I2C_Init+0x274>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d807      	bhi.n	8000e2c <HAL_I2C_Init+0x84>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4a80      	ldr	r2, [pc, #512]	; (8001020 <HAL_I2C_Init+0x278>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	bf94      	ite	ls
 8000e24:	2301      	movls	r3, #1
 8000e26:	2300      	movhi	r3, #0
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	e006      	b.n	8000e3a <HAL_I2C_Init+0x92>
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4a7d      	ldr	r2, [pc, #500]	; (8001024 <HAL_I2C_Init+0x27c>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	bf94      	ite	ls
 8000e34:	2301      	movls	r3, #1
 8000e36:	2300      	movhi	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e0e7      	b.n	8001012 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4a78      	ldr	r2, [pc, #480]	; (8001028 <HAL_I2C_Init+0x280>)
 8000e46:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4a:	0c9b      	lsrs	r3, r3, #18
 8000e4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	4a6a      	ldr	r2, [pc, #424]	; (800101c <HAL_I2C_Init+0x274>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d802      	bhi.n	8000e7c <HAL_I2C_Init+0xd4>
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	e009      	b.n	8000e90 <HAL_I2C_Init+0xe8>
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e82:	fb02 f303 	mul.w	r3, r2, r3
 8000e86:	4a69      	ldr	r2, [pc, #420]	; (800102c <HAL_I2C_Init+0x284>)
 8000e88:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8c:	099b      	lsrs	r3, r3, #6
 8000e8e:	3301      	adds	r3, #1
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6812      	ldr	r2, [r2, #0]
 8000e94:	430b      	orrs	r3, r1
 8000e96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000ea2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	495c      	ldr	r1, [pc, #368]	; (800101c <HAL_I2C_Init+0x274>)
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d819      	bhi.n	8000ee4 <HAL_I2C_Init+0x13c>
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	1e59      	subs	r1, r3, #1
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ebe:	1c59      	adds	r1, r3, #1
 8000ec0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00a      	beq.n	8000ee0 <HAL_I2C_Init+0x138>
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	1e59      	subs	r1, r3, #1
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ed8:	3301      	adds	r3, #1
 8000eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ede:	e051      	b.n	8000f84 <HAL_I2C_Init+0x1dc>
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	e04f      	b.n	8000f84 <HAL_I2C_Init+0x1dc>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d111      	bne.n	8000f10 <HAL_I2C_Init+0x168>
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	1e58      	subs	r0, r3, #1
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6859      	ldr	r1, [r3, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	440b      	add	r3, r1
 8000efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000efe:	3301      	adds	r3, #1
 8000f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	bf0c      	ite	eq
 8000f08:	2301      	moveq	r3, #1
 8000f0a:	2300      	movne	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	e012      	b.n	8000f36 <HAL_I2C_Init+0x18e>
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	1e58      	subs	r0, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6859      	ldr	r1, [r3, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	0099      	lsls	r1, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f26:	3301      	adds	r3, #1
 8000f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bf0c      	ite	eq
 8000f30:	2301      	moveq	r3, #1
 8000f32:	2300      	movne	r3, #0
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_I2C_Init+0x196>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e022      	b.n	8000f84 <HAL_I2C_Init+0x1dc>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10e      	bne.n	8000f64 <HAL_I2C_Init+0x1bc>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	1e58      	subs	r0, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6859      	ldr	r1, [r3, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	440b      	add	r3, r1
 8000f54:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f58:	3301      	adds	r3, #1
 8000f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f62:	e00f      	b.n	8000f84 <HAL_I2C_Init+0x1dc>
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	1e58      	subs	r0, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6859      	ldr	r1, [r3, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	0099      	lsls	r1, r3, #2
 8000f74:	440b      	add	r3, r1
 8000f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	6809      	ldr	r1, [r1, #0]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69da      	ldr	r2, [r3, #28]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000fb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6911      	ldr	r1, [r2, #16]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68d2      	ldr	r2, [r2, #12]
 8000fbe:	4311      	orrs	r1, r2
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	430b      	orrs	r3, r1
 8000fc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695a      	ldr	r2, [r3, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 0201 	orr.w	r2, r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	000186a0 	.word	0x000186a0
 8001020:	001e847f 	.word	0x001e847f
 8001024:	003d08ff 	.word	0x003d08ff
 8001028:	431bde83 	.word	0x431bde83
 800102c:	10624dd3 	.word	0x10624dd3

08001030 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af02      	add	r7, sp, #8
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	461a      	mov	r2, r3
 800103c:	460b      	mov	r3, r1
 800103e:	817b      	strh	r3, [r7, #10]
 8001040:	4613      	mov	r3, r2
 8001042:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff fc1a 	bl	800087c <HAL_GetTick>
 8001048:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b20      	cmp	r3, #32
 8001054:	f040 80e0 	bne.w	8001218 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2319      	movs	r3, #25
 800105e:	2201      	movs	r2, #1
 8001060:	4970      	ldr	r1, [pc, #448]	; (8001224 <HAL_I2C_Master_Transmit+0x1f4>)
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f000 f964 	bl	8001330 <I2C_WaitOnFlagUntilTimeout>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800106e:	2302      	movs	r3, #2
 8001070:	e0d3      	b.n	800121a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001078:	2b01      	cmp	r3, #1
 800107a:	d101      	bne.n	8001080 <HAL_I2C_Master_Transmit+0x50>
 800107c:	2302      	movs	r3, #2
 800107e:	e0cc      	b.n	800121a <HAL_I2C_Master_Transmit+0x1ea>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b01      	cmp	r3, #1
 8001094:	d007      	beq.n	80010a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f042 0201 	orr.w	r2, r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2221      	movs	r2, #33	; 0x21
 80010ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2210      	movs	r2, #16
 80010c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2200      	movs	r2, #0
 80010ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	893a      	ldrh	r2, [r7, #8]
 80010d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010dc:	b29a      	uxth	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4a50      	ldr	r2, [pc, #320]	; (8001228 <HAL_I2C_Master_Transmit+0x1f8>)
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80010e8:	8979      	ldrh	r1, [r7, #10]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	6a3a      	ldr	r2, [r7, #32]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f000 f89c 	bl	800122c <I2C_MasterRequestWrite>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e08d      	b.n	800121a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001114:	e066      	b.n	80011e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	6a39      	ldr	r1, [r7, #32]
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 f9de 	bl	80014dc <I2C_WaitOnTXEFlagUntilTimeout>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00d      	beq.n	8001142 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	2b04      	cmp	r3, #4
 800112c:	d107      	bne.n	800113e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800113c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e06b      	b.n	800121a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800115c:	b29b      	uxth	r3, r3
 800115e:	3b01      	subs	r3, #1
 8001160:	b29a      	uxth	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800116a:	3b01      	subs	r3, #1
 800116c:	b29a      	uxth	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	2b04      	cmp	r3, #4
 800117e:	d11b      	bne.n	80011b8 <HAL_I2C_Master_Transmit+0x188>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001184:	2b00      	cmp	r3, #0
 8001186:	d017      	beq.n	80011b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	3b01      	subs	r3, #1
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b0:	3b01      	subs	r3, #1
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	6a39      	ldr	r1, [r7, #32]
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f000 f9ce 	bl	800155e <I2C_WaitOnBTFFlagUntilTimeout>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00d      	beq.n	80011e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d107      	bne.n	80011e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e01a      	b.n	800121a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d194      	bne.n	8001116 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2220      	movs	r2, #32
 8001200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	e000      	b.n	800121a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001218:	2302      	movs	r3, #2
  }
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	00100002 	.word	0x00100002
 8001228:	ffff0000 	.word	0xffff0000

0800122c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af02      	add	r7, sp, #8
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	460b      	mov	r3, r1
 800123a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001240:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2b08      	cmp	r3, #8
 8001246:	d006      	beq.n	8001256 <I2C_MasterRequestWrite+0x2a>
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d003      	beq.n	8001256 <I2C_MasterRequestWrite+0x2a>
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001254:	d108      	bne.n	8001268 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	e00b      	b.n	8001280 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	2b12      	cmp	r3, #18
 800126e:	d107      	bne.n	8001280 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800127e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f000 f84f 	bl	8001330 <I2C_WaitOnFlagUntilTimeout>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00d      	beq.n	80012b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a6:	d103      	bne.n	80012b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e035      	b.n	8001320 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012bc:	d108      	bne.n	80012d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80012be:	897b      	ldrh	r3, [r7, #10]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80012cc:	611a      	str	r2, [r3, #16]
 80012ce:	e01b      	b.n	8001308 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80012d0:	897b      	ldrh	r3, [r7, #10]
 80012d2:	11db      	asrs	r3, r3, #7
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f003 0306 	and.w	r3, r3, #6
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	f063 030f 	orn	r3, r3, #15
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	490e      	ldr	r1, [pc, #56]	; (8001328 <I2C_MasterRequestWrite+0xfc>)
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f000 f875 	bl	80013de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e010      	b.n	8001320 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80012fe:	897b      	ldrh	r3, [r7, #10]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4907      	ldr	r1, [pc, #28]	; (800132c <I2C_MasterRequestWrite+0x100>)
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f000 f865 	bl	80013de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	00010008 	.word	0x00010008
 800132c:	00010002 	.word	0x00010002

08001330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	4613      	mov	r3, r2
 800133e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001340:	e025      	b.n	800138e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d021      	beq.n	800138e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800134a:	f7ff fa97 	bl	800087c <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d302      	bcc.n	8001360 <I2C_WaitOnFlagUntilTimeout+0x30>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d116      	bne.n	800138e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2200      	movs	r2, #0
 8001364:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2220      	movs	r2, #32
 800136a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f043 0220 	orr.w	r2, r3, #32
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e023      	b.n	80013d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	0c1b      	lsrs	r3, r3, #16
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b01      	cmp	r3, #1
 8001396:	d10d      	bne.n	80013b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	43da      	mvns	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4013      	ands	r3, r2
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	bf0c      	ite	eq
 80013aa:	2301      	moveq	r3, #1
 80013ac:	2300      	movne	r3, #0
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	e00c      	b.n	80013ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4013      	ands	r3, r2
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	bf0c      	ite	eq
 80013c6:	2301      	moveq	r3, #1
 80013c8:	2300      	movne	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d0b6      	beq.n	8001342 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013ec:	e051      	b.n	8001492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fc:	d123      	bne.n	8001446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800140c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001416:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2220      	movs	r2, #32
 8001422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f043 0204 	orr.w	r2, r3, #4
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e046      	b.n	80014d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d021      	beq.n	8001492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800144e:	f7ff fa15 	bl	800087c <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	429a      	cmp	r2, r3
 800145c:	d302      	bcc.n	8001464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d116      	bne.n	8001492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2220      	movs	r2, #32
 800146e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f043 0220 	orr.w	r2, r3, #32
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e020      	b.n	80014d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	0c1b      	lsrs	r3, r3, #16
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b01      	cmp	r3, #1
 800149a:	d10c      	bne.n	80014b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4013      	ands	r3, r2
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	bf14      	ite	ne
 80014ae:	2301      	movne	r3, #1
 80014b0:	2300      	moveq	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	e00b      	b.n	80014ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	43da      	mvns	r2, r3
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	4013      	ands	r3, r2
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf14      	ite	ne
 80014c8:	2301      	movne	r3, #1
 80014ca:	2300      	moveq	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d18d      	bne.n	80013ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014e8:	e02d      	b.n	8001546 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f000 f878 	bl	80015e0 <I2C_IsAcknowledgeFailed>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e02d      	b.n	8001556 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d021      	beq.n	8001546 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001502:	f7ff f9bb 	bl	800087c <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	429a      	cmp	r2, r3
 8001510:	d302      	bcc.n	8001518 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d116      	bne.n	8001546 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2220      	movs	r2, #32
 8001522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f043 0220 	orr.w	r2, r3, #32
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e007      	b.n	8001556 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001550:	2b80      	cmp	r3, #128	; 0x80
 8001552:	d1ca      	bne.n	80014ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b084      	sub	sp, #16
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800156a:	e02d      	b.n	80015c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 f837 	bl	80015e0 <I2C_IsAcknowledgeFailed>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e02d      	b.n	80015d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001582:	d021      	beq.n	80015c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001584:	f7ff f97a 	bl	800087c <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	429a      	cmp	r2, r3
 8001592:	d302      	bcc.n	800159a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d116      	bne.n	80015c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2220      	movs	r2, #32
 80015a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f043 0220 	orr.w	r2, r3, #32
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e007      	b.n	80015d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d1ca      	bne.n	800156c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f6:	d11b      	bne.n	8001630 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001600:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2220      	movs	r2, #32
 800160c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f043 0204 	orr.w	r2, r3, #4
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e272      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8087 	beq.w	800176a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800165c:	4b92      	ldr	r3, [pc, #584]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b04      	cmp	r3, #4
 8001666:	d00c      	beq.n	8001682 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001668:	4b8f      	ldr	r3, [pc, #572]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b08      	cmp	r3, #8
 8001672:	d112      	bne.n	800169a <HAL_RCC_OscConfig+0x5e>
 8001674:	4b8c      	ldr	r3, [pc, #560]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001680:	d10b      	bne.n	800169a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001682:	4b89      	ldr	r3, [pc, #548]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d06c      	beq.n	8001768 <HAL_RCC_OscConfig+0x12c>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d168      	bne.n	8001768 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e24c      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a2:	d106      	bne.n	80016b2 <HAL_RCC_OscConfig+0x76>
 80016a4:	4b80      	ldr	r3, [pc, #512]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a7f      	ldr	r2, [pc, #508]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80016aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e02e      	b.n	8001710 <HAL_RCC_OscConfig+0xd4>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x98>
 80016ba:	4b7b      	ldr	r3, [pc, #492]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a7a      	ldr	r2, [pc, #488]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b78      	ldr	r3, [pc, #480]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a77      	ldr	r2, [pc, #476]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e01d      	b.n	8001710 <HAL_RCC_OscConfig+0xd4>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0xbc>
 80016de:	4b72      	ldr	r3, [pc, #456]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a71      	ldr	r2, [pc, #452]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a6e      	ldr	r2, [pc, #440]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0xd4>
 80016f8:	4b6b      	ldr	r3, [pc, #428]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a6a      	ldr	r2, [pc, #424]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b68      	ldr	r3, [pc, #416]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a67      	ldr	r2, [pc, #412]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 800170a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff f8b0 	bl	800087c <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff f8ac 	bl	800087c <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	; 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e200      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	4b5d      	ldr	r3, [pc, #372]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0xe4>
 800173e:	e014      	b.n	800176a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff f89c 	bl	800087c <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff f898 	bl	800087c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e1ec      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175a:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x10c>
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d063      	beq.n	800183e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001776:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00b      	beq.n	800179a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001782:	4b49      	ldr	r3, [pc, #292]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b08      	cmp	r3, #8
 800178c:	d11c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x18c>
 800178e:	4b46      	ldr	r3, [pc, #280]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d116      	bne.n	80017c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179a:	4b43      	ldr	r3, [pc, #268]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <HAL_RCC_OscConfig+0x176>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e1c0      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b2:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4939      	ldr	r1, [pc, #228]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c6:	e03a      	b.n	800183e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d020      	beq.n	8001812 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d0:	4b36      	ldr	r3, [pc, #216]	; (80018ac <HAL_RCC_OscConfig+0x270>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d6:	f7ff f851 	bl	800087c <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017de:	f7ff f84d 	bl	800087c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e1a1      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f0:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4927      	ldr	r1, [pc, #156]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]
 8001810:	e015      	b.n	800183e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001812:	4b26      	ldr	r3, [pc, #152]	; (80018ac <HAL_RCC_OscConfig+0x270>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff f830 	bl	800087c <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001820:	f7ff f82c 	bl	800087c <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e180      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d03a      	beq.n	80018c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d019      	beq.n	8001886 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_RCC_OscConfig+0x274>)
 8001854:	2201      	movs	r2, #1
 8001856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001858:	f7ff f810 	bl	800087c <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001860:	f7ff f80c 	bl	800087c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e160      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_RCC_OscConfig+0x26c>)
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800187e:	2001      	movs	r0, #1
 8001880:	f000 fac4 	bl	8001e0c <RCC_Delay>
 8001884:	e01c      	b.n	80018c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_RCC_OscConfig+0x274>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188c:	f7fe fff6 	bl	800087c <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001892:	e00f      	b.n	80018b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001894:	f7fe fff2 	bl	800087c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d908      	bls.n	80018b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e146      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	42420000 	.word	0x42420000
 80018b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b4:	4b92      	ldr	r3, [pc, #584]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1e9      	bne.n	8001894 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80a6 	beq.w	8001a1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d2:	4b8b      	ldr	r3, [pc, #556]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10d      	bne.n	80018fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	4a87      	ldr	r2, [pc, #540]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e8:	61d3      	str	r3, [r2, #28]
 80018ea:	4b85      	ldr	r3, [pc, #532]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018f6:	2301      	movs	r3, #1
 80018f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fa:	4b82      	ldr	r3, [pc, #520]	; (8001b04 <HAL_RCC_OscConfig+0x4c8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	2b00      	cmp	r3, #0
 8001904:	d118      	bne.n	8001938 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001906:	4b7f      	ldr	r3, [pc, #508]	; (8001b04 <HAL_RCC_OscConfig+0x4c8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a7e      	ldr	r2, [pc, #504]	; (8001b04 <HAL_RCC_OscConfig+0x4c8>)
 800190c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001912:	f7fe ffb3 	bl	800087c <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191a:	f7fe ffaf 	bl	800087c <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b64      	cmp	r3, #100	; 0x64
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e103      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192c:	4b75      	ldr	r3, [pc, #468]	; (8001b04 <HAL_RCC_OscConfig+0x4c8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d106      	bne.n	800194e <HAL_RCC_OscConfig+0x312>
 8001940:	4b6f      	ldr	r3, [pc, #444]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4a6e      	ldr	r2, [pc, #440]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6213      	str	r3, [r2, #32]
 800194c:	e02d      	b.n	80019aa <HAL_RCC_OscConfig+0x36e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0x334>
 8001956:	4b6a      	ldr	r3, [pc, #424]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	4a69      	ldr	r2, [pc, #420]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	f023 0301 	bic.w	r3, r3, #1
 8001960:	6213      	str	r3, [r2, #32]
 8001962:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	4a66      	ldr	r2, [pc, #408]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	f023 0304 	bic.w	r3, r3, #4
 800196c:	6213      	str	r3, [r2, #32]
 800196e:	e01c      	b.n	80019aa <HAL_RCC_OscConfig+0x36e>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b05      	cmp	r3, #5
 8001976:	d10c      	bne.n	8001992 <HAL_RCC_OscConfig+0x356>
 8001978:	4b61      	ldr	r3, [pc, #388]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4a60      	ldr	r2, [pc, #384]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	6213      	str	r3, [r2, #32]
 8001984:	4b5e      	ldr	r3, [pc, #376]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4a5d      	ldr	r2, [pc, #372]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6213      	str	r3, [r2, #32]
 8001990:	e00b      	b.n	80019aa <HAL_RCC_OscConfig+0x36e>
 8001992:	4b5b      	ldr	r3, [pc, #364]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	4a5a      	ldr	r2, [pc, #360]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	6213      	str	r3, [r2, #32]
 800199e:	4b58      	ldr	r3, [pc, #352]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4a57      	ldr	r2, [pc, #348]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	f023 0304 	bic.w	r3, r3, #4
 80019a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d015      	beq.n	80019de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b2:	f7fe ff63 	bl	800087c <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ba:	f7fe ff5f 	bl	800087c <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e0b1      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d0:	4b4b      	ldr	r3, [pc, #300]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0ee      	beq.n	80019ba <HAL_RCC_OscConfig+0x37e>
 80019dc:	e014      	b.n	8001a08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019de:	f7fe ff4d 	bl	800087c <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e4:	e00a      	b.n	80019fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	f7fe ff49 	bl	800087c <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e09b      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fc:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1ee      	bne.n	80019e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a08:	7dfb      	ldrb	r3, [r7, #23]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d105      	bne.n	8001a1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0e:	4b3c      	ldr	r3, [pc, #240]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a3b      	ldr	r2, [pc, #236]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8087 	beq.w	8001b32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a24:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d061      	beq.n	8001af4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d146      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a38:	4b33      	ldr	r3, [pc, #204]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7fe ff1d 	bl	800087c <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a46:	f7fe ff19 	bl	800087c <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e06d      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a58:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6c:	d108      	bne.n	8001a80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	4921      	ldr	r1, [pc, #132]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a80:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a19      	ldr	r1, [r3, #32]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	430b      	orrs	r3, r1
 8001a92:	491b      	ldr	r1, [pc, #108]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7fe feed 	bl	800087c <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa6:	f7fe fee9 	bl	800087c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e03d      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x46a>
 8001ac4:	e035      	b.n	8001b32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_RCC_OscConfig+0x4cc>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7fe fed6 	bl	800087c <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7fe fed2 	bl	800087c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e026      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x498>
 8001af2:	e01e      	b.n	8001b32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d107      	bne.n	8001b0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e019      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40007000 	.word	0x40007000
 8001b08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_RCC_OscConfig+0x500>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000

08001b40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0d0      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b54:	4b6a      	ldr	r3, [pc, #424]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d910      	bls.n	8001b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b67      	ldr	r3, [pc, #412]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 0207 	bic.w	r2, r3, #7
 8001b6a:	4965      	ldr	r1, [pc, #404]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b63      	ldr	r3, [pc, #396]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0b8      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d020      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b9c:	4b59      	ldr	r3, [pc, #356]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4a58      	ldr	r2, [pc, #352]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ba6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb4:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	4a52      	ldr	r2, [pc, #328]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc0:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	494d      	ldr	r1, [pc, #308]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d040      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d115      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e07f      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e073      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e06b      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1e:	4b39      	ldr	r3, [pc, #228]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f023 0203 	bic.w	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4936      	ldr	r1, [pc, #216]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c30:	f7fe fe24 	bl	800087c <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7fe fe20 	bl	800087c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e053      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4e:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 020c 	and.w	r2, r3, #12
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d1eb      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c60:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d210      	bcs.n	8001c90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 0207 	bic.w	r2, r3, #7
 8001c76:	4922      	ldr	r1, [pc, #136]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e032      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4916      	ldr	r1, [pc, #88]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d009      	beq.n	8001cce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	490e      	ldr	r1, [pc, #56]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cce:	f000 f821 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	490a      	ldr	r1, [pc, #40]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce0:	5ccb      	ldrb	r3, [r1, r3]
 8001ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce6:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <HAL_RCC_ClockConfig+0x1cc>)
 8001ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_RCC_ClockConfig+0x1d0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fd82 	bl	80007f8 <HAL_InitTick>

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40022000 	.word	0x40022000
 8001d04:	40021000 	.word	0x40021000
 8001d08:	08001ee0 	.word	0x08001ee0
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20000004 	.word	0x20000004

08001d14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d14:	b490      	push	{r4, r7}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d1a:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d1c:	1d3c      	adds	r4, r7, #4
 8001d1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d24:	f240 2301 	movw	r3, #513	; 0x201
 8001d28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d002      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0x40>
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d003      	beq.n	8001d5a <HAL_RCC_GetSysClockFreq+0x46>
 8001d52:	e02b      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d54:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d56:	623b      	str	r3, [r7, #32]
      break;
 8001d58:	e02b      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	0c9b      	lsrs	r3, r3, #18
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	3328      	adds	r3, #40	; 0x28
 8001d64:	443b      	add	r3, r7
 8001d66:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d6a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d012      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	0c5b      	lsrs	r3, r3, #17
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	3328      	adds	r3, #40	; 0x28
 8001d82:	443b      	add	r3, r7
 8001d84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d8e:	fb03 f202 	mul.w	r2, r3, r2
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9a:	e004      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	4a0b      	ldr	r2, [pc, #44]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	623b      	str	r3, [r7, #32]
      break;
 8001daa:	e002      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dae:	623b      	str	r3, [r7, #32]
      break;
 8001db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001db2:	6a3b      	ldr	r3, [r7, #32]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3728      	adds	r7, #40	; 0x28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc90      	pop	{r4, r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	08001ed0 	.word	0x08001ed0
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	007a1200 	.word	0x007a1200
 8001dcc:	003d0900 	.word	0x003d0900

08001dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd4:	4b02      	ldr	r3, [pc, #8]	; (8001de0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	20000000 	.word	0x20000000

08001de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001de8:	f7ff fff2 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	0a1b      	lsrs	r3, r3, #8
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	4903      	ldr	r1, [pc, #12]	; (8001e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dfa:	5ccb      	ldrb	r3, [r1, r3]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08001ef0 	.word	0x08001ef0

08001e0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <RCC_Delay+0x34>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <RCC_Delay+0x38>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	0a5b      	lsrs	r3, r3, #9
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e28:	bf00      	nop
  }
  while (Delay --);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1e5a      	subs	r2, r3, #1
 8001e2e:	60fa      	str	r2, [r7, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f9      	bne.n	8001e28 <RCC_Delay+0x1c>
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	20000000 	.word	0x20000000
 8001e44:	10624dd3 	.word	0x10624dd3

08001e48 <__libc_init_array>:
 8001e48:	b570      	push	{r4, r5, r6, lr}
 8001e4a:	2600      	movs	r6, #0
 8001e4c:	4d0c      	ldr	r5, [pc, #48]	; (8001e80 <__libc_init_array+0x38>)
 8001e4e:	4c0d      	ldr	r4, [pc, #52]	; (8001e84 <__libc_init_array+0x3c>)
 8001e50:	1b64      	subs	r4, r4, r5
 8001e52:	10a4      	asrs	r4, r4, #2
 8001e54:	42a6      	cmp	r6, r4
 8001e56:	d109      	bne.n	8001e6c <__libc_init_array+0x24>
 8001e58:	f000 f822 	bl	8001ea0 <_init>
 8001e5c:	2600      	movs	r6, #0
 8001e5e:	4d0a      	ldr	r5, [pc, #40]	; (8001e88 <__libc_init_array+0x40>)
 8001e60:	4c0a      	ldr	r4, [pc, #40]	; (8001e8c <__libc_init_array+0x44>)
 8001e62:	1b64      	subs	r4, r4, r5
 8001e64:	10a4      	asrs	r4, r4, #2
 8001e66:	42a6      	cmp	r6, r4
 8001e68:	d105      	bne.n	8001e76 <__libc_init_array+0x2e>
 8001e6a:	bd70      	pop	{r4, r5, r6, pc}
 8001e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e70:	4798      	blx	r3
 8001e72:	3601      	adds	r6, #1
 8001e74:	e7ee      	b.n	8001e54 <__libc_init_array+0xc>
 8001e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e7a:	4798      	blx	r3
 8001e7c:	3601      	adds	r6, #1
 8001e7e:	e7f2      	b.n	8001e66 <__libc_init_array+0x1e>
 8001e80:	08001ef8 	.word	0x08001ef8
 8001e84:	08001ef8 	.word	0x08001ef8
 8001e88:	08001ef8 	.word	0x08001ef8
 8001e8c:	08001efc 	.word	0x08001efc

08001e90 <memset>:
 8001e90:	4603      	mov	r3, r0
 8001e92:	4402      	add	r2, r0
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d100      	bne.n	8001e9a <memset+0xa>
 8001e98:	4770      	bx	lr
 8001e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e9e:	e7f9      	b.n	8001e94 <memset+0x4>

08001ea0 <_init>:
 8001ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea2:	bf00      	nop
 8001ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ea6:	bc08      	pop	{r3}
 8001ea8:	469e      	mov	lr, r3
 8001eaa:	4770      	bx	lr

08001eac <_fini>:
 8001eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eae:	bf00      	nop
 8001eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb2:	bc08      	pop	{r3}
 8001eb4:	469e      	mov	lr, r3
 8001eb6:	4770      	bx	lr
