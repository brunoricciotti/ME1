
mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  080052d0  080052d0  000152d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800570c  0800570c  0001570c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005710  08005710  00015710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  08005714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000104  200001dc  080058f0  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002e0  080058f0  000202e0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008e51  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001a71  00000000  00000000  00029056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000047fb  00000000  00000000  0002aac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000005c8  00000000  00000000  0002f2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a70  00000000  00000000  0002f890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001527c  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000b996  00000000  00000000  0004557c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0006c484  00000000  00000000  00050f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000bd396  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002200  00000000  00000000  000bd3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080052b8 	.word	0x080052b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080052b8 	.word	0x080052b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_InitTick+0x3c>)
{
 8000b2c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2e:	7818      	ldrb	r0, [r3, #0]
 8000b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b34:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b38:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <HAL_InitTick+0x40>)
 8000b3a:	6810      	ldr	r0, [r2, #0]
 8000b3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b40:	f000 f890 	bl	8000c64 <HAL_SYSTICK_Config>
 8000b44:	4604      	mov	r4, r0
 8000b46:	b958      	cbnz	r0, 8000b60 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b48:	2d0f      	cmp	r5, #15
 8000b4a:	d809      	bhi.n	8000b60 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	4629      	mov	r1, r5
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f000 f854 	bl	8000c00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b58:	4620      	mov	r0, r4
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <HAL_InitTick+0x44>)
 8000b5c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b5e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b60:	2001      	movs	r0, #1
 8000b62:	e7fc      	b.n	8000b5e <HAL_InitTick+0x36>
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_Init+0x20>)
{
 8000b72:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b76:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b78:	f043 0310 	orr.w	r3, r3, #16
 8000b7c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7e:	f000 f82d 	bl	8000bdc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff ffd0 	bl	8000b28 <HAL_InitTick>
  HAL_MspInit();
 8000b88:	f001 fb6c 	bl	8002264 <HAL_MspInit>
}
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	bd08      	pop	{r3, pc}
 8000b90:	40022000 	.word	0x40022000

08000b94 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b94:	4a03      	ldr	r2, [pc, #12]	; (8000ba4 <HAL_IncTick+0x10>)
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <HAL_IncTick+0x14>)
 8000b98:	6811      	ldr	r1, [r2, #0]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	440b      	add	r3, r1
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200001f8 	.word	0x200001f8
 8000ba8:	20000000 	.word	0x20000000

08000bac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bac:	4b01      	ldr	r3, [pc, #4]	; (8000bb4 <HAL_GetTick+0x8>)
 8000bae:	6818      	ldr	r0, [r3, #0]
}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	200001f8 	.word	0x200001f8

08000bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb8:	b538      	push	{r3, r4, r5, lr}
 8000bba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bbc:	f7ff fff6 	bl	8000bac <HAL_GetTick>
 8000bc0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	4b04      	ldrne	r3, [pc, #16]	; (8000bd8 <HAL_Delay+0x20>)
 8000bc8:	781b      	ldrbne	r3, [r3, #0]
 8000bca:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bcc:	f7ff ffee 	bl	8000bac <HAL_GetTick>
 8000bd0:	1b43      	subs	r3, r0, r5
 8000bd2:	42a3      	cmp	r3, r4
 8000bd4:	d3fa      	bcc.n	8000bcc <HAL_Delay+0x14>
  {
  }
}
 8000bd6:	bd38      	pop	{r3, r4, r5, pc}
 8000bd8:	20000000 	.word	0x20000000

08000bdc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4907      	ldr	r1, [pc, #28]	; (8000bfc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000bde:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000be2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000bea:	0412      	lsls	r2, r2, #16
 8000bec:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000bf8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c02:	b530      	push	{r4, r5, lr}
 8000c04:	68dc      	ldr	r4, [r3, #12]
 8000c06:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	bf28      	it	cs
 8000c14:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1c:	bf98      	it	ls
 8000c1e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c24:	bf88      	it	hi
 8000c26:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	ea21 0303 	bic.w	r3, r1, r3
 8000c2c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2e:	fa05 f404 	lsl.w	r4, r5, r4
 8000c32:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) < 0)
 8000c36:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	bfac      	ite	ge
 8000c3e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	4a07      	ldrlt	r2, [pc, #28]	; (8000c60 <HAL_NVIC_SetPriority+0x60>)
 8000c44:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	bfb5      	itete	lt
 8000c4c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c56:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c5a:	bd30      	pop	{r4, r5, pc}
 8000c5c:	e000ed00 	.word	0xe000ed00
 8000c60:	e000ed14 	.word	0xe000ed14

08000c64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	3801      	subs	r0, #1
 8000c66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c6a:	d20b      	bcs.n	8000c84 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	21f0      	movs	r1, #240	; 0xf0
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c74:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c80:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c82:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c84:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000c90:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000c92:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c94:	4f64      	ldr	r7, [pc, #400]	; (8000e28 <HAL_GPIO_Init+0x19c>)
 8000c96:	4b65      	ldr	r3, [pc, #404]	; (8000e2c <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8000c98:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000e30 <HAL_GPIO_Init+0x1a4>
 8000c9c:	f8df e194 	ldr.w	lr, [pc, #404]	; 8000e34 <HAL_GPIO_Init+0x1a8>
    ioposition = (0x01U << position);
 8000ca0:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca4:	680d      	ldr	r5, [r1, #0]
    ioposition = (0x01U << position);
 8000ca6:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000caa:	ea08 0405 	and.w	r4, r8, r5
    if (iocurrent == ioposition)
 8000cae:	ea38 0505 	bics.w	r5, r8, r5
 8000cb2:	d17b      	bne.n	8000dac <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 8000cb4:	684d      	ldr	r5, [r1, #4]
 8000cb6:	2d03      	cmp	r5, #3
 8000cb8:	d807      	bhi.n	8000cca <HAL_GPIO_Init+0x3e>
 8000cba:	3d01      	subs	r5, #1
 8000cbc:	2d02      	cmp	r5, #2
 8000cbe:	f200 808e 	bhi.w	8000dde <HAL_GPIO_Init+0x152>
 8000cc2:	e8df f005 	tbb	[pc, r5]
 8000cc6:	a19c      	.short	0xa19c
 8000cc8:	a7          	.byte	0xa7
 8000cc9:	00          	.byte	0x00
 8000cca:	2d12      	cmp	r5, #18
 8000ccc:	f000 809f 	beq.w	8000e0e <HAL_GPIO_Init+0x182>
 8000cd0:	d873      	bhi.n	8000dba <HAL_GPIO_Init+0x12e>
 8000cd2:	2d11      	cmp	r5, #17
 8000cd4:	f000 8095 	beq.w	8000e02 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cd8:	2cff      	cmp	r4, #255	; 0xff
 8000cda:	bf98      	it	ls
 8000cdc:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cde:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ce2:	bf88      	it	hi
 8000ce4:	f100 0a04 	addhi.w	sl, r0, #4
 8000ce8:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cec:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000cf0:	bf88      	it	hi
 8000cf2:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cf4:	fa09 fb05 	lsl.w	fp, r9, r5
 8000cf8:	ea28 080b 	bic.w	r8, r8, fp
 8000cfc:	fa02 f505 	lsl.w	r5, r2, r5
 8000d00:	ea48 0505 	orr.w	r5, r8, r5
 8000d04:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d08:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000d0c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000d10:	d04c      	beq.n	8000dac <HAL_GPIO_Init+0x120>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d12:	69bd      	ldr	r5, [r7, #24]
 8000d14:	f026 0803 	bic.w	r8, r6, #3
 8000d18:	f045 0501 	orr.w	r5, r5, #1
 8000d1c:	61bd      	str	r5, [r7, #24]
 8000d1e:	69bd      	ldr	r5, [r7, #24]
 8000d20:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000d24:	f005 0501 	and.w	r5, r5, #1
 8000d28:	9501      	str	r5, [sp, #4]
 8000d2a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d2e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d32:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d34:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000d38:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d3c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000d40:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d44:	4d3c      	ldr	r5, [pc, #240]	; (8000e38 <HAL_GPIO_Init+0x1ac>)
 8000d46:	42a8      	cmp	r0, r5
 8000d48:	d068      	beq.n	8000e1c <HAL_GPIO_Init+0x190>
 8000d4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d4e:	42a8      	cmp	r0, r5
 8000d50:	d066      	beq.n	8000e20 <HAL_GPIO_Init+0x194>
 8000d52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d56:	42a8      	cmp	r0, r5
 8000d58:	d064      	beq.n	8000e24 <HAL_GPIO_Init+0x198>
 8000d5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d5e:	42a8      	cmp	r0, r5
 8000d60:	bf0c      	ite	eq
 8000d62:	2503      	moveq	r5, #3
 8000d64:	2504      	movne	r5, #4
 8000d66:	fa05 f50b 	lsl.w	r5, r5, fp
 8000d6a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000d6e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d72:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d74:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000d78:	bf14      	ite	ne
 8000d7a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d7c:	43a5      	biceq	r5, r4
 8000d7e:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d80:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d82:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000d86:	bf14      	ite	ne
 8000d88:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d8a:	43a5      	biceq	r5, r4
 8000d8c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d8e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d90:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d94:	bf14      	ite	ne
 8000d96:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d98:	43a5      	biceq	r5, r4
 8000d9a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d9c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d9e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da2:	bf14      	ite	ne
 8000da4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000da6:	ea25 0404 	biceq.w	r4, r5, r4
 8000daa:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000dac:	3601      	adds	r6, #1
 8000dae:	2e10      	cmp	r6, #16
 8000db0:	f47f af76 	bne.w	8000ca0 <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 8000db4:	b003      	add	sp, #12
 8000db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000dba:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8000e3c <HAL_GPIO_Init+0x1b0>
 8000dbe:	454d      	cmp	r5, r9
 8000dc0:	d00d      	beq.n	8000dde <HAL_GPIO_Init+0x152>
 8000dc2:	d818      	bhi.n	8000df6 <HAL_GPIO_Init+0x16a>
 8000dc4:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000dc8:	454d      	cmp	r5, r9
 8000dca:	d008      	beq.n	8000dde <HAL_GPIO_Init+0x152>
 8000dcc:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8000dd0:	454d      	cmp	r5, r9
 8000dd2:	d004      	beq.n	8000dde <HAL_GPIO_Init+0x152>
 8000dd4:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000dd8:	454d      	cmp	r5, r9
 8000dda:	f47f af7d 	bne.w	8000cd8 <HAL_GPIO_Init+0x4c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dde:	688a      	ldr	r2, [r1, #8]
 8000de0:	b1d2      	cbz	r2, 8000e18 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000de2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000de4:	bf08      	it	eq
 8000de6:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dea:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000dee:	bf18      	it	ne
 8000df0:	f8c0 8014 	strne.w	r8, [r0, #20]
 8000df4:	e770      	b.n	8000cd8 <HAL_GPIO_Init+0x4c>
      switch (GPIO_Init->Mode)
 8000df6:	4565      	cmp	r5, ip
 8000df8:	d0f1      	beq.n	8000dde <HAL_GPIO_Init+0x152>
 8000dfa:	4575      	cmp	r5, lr
 8000dfc:	e7ed      	b.n	8000dda <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dfe:	68ca      	ldr	r2, [r1, #12]
          break;
 8000e00:	e76a      	b.n	8000cd8 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e02:	68ca      	ldr	r2, [r1, #12]
 8000e04:	3204      	adds	r2, #4
          break;
 8000e06:	e767      	b.n	8000cd8 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e08:	68ca      	ldr	r2, [r1, #12]
 8000e0a:	3208      	adds	r2, #8
          break;
 8000e0c:	e764      	b.n	8000cd8 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e0e:	68ca      	ldr	r2, [r1, #12]
 8000e10:	320c      	adds	r2, #12
          break;
 8000e12:	e761      	b.n	8000cd8 <HAL_GPIO_Init+0x4c>
      switch (GPIO_Init->Mode)
 8000e14:	2200      	movs	r2, #0
 8000e16:	e75f      	b.n	8000cd8 <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e18:	2204      	movs	r2, #4
 8000e1a:	e75d      	b.n	8000cd8 <HAL_GPIO_Init+0x4c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1c:	2500      	movs	r5, #0
 8000e1e:	e7a2      	b.n	8000d66 <HAL_GPIO_Init+0xda>
 8000e20:	2501      	movs	r5, #1
 8000e22:	e7a0      	b.n	8000d66 <HAL_GPIO_Init+0xda>
 8000e24:	2502      	movs	r5, #2
 8000e26:	e79e      	b.n	8000d66 <HAL_GPIO_Init+0xda>
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010400 	.word	0x40010400
 8000e30:	10310000 	.word	0x10310000
 8000e34:	10320000 	.word	0x10320000
 8000e38:	40010800 	.word	0x40010800
 8000e3c:	10220000 	.word	0x10220000

08000e40 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e40:	6801      	ldr	r1, [r0, #0]
{
 8000e42:	4602      	mov	r2, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e44:	6948      	ldr	r0, [r1, #20]
 8000e46:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8000e4a:	d00c      	beq.n	8000e66 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e4c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000e50:	614b      	str	r3, [r1, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000e52:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000e54:	2120      	movs	r1, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000e56:	6413      	str	r3, [r2, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e58:	2300      	movs	r3, #0

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
 8000e5a:	2001      	movs	r0, #1
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8000e5e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000e62:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  }
  return HAL_OK;
}
 8000e66:	4770      	bx	lr

08000e68 <I2C_WaitOnFlagUntilTimeout>:
{
 8000e68:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	460f      	mov	r7, r1
 8000e70:	4691      	mov	r9, r2
 8000e72:	461d      	mov	r5, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000e74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8000e78:	6833      	ldr	r3, [r6, #0]
 8000e7a:	f1ba 0f01 	cmp.w	sl, #1
 8000e7e:	bf0c      	ite	eq
 8000e80:	695c      	ldreq	r4, [r3, #20]
 8000e82:	699c      	ldrne	r4, [r3, #24]
 8000e84:	ea27 0404 	bic.w	r4, r7, r4
 8000e88:	b2a4      	uxth	r4, r4
 8000e8a:	fab4 f484 	clz	r4, r4
 8000e8e:	0964      	lsrs	r4, r4, #5
 8000e90:	45a1      	cmp	r9, r4
 8000e92:	d001      	beq.n	8000e98 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8000e94:	2000      	movs	r0, #0
 8000e96:	e00c      	b.n	8000eb2 <I2C_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8000e98:	1c6a      	adds	r2, r5, #1
 8000e9a:	d0ee      	beq.n	8000e7a <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000e9c:	b95d      	cbnz	r5, 8000eb6 <I2C_WaitOnFlagUntilTimeout+0x4e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000e9e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000ea0:	2220      	movs	r2, #32
        return HAL_TIMEOUT;
 8000ea2:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000ea4:	6333      	str	r3, [r6, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000ea6:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000eaa:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eae:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
}
 8000eb2:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000eb6:	f7ff fe79 	bl	8000bac <HAL_GetTick>
 8000eba:	9b08      	ldr	r3, [sp, #32]
 8000ebc:	1ac0      	subs	r0, r0, r3
 8000ebe:	42a8      	cmp	r0, r5
 8000ec0:	d9da      	bls.n	8000e78 <I2C_WaitOnFlagUntilTimeout+0x10>
 8000ec2:	e7ec      	b.n	8000e9e <I2C_WaitOnFlagUntilTimeout+0x36>

08000ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ec8:	4604      	mov	r4, r0
 8000eca:	460f      	mov	r7, r1
 8000ecc:	4616      	mov	r6, r2
 8000ece:	4698      	mov	r8, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000ed0:	6825      	ldr	r5, [r4, #0]
 8000ed2:	6968      	ldr	r0, [r5, #20]
 8000ed4:	ea27 0000 	bic.w	r0, r7, r0
 8000ed8:	b280      	uxth	r0, r0
 8000eda:	b198      	cbz	r0, 8000f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000edc:	696b      	ldr	r3, [r5, #20]
 8000ede:	055a      	lsls	r2, r3, #21
 8000ee0:	d512      	bpl.n	8000f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x44>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000ee2:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8000ee4:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eea:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000eec:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000ef0:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000ef6:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000ef8:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8000efa:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8000efc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8000f00:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 8000f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000f08:	1c73      	adds	r3, r6, #1
 8000f0a:	d0e2      	beq.n	8000ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f0c:	b946      	cbnz	r6, 8000f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5c>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f0e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000f10:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f12:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8000f14:	2003      	movs	r0, #3
        hi2c->State= HAL_I2C_STATE_READY;
 8000f16:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000f1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000f1e:	e7f1      	b.n	8000f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f20:	f7ff fe44 	bl	8000bac <HAL_GetTick>
 8000f24:	eba0 0008 	sub.w	r0, r0, r8
 8000f28:	42b0      	cmp	r0, r6
 8000f2a:	d9d1      	bls.n	8000ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
 8000f2c:	e7ef      	b.n	8000f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>

08000f2e <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8000f2e:	b570      	push	{r4, r5, r6, lr}
 8000f30:	4604      	mov	r4, r0
 8000f32:	460d      	mov	r5, r1
 8000f34:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000f36:	6821      	ldr	r1, [r4, #0]
 8000f38:	694b      	ldr	r3, [r1, #20]
 8000f3a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000f3e:	d001      	beq.n	8000f44 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000f40:	2000      	movs	r0, #0
 8000f42:	e00d      	b.n	8000f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000f44:	694a      	ldr	r2, [r1, #20]
 8000f46:	06d2      	lsls	r2, r2, #27
 8000f48:	d50b      	bpl.n	8000f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f4a:	f06f 0210 	mvn.w	r2, #16
 8000f4e:	614a      	str	r2, [r1, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8000f50:	2220      	movs	r2, #32
      return HAL_ERROR;
 8000f52:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f54:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000f56:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8000f5a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8000f5c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 8000f60:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f62:	b95d      	cbnz	r5, 8000f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f64:	6c23      	ldr	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 8000f66:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000f6e:	2320      	movs	r3, #32
 8000f70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8000f74:	2300      	movs	r3, #0
 8000f76:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_TIMEOUT;
 8000f7a:	e7f1      	b.n	8000f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f7c:	f7ff fe16 	bl	8000bac <HAL_GetTick>
 8000f80:	1b80      	subs	r0, r0, r6
 8000f82:	42a8      	cmp	r0, r5
 8000f84:	d9d7      	bls.n	8000f36 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8000f86:	e7ed      	b.n	8000f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08000f88 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8000f88:	b570      	push	{r4, r5, r6, lr}
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	460d      	mov	r5, r1
 8000f8e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000f90:	6823      	ldr	r3, [r4, #0]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	075b      	lsls	r3, r3, #29
 8000f96:	d501      	bpl.n	8000f9c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000f98:	2000      	movs	r0, #0
 8000f9a:	e012      	b.n	8000fc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3a>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f7ff ff4f 	bl	8000e40 <I2C_IsAcknowledgeFailed>
 8000fa2:	b9a8      	cbnz	r0, 8000fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000fa4:	1c6a      	adds	r2, r5, #1
 8000fa6:	d0f3      	beq.n	8000f90 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000fa8:	b965      	cbnz	r5, 8000fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000fac:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000fae:	f043 0320 	orr.w	r3, r3, #32
 8000fb2:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000fb4:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000fb6:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000fb8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000fba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000fbe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000fc4:	f7ff fdf2 	bl	8000bac <HAL_GetTick>
 8000fc8:	1b80      	subs	r0, r0, r6
 8000fca:	42a8      	cmp	r0, r5
 8000fcc:	d9e0      	bls.n	8000f90 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8000fce:	e7ec      	b.n	8000faa <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	e7f6      	b.n	8000fc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3a>

08000fd4 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8000fd4:	b570      	push	{r4, r5, r6, lr}
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	460d      	mov	r5, r1
 8000fda:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	061b      	lsls	r3, r3, #24
 8000fe2:	d501      	bpl.n	8000fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	e012      	b.n	800100e <I2C_WaitOnTXEFlagUntilTimeout+0x3a>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f7ff ff29 	bl	8000e40 <I2C_IsAcknowledgeFailed>
 8000fee:	b9a8      	cbnz	r0, 800101c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000ff0:	1c6a      	adds	r2, r5, #1
 8000ff2:	d0f3      	beq.n	8000fdc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ff4:	b965      	cbnz	r5, 8001010 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ff6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000ff8:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ffa:	f043 0320 	orr.w	r3, r3, #32
 8000ffe:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001000:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001002:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001004:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001006:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800100a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 800100e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001010:	f7ff fdcc 	bl	8000bac <HAL_GetTick>
 8001014:	1b80      	subs	r0, r0, r6
 8001016:	42a8      	cmp	r0, r5
 8001018:	d9e0      	bls.n	8000fdc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 800101a:	e7ec      	b.n	8000ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800101c:	2001      	movs	r0, #1
 800101e:	e7f6      	b.n	800100e <I2C_WaitOnTXEFlagUntilTimeout+0x3a>

08001020 <I2C_RequestMemoryWrite>:
{
 8001020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001024:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001026:	6802      	ldr	r2, [r0, #0]
{
 8001028:	4699      	mov	r9, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800102a:	6813      	ldr	r3, [r2, #0]
{
 800102c:	b085      	sub	sp, #20
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800102e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001032:	6013      	str	r3, [r2, #0]
{
 8001034:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8001038:	460e      	mov	r6, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001042:	f8cd 8000 	str.w	r8, [sp]
{
 8001046:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001048:	f7ff ff0e 	bl	8000e68 <I2C_WaitOnFlagUntilTimeout>
 800104c:	b118      	cbz	r0, 8001056 <I2C_RequestMemoryWrite+0x36>
    return HAL_TIMEOUT;
 800104e:	2003      	movs	r0, #3
}
 8001050:	b005      	add	sp, #20
 8001052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001056:	6823      	ldr	r3, [r4, #0]
 8001058:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800105c:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800105e:	463a      	mov	r2, r7
 8001060:	4643      	mov	r3, r8
 8001062:	4620      	mov	r0, r4
 8001064:	4918      	ldr	r1, [pc, #96]	; (80010c8 <I2C_RequestMemoryWrite+0xa8>)
 8001066:	f7ff ff2d 	bl	8000ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800106a:	b120      	cbz	r0, 8001076 <I2C_RequestMemoryWrite+0x56>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800106c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800106e:	2b04      	cmp	r3, #4
 8001070:	d1ed      	bne.n	800104e <I2C_RequestMemoryWrite+0x2e>
      return HAL_ERROR;
 8001072:	2001      	movs	r0, #1
 8001074:	e7ec      	b.n	8001050 <I2C_RequestMemoryWrite+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001076:	6823      	ldr	r3, [r4, #0]
 8001078:	9003      	str	r0, [sp, #12]
 800107a:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800107c:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800107e:	9203      	str	r2, [sp, #12]
 8001080:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001082:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001084:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001086:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001088:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800108a:	f7ff ffa3 	bl	8000fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 800108e:	b140      	cbz	r0, 80010a2 <I2C_RequestMemoryWrite+0x82>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001090:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001092:	2b04      	cmp	r3, #4
 8001094:	d1db      	bne.n	800104e <I2C_RequestMemoryWrite+0x2e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001096:	6822      	ldr	r2, [r4, #0]
 8001098:	6813      	ldr	r3, [r2, #0]
 800109a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109e:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80010a0:	e7e7      	b.n	8001072 <I2C_RequestMemoryWrite+0x52>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80010a2:	f1b9 0f01 	cmp.w	r9, #1
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80010a6:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80010a8:	d102      	bne.n	80010b0 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80010aa:	b2ed      	uxtb	r5, r5
 80010ac:	611d      	str	r5, [r3, #16]
 80010ae:	e7cf      	b.n	8001050 <I2C_RequestMemoryWrite+0x30>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80010b0:	0a2a      	lsrs	r2, r5, #8
 80010b2:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010b4:	4639      	mov	r1, r7
 80010b6:	4642      	mov	r2, r8
 80010b8:	4620      	mov	r0, r4
 80010ba:	f7ff ff8b 	bl	8000fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 80010be:	2800      	cmp	r0, #0
 80010c0:	d1e6      	bne.n	8001090 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	e7f1      	b.n	80010aa <I2C_RequestMemoryWrite+0x8a>
 80010c6:	bf00      	nop
 80010c8:	00010002 	.word	0x00010002

080010cc <I2C_RequestMemoryRead>:
{
 80010cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80010d0:	469a      	mov	sl, r3
 80010d2:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80010d6:	6803      	ldr	r3, [r0, #0]
{
 80010d8:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80010da:	681a      	ldr	r2, [r3, #0]
{
 80010dc:	460e      	mov	r6, r1
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80010de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80010e4:	681a      	ldr	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80010ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010ee:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	2200      	movs	r2, #0
 80010f4:	f8cd 8000 	str.w	r8, [sp]
{
 80010f8:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010fa:	f7ff feb5 	bl	8000e68 <I2C_WaitOnFlagUntilTimeout>
 80010fe:	b118      	cbz	r0, 8001108 <I2C_RequestMemoryRead+0x3c>
    return HAL_TIMEOUT;
 8001100:	2003      	movs	r0, #3
}
 8001102:	b004      	add	sp, #16
 8001104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	fa5f f986 	uxtb.w	r9, r6
 800110e:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8001112:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001114:	463a      	mov	r2, r7
 8001116:	4643      	mov	r3, r8
 8001118:	4620      	mov	r0, r4
 800111a:	492a      	ldr	r1, [pc, #168]	; (80011c4 <I2C_RequestMemoryRead+0xf8>)
 800111c:	f7ff fed2 	bl	8000ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001120:	b120      	cbz	r0, 800112c <I2C_RequestMemoryRead+0x60>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001124:	2b04      	cmp	r3, #4
 8001126:	d1eb      	bne.n	8001100 <I2C_RequestMemoryRead+0x34>
      return HAL_ERROR;
 8001128:	2001      	movs	r0, #1
 800112a:	e7ea      	b.n	8001102 <I2C_RequestMemoryRead+0x36>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	9003      	str	r0, [sp, #12]
 8001130:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001132:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001134:	9203      	str	r2, [sp, #12]
 8001136:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001138:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800113a:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800113c:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800113e:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001140:	f7ff ff48 	bl	8000fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001144:	b140      	cbz	r0, 8001158 <I2C_RequestMemoryRead+0x8c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001148:	2b04      	cmp	r3, #4
 800114a:	d1d9      	bne.n	8001100 <I2C_RequestMemoryRead+0x34>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800114c:	6822      	ldr	r2, [r4, #0]
 800114e:	6813      	ldr	r3, [r2, #0]
 8001150:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e7e7      	b.n	8001128 <I2C_RequestMemoryRead+0x5c>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001158:	f1ba 0f01 	cmp.w	sl, #1
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800115c:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800115e:	d125      	bne.n	80011ac <I2C_RequestMemoryRead+0xe0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001160:	b2ed      	uxtb	r5, r5
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001162:	4642      	mov	r2, r8
 8001164:	4639      	mov	r1, r7
 8001166:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001168:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800116a:	f7ff ff33 	bl	8000fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 800116e:	4602      	mov	r2, r0
 8001170:	2800      	cmp	r0, #0
 8001172:	d1e8      	bne.n	8001146 <I2C_RequestMemoryRead+0x7a>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001174:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001176:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001178:	680b      	ldr	r3, [r1, #0]
 800117a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117e:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001186:	f8cd 8000 	str.w	r8, [sp]
 800118a:	f7ff fe6d 	bl	8000e68 <I2C_WaitOnFlagUntilTimeout>
 800118e:	2800      	cmp	r0, #0
 8001190:	d1b6      	bne.n	8001100 <I2C_RequestMemoryRead+0x34>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001192:	6822      	ldr	r2, [r4, #0]
 8001194:	f049 0301 	orr.w	r3, r9, #1
 8001198:	6113      	str	r3, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800119a:	4620      	mov	r0, r4
 800119c:	4643      	mov	r3, r8
 800119e:	463a      	mov	r2, r7
 80011a0:	4908      	ldr	r1, [pc, #32]	; (80011c4 <I2C_RequestMemoryRead+0xf8>)
 80011a2:	f7ff fe8f 	bl	8000ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011a6:	2800      	cmp	r0, #0
 80011a8:	d0ab      	beq.n	8001102 <I2C_RequestMemoryRead+0x36>
 80011aa:	e7ba      	b.n	8001122 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80011ac:	0a2a      	lsrs	r2, r5, #8
 80011ae:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011b0:	4639      	mov	r1, r7
 80011b2:	4642      	mov	r2, r8
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7ff ff0d 	bl	8000fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d1c3      	bne.n	8001146 <I2C_RequestMemoryRead+0x7a>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	e7ce      	b.n	8001160 <I2C_RequestMemoryRead+0x94>
 80011c2:	bf00      	nop
 80011c4:	00010002 	.word	0x00010002

080011c8 <HAL_I2C_Init>:
{
 80011c8:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 80011ca:	4604      	mov	r4, r0
 80011cc:	b908      	cbnz	r0, 80011d2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80011ce:	2001      	movs	r0, #1
}
 80011d0:	bd70      	pop	{r4, r5, r6, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80011d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80011d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011da:	b91b      	cbnz	r3, 80011e4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80011dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80011e0:	f001 f862 	bl	80022a8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80011e4:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80011e6:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80011e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80011ec:	6813      	ldr	r3, [r2, #0]
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011f4:	f000 fd70 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011f8:	4a31      	ldr	r2, [pc, #196]	; (80012c0 <HAL_I2C_Init+0xf8>)
 80011fa:	6863      	ldr	r3, [r4, #4]
 80011fc:	4293      	cmp	r3, r2
 80011fe:	bf94      	ite	ls
 8001200:	4a30      	ldrls	r2, [pc, #192]	; (80012c4 <HAL_I2C_Init+0xfc>)
 8001202:	4a31      	ldrhi	r2, [pc, #196]	; (80012c8 <HAL_I2C_Init+0x100>)
 8001204:	4290      	cmp	r0, r2
 8001206:	bf8c      	ite	hi
 8001208:	2200      	movhi	r2, #0
 800120a:	2201      	movls	r2, #1
 800120c:	2a00      	cmp	r2, #0
 800120e:	d1de      	bne.n	80011ce <HAL_I2C_Init+0x6>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001210:	4d2b      	ldr	r5, [pc, #172]	; (80012c0 <HAL_I2C_Init+0xf8>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001212:	4a2e      	ldr	r2, [pc, #184]	; (80012cc <HAL_I2C_Init+0x104>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001214:	42ab      	cmp	r3, r5
  freqrange = I2C_FREQRANGE(pclk1);
 8001216:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800121a:	bf88      	it	hi
 800121c:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  hi2c->Instance->CR2 = freqrange;
 8001220:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001222:	f100 30ff 	add.w	r0, r0, #4294967295
  hi2c->Instance->CR2 = freqrange;
 8001226:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001228:	bf82      	ittt	hi
 800122a:	4372      	mulhi	r2, r6
 800122c:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8001230:	fbb2 f2f6 	udivhi	r2, r2, r6
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001234:	42ab      	cmp	r3, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001236:	f102 0201 	add.w	r2, r2, #1
 800123a:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800123c:	d823      	bhi.n	8001286 <HAL_I2C_Init+0xbe>
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fbb0 f0f3 	udiv	r0, r0, r3
 8001244:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001248:	1c43      	adds	r3, r0, #1
 800124a:	4213      	tst	r3, r2
 800124c:	d033      	beq.n	80012b6 <HAL_I2C_Init+0xee>
 800124e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001252:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001254:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001258:	4313      	orrs	r3, r2
 800125a:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800125c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001264:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001268:	4313      	orrs	r3, r2
 800126a:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800126c:	680b      	ldr	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800126e:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001276:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001278:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800127a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800127e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001280:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001284:	e7a4      	b.n	80011d0 <HAL_I2C_Init+0x8>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001286:	68a2      	ldr	r2, [r4, #8]
 8001288:	b952      	cbnz	r2, 80012a0 <HAL_I2C_Init+0xd8>
 800128a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800128e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001292:	3301      	adds	r3, #1
 8001294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001298:	b17b      	cbz	r3, 80012ba <HAL_I2C_Init+0xf2>
 800129a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129e:	e7d8      	b.n	8001252 <HAL_I2C_Init+0x8a>
 80012a0:	2219      	movs	r2, #25
 80012a2:	4353      	muls	r3, r2
 80012a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012a8:	3301      	adds	r3, #1
 80012aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ae:	b123      	cbz	r3, 80012ba <HAL_I2C_Init+0xf2>
 80012b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012b4:	e7cd      	b.n	8001252 <HAL_I2C_Init+0x8a>
 80012b6:	2304      	movs	r3, #4
 80012b8:	e7cb      	b.n	8001252 <HAL_I2C_Init+0x8a>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e7c9      	b.n	8001252 <HAL_I2C_Init+0x8a>
 80012be:	bf00      	nop
 80012c0:	000186a0 	.word	0x000186a0
 80012c4:	001e847f 	.word	0x001e847f
 80012c8:	003d08ff 	.word	0x003d08ff
 80012cc:	000f4240 	.word	0x000f4240

080012d0 <HAL_I2C_Master_Transmit>:
{
 80012d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012d4:	4604      	mov	r4, r0
 80012d6:	b085      	sub	sp, #20
 80012d8:	4698      	mov	r8, r3
 80012da:	460d      	mov	r5, r1
 80012dc:	4691      	mov	r9, r2
 80012de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 80012e0:	f7ff fc64 	bl	8000bac <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80012e4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80012e8:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80012ea:	2b20      	cmp	r3, #32
 80012ec:	d004      	beq.n	80012f8 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 80012ee:	2502      	movs	r5, #2
}
 80012f0:	4628      	mov	r0, r5
 80012f2:	b005      	add	sp, #20
 80012f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012f8:	9000      	str	r0, [sp, #0]
 80012fa:	2319      	movs	r3, #25
 80012fc:	2201      	movs	r2, #1
 80012fe:	4620      	mov	r0, r4
 8001300:	495d      	ldr	r1, [pc, #372]	; (8001478 <HAL_I2C_Master_Transmit+0x1a8>)
 8001302:	f7ff fdb1 	bl	8000e68 <I2C_WaitOnFlagUntilTimeout>
 8001306:	2800      	cmp	r0, #0
 8001308:	d1f1      	bne.n	80012ee <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 800130a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800130e:	2b01      	cmp	r3, #1
 8001310:	d0ed      	beq.n	80012ee <HAL_I2C_Master_Transmit+0x1e>
 8001312:	2301      	movs	r3, #1
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001314:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8001316:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800131a:	680b      	ldr	r3, [r1, #0]
 800131c:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800131e:	bf5e      	ittt	pl
 8001320:	680b      	ldrpl	r3, [r1, #0]
 8001322:	f043 0301 	orrpl.w	r3, r3, #1
 8001326:	600b      	strpl	r3, [r1, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001328:	680b      	ldr	r3, [r1, #0]
 800132a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800132e:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001330:	2321      	movs	r3, #33	; 0x21
 8001332:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001336:	2310      	movs	r3, #16
 8001338:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800133c:	2300      	movs	r3, #0
 800133e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001340:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001344:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001348:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800134a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800134c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001350:	8523      	strh	r3, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001352:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001354:	2b04      	cmp	r3, #4
 8001356:	d004      	beq.n	8001362 <HAL_I2C_Master_Transmit+0x92>
 8001358:	2b01      	cmp	r3, #1
 800135a:	d002      	beq.n	8001362 <HAL_I2C_Master_Transmit+0x92>
 800135c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001360:	d104      	bne.n	800136c <HAL_I2C_Master_Transmit+0x9c>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001362:	680b      	ldr	r3, [r1, #0]
 8001364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001368:	600b      	str	r3, [r1, #0]
 800136a:	e002      	b.n	8001372 <HAL_I2C_Master_Transmit+0xa2>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800136c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800136e:	2b12      	cmp	r3, #18
 8001370:	d0f7      	beq.n	8001362 <HAL_I2C_Master_Transmit+0x92>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800137a:	4620      	mov	r0, r4
 800137c:	9600      	str	r6, [sp, #0]
 800137e:	f7ff fd73 	bl	8000e68 <I2C_WaitOnFlagUntilTimeout>
 8001382:	2800      	cmp	r0, #0
 8001384:	d133      	bne.n	80013ee <HAL_I2C_Master_Transmit+0x11e>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001386:	6923      	ldr	r3, [r4, #16]
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001388:	6822      	ldr	r2, [r4, #0]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800138a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800138e:	d120      	bne.n	80013d2 <HAL_I2C_Master_Transmit+0x102>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001390:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001394:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001396:	4633      	mov	r3, r6
 8001398:	463a      	mov	r2, r7
 800139a:	4620      	mov	r0, r4
 800139c:	4937      	ldr	r1, [pc, #220]	; (800147c <HAL_I2C_Master_Transmit+0x1ac>)
 800139e:	f7ff fd91 	bl	8000ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013a2:	4605      	mov	r5, r0
 80013a4:	bb10      	cbnz	r0, 80013ec <HAL_I2C_Master_Transmit+0x11c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	9003      	str	r0, [sp, #12]
 80013aa:	695a      	ldr	r2, [r3, #20]
 80013ac:	9203      	str	r2, [sp, #12]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	9303      	str	r3, [sp, #12]
 80013b2:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 80013b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80013b6:	bb3b      	cbnz	r3, 8001408 <HAL_I2C_Master_Transmit+0x138>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013b8:	6821      	ldr	r1, [r4, #0]
 80013ba:	680a      	ldr	r2, [r1, #0]
 80013bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013c0:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80013c2:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80013c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80013c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80013d0:	e78e      	b.n	80012f0 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80013d2:	11eb      	asrs	r3, r5, #7
 80013d4:	f003 0306 	and.w	r3, r3, #6
 80013d8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80013dc:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80013de:	4620      	mov	r0, r4
 80013e0:	4633      	mov	r3, r6
 80013e2:	463a      	mov	r2, r7
 80013e4:	4926      	ldr	r1, [pc, #152]	; (8001480 <HAL_I2C_Master_Transmit+0x1b0>)
 80013e6:	f7ff fd6d 	bl	8000ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013ea:	b148      	cbz	r0, 8001400 <HAL_I2C_Master_Transmit+0x130>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	f04f 0300 	mov.w	r3, #0
        __HAL_UNLOCK(hi2c);
 80013f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013fa:	d10e      	bne.n	800141a <HAL_I2C_Master_Transmit+0x14a>
          return HAL_ERROR;
 80013fc:	2501      	movs	r5, #1
 80013fe:	e777      	b.n	80012f0 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	b2ed      	uxtb	r5, r5
 8001404:	611d      	str	r5, [r3, #16]
 8001406:	e7c6      	b.n	8001396 <HAL_I2C_Master_Transmit+0xc6>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001408:	4632      	mov	r2, r6
 800140a:	4639      	mov	r1, r7
 800140c:	4620      	mov	r0, r4
 800140e:	f7ff fde1 	bl	8000fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001412:	b120      	cbz	r0, 800141e <HAL_I2C_Master_Transmit+0x14e>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001414:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001416:	2b04      	cmp	r3, #4
 8001418:	d027      	beq.n	800146a <HAL_I2C_Master_Transmit+0x19a>
          return HAL_TIMEOUT;
 800141a:	2503      	movs	r5, #3
 800141c:	e768      	b.n	80012f0 <HAL_I2C_Master_Transmit+0x20>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800141e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001420:	6820      	ldr	r0, [r4, #0]
 8001422:	1c4b      	adds	r3, r1, #1
 8001424:	6263      	str	r3, [r4, #36]	; 0x24
 8001426:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001428:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800142a:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 800142c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800142e:	3b01      	subs	r3, #1
 8001430:	b29b      	uxth	r3, r3
 8001432:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001434:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 8001438:	1e53      	subs	r3, r2, #1
 800143a:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800143c:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8001440:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001442:	d00a      	beq.n	800145a <HAL_I2C_Master_Transmit+0x18a>
 8001444:	b14b      	cbz	r3, 800145a <HAL_I2C_Master_Transmit+0x18a>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001446:	1c8b      	adds	r3, r1, #2
 8001448:	6263      	str	r3, [r4, #36]	; 0x24
 800144a:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 800144c:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800144e:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8001450:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001452:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001454:	3b01      	subs	r3, #1
 8001456:	b29b      	uxth	r3, r3
 8001458:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800145a:	4632      	mov	r2, r6
 800145c:	4639      	mov	r1, r7
 800145e:	4620      	mov	r0, r4
 8001460:	f7ff fd92 	bl	8000f88 <I2C_WaitOnBTFFlagUntilTimeout>
 8001464:	2800      	cmp	r0, #0
 8001466:	d0a5      	beq.n	80013b4 <HAL_I2C_Master_Transmit+0xe4>
 8001468:	e7d4      	b.n	8001414 <HAL_I2C_Master_Transmit+0x144>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800146a:	6822      	ldr	r2, [r4, #0]
 800146c:	6813      	ldr	r3, [r2, #0]
 800146e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e7c2      	b.n	80013fc <HAL_I2C_Master_Transmit+0x12c>
 8001476:	bf00      	nop
 8001478:	00100002 	.word	0x00100002
 800147c:	00010002 	.word	0x00010002
 8001480:	00010008 	.word	0x00010008

08001484 <HAL_I2C_Mem_Write>:
{
 8001484:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001488:	4604      	mov	r4, r0
 800148a:	469a      	mov	sl, r3
 800148c:	4688      	mov	r8, r1
 800148e:	4691      	mov	r9, r2
 8001490:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001492:	f7ff fb8b 	bl	8000bac <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001496:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800149a:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800149c:	2b20      	cmp	r3, #32
 800149e:	d003      	beq.n	80014a8 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80014a0:	2002      	movs	r0, #2
}
 80014a2:	b002      	add	sp, #8
 80014a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014a8:	9000      	str	r0, [sp, #0]
 80014aa:	2319      	movs	r3, #25
 80014ac:	2201      	movs	r2, #1
 80014ae:	4620      	mov	r0, r4
 80014b0:	493d      	ldr	r1, [pc, #244]	; (80015a8 <HAL_I2C_Mem_Write+0x124>)
 80014b2:	f7ff fcd9 	bl	8000e68 <I2C_WaitOnFlagUntilTimeout>
 80014b6:	2800      	cmp	r0, #0
 80014b8:	d1f2      	bne.n	80014a0 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80014ba:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d0ee      	beq.n	80014a0 <HAL_I2C_Mem_Write+0x1c>
 80014c2:	2301      	movs	r3, #1
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014c4:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80014c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014ca:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014cc:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014ce:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80014d0:	bf58      	it	pl
 80014d2:	6803      	ldrpl	r3, [r0, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014d4:	464a      	mov	r2, r9
      __HAL_I2C_ENABLE(hi2c);
 80014d6:	bf5c      	itt	pl
 80014d8:	f043 0301 	orrpl.w	r3, r3, #1
 80014dc:	6003      	strpl	r3, [r0, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80014de:	6803      	ldr	r3, [r0, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014e0:	4641      	mov	r1, r8
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80014e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014e6:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014e8:	2321      	movs	r3, #33	; 0x21
 80014ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014ee:	2340      	movs	r3, #64	; 0x40
 80014f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 80014f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f6:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80014f8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014fa:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014fe:	4620      	mov	r0, r4
    hi2c->XferCount   = Size;
 8001500:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001502:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001504:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001508:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800150a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800150c:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800150e:	4653      	mov	r3, sl
 8001510:	f7ff fd86 	bl	8001020 <I2C_RequestMemoryWrite>
 8001514:	2800      	cmp	r0, #0
 8001516:	d02a      	beq.n	800156e <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001518:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800151a:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800151e:	2b04      	cmp	r3, #4
 8001520:	d107      	bne.n	8001532 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8001522:	2001      	movs	r0, #1
 8001524:	e7bd      	b.n	80014a2 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001526:	f7ff fd55 	bl	8000fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 800152a:	b120      	cbz	r0, 8001536 <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800152c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800152e:	2b04      	cmp	r3, #4
 8001530:	d034      	beq.n	800159c <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 8001532:	2003      	movs	r0, #3
 8001534:	e7b5      	b.n	80014a2 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001536:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001538:	6827      	ldr	r7, [r4, #0]
 800153a:	1c4b      	adds	r3, r1, #1
 800153c:	6263      	str	r3, [r4, #36]	; 0x24
 800153e:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001540:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001542:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001544:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001546:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 8001548:	3b01      	subs	r3, #1
 800154a:	b29b      	uxth	r3, r3
 800154c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800154e:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001550:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001552:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001554:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001556:	d50a      	bpl.n	800156e <HAL_I2C_Mem_Write+0xea>
 8001558:	b148      	cbz	r0, 800156e <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800155a:	1c8b      	adds	r3, r1, #2
 800155c:	6263      	str	r3, [r4, #36]	; 0x24
 800155e:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001560:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001562:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001564:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001566:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001568:	3b01      	subs	r3, #1
 800156a:	b29b      	uxth	r3, r3
 800156c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 800156e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001570:	462a      	mov	r2, r5
 8001572:	4631      	mov	r1, r6
 8001574:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1d5      	bne.n	8001526 <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800157a:	f7ff fd05 	bl	8000f88 <I2C_WaitOnBTFFlagUntilTimeout>
 800157e:	2800      	cmp	r0, #0
 8001580:	d1d4      	bne.n	800152c <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001582:	6822      	ldr	r2, [r4, #0]
 8001584:	6813      	ldr	r3, [r2, #0]
 8001586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800158c:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 800158e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001592:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001596:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800159a:	e782      	b.n	80014a2 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800159c:	6822      	ldr	r2, [r4, #0]
 800159e:	6813      	ldr	r3, [r2, #0]
 80015a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e7bc      	b.n	8001522 <HAL_I2C_Mem_Write+0x9e>
 80015a8:	00100002 	.word	0x00100002
 80015ac:	ffff0000 	.word	0xffff0000

080015b0 <HAL_I2C_Mem_Read>:
{
 80015b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015b4:	4604      	mov	r4, r0
 80015b6:	b086      	sub	sp, #24
 80015b8:	469a      	mov	sl, r3
 80015ba:	460d      	mov	r5, r1
 80015bc:	4691      	mov	r9, r2
 80015be:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 80015c0:	f7ff faf4 	bl	8000bac <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80015c4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80015c8:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80015ca:	2b20      	cmp	r3, #32
 80015cc:	d004      	beq.n	80015d8 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80015ce:	2502      	movs	r5, #2
}
 80015d0:	4628      	mov	r0, r5
 80015d2:	b006      	add	sp, #24
 80015d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015d8:	9000      	str	r0, [sp, #0]
 80015da:	2319      	movs	r3, #25
 80015dc:	2201      	movs	r2, #1
 80015de:	4620      	mov	r0, r4
 80015e0:	497e      	ldr	r1, [pc, #504]	; (80017dc <HAL_I2C_Mem_Read+0x22c>)
 80015e2:	f7ff fc41 	bl	8000e68 <I2C_WaitOnFlagUntilTimeout>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d1f1      	bne.n	80015ce <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80015ea:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d0ed      	beq.n	80015ce <HAL_I2C_Mem_Read+0x1e>
 80015f2:	2301      	movs	r3, #1
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015f4:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80015f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015fa:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015fc:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001600:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001602:	bf58      	it	pl
 8001604:	6803      	ldrpl	r3, [r0, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001606:	4629      	mov	r1, r5
      __HAL_I2C_ENABLE(hi2c);
 8001608:	bf5c      	itt	pl
 800160a:	f043 0301 	orrpl.w	r3, r3, #1
 800160e:	6003      	strpl	r3, [r0, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001610:	6803      	ldr	r3, [r0, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001612:	464a      	mov	r2, r9
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001618:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800161a:	2322      	movs	r3, #34	; 0x22
 800161c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001620:	2340      	movs	r3, #64	; 0x40
 8001622:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001628:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800162c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800162e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001632:	4620      	mov	r0, r4
    hi2c->XferCount   = Size;
 8001634:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001636:	4b6a      	ldr	r3, [pc, #424]	; (80017e0 <HAL_I2C_Mem_Read+0x230>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001638:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800163c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800163e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001640:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001642:	4653      	mov	r3, sl
 8001644:	f7ff fd42 	bl	80010cc <I2C_RequestMemoryRead>
 8001648:	4605      	mov	r5, r0
 800164a:	b130      	cbz	r0, 800165a <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800164c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800164e:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001652:	2b04      	cmp	r3, #4
 8001654:	d158      	bne.n	8001708 <HAL_I2C_Mem_Read+0x158>
              return HAL_ERROR;
 8001656:	2501      	movs	r5, #1
 8001658:	e7ba      	b.n	80015d0 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 800165a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800165c:	6823      	ldr	r3, [r4, #0]
    if(hi2c->XferSize == 0U)
 800165e:	b9b2      	cbnz	r2, 800168e <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001660:	9002      	str	r0, [sp, #8]
 8001662:	695a      	ldr	r2, [r3, #20]
 8001664:	9202      	str	r2, [sp, #8]
 8001666:	699a      	ldr	r2, [r3, #24]
 8001668:	9202      	str	r2, [sp, #8]
 800166a:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001672:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001674:	f8df 816c 	ldr.w	r8, [pc, #364]	; 80017e4 <HAL_I2C_Mem_Read+0x234>
    while(hi2c->XferSize > 0U)
 8001678:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800167a:	2b00      	cmp	r3, #0
 800167c:	d137      	bne.n	80016ee <HAL_I2C_Mem_Read+0x13e>
    hi2c->State = HAL_I2C_STATE_READY;
 800167e:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001680:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001684:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001688:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800168c:	e7a0      	b.n	80015d0 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 800168e:	2a01      	cmp	r2, #1
 8001690:	d111      	bne.n	80016b6 <HAL_I2C_Mem_Read+0x106>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001698:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	9003      	str	r0, [sp, #12]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	9203      	str	r2, [sp, #12]
 80016a4:	699a      	ldr	r2, [r3, #24]
 80016a6:	9203      	str	r2, [sp, #12]
 80016a8:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80016b2:	b662      	cpsie	i
}
 80016b4:	e7de      	b.n	8001674 <HAL_I2C_Mem_Read+0xc4>
    else if(hi2c->XferSize == 2U)
 80016b6:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80016b8:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 80016ba:	d10e      	bne.n	80016da <HAL_I2C_Mem_Read+0x12a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80016bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016c2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	9004      	str	r0, [sp, #16]
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	9204      	str	r2, [sp, #16]
 80016cc:	699a      	ldr	r2, [r3, #24]
 80016ce:	9204      	str	r2, [sp, #16]
 80016d0:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016d8:	e7ea      	b.n	80016b0 <HAL_I2C_Mem_Read+0x100>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016de:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016e0:	9005      	str	r0, [sp, #20]
 80016e2:	695a      	ldr	r2, [r3, #20]
 80016e4:	9205      	str	r2, [sp, #20]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	9305      	str	r3, [sp, #20]
 80016ea:	9b05      	ldr	r3, [sp, #20]
 80016ec:	e7c2      	b.n	8001674 <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d85a      	bhi.n	80017a8 <HAL_I2C_Mem_Read+0x1f8>
        if(hi2c->XferSize== 1U)
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d10a      	bne.n	800170c <HAL_I2C_Mem_Read+0x15c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80016f6:	4632      	mov	r2, r6
 80016f8:	4639      	mov	r1, r7
 80016fa:	4620      	mov	r0, r4
 80016fc:	f7ff fc17 	bl	8000f2e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001700:	b318      	cbz	r0, 800174a <HAL_I2C_Mem_Read+0x19a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001704:	2b20      	cmp	r3, #32
 8001706:	d1a6      	bne.n	8001656 <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 8001708:	2503      	movs	r5, #3
 800170a:	e761      	b.n	80015d0 <HAL_I2C_Mem_Read+0x20>
        else if(hi2c->XferSize == 2U)
 800170c:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	463b      	mov	r3, r7
 8001714:	4641      	mov	r1, r8
 8001716:	4620      	mov	r0, r4
 8001718:	9600      	str	r6, [sp, #0]
        else if(hi2c->XferSize == 2U)
 800171a:	d124      	bne.n	8001766 <HAL_I2C_Mem_Read+0x1b6>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800171c:	f7ff fba4 	bl	8000e68 <I2C_WaitOnFlagUntilTimeout>
 8001720:	2800      	cmp	r0, #0
 8001722:	d1f1      	bne.n	8001708 <HAL_I2C_Mem_Read+0x158>
 8001724:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001726:	6823      	ldr	r3, [r4, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800172e:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001734:	1c59      	adds	r1, r3, #1
 8001736:	6261      	str	r1, [r4, #36]	; 0x24
 8001738:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800173a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800173c:	3b01      	subs	r3, #1
 800173e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001740:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001742:	3b01      	subs	r3, #1
 8001744:	b29b      	uxth	r3, r3
 8001746:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001748:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800174a:	6823      	ldr	r3, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800174c:	691a      	ldr	r2, [r3, #16]
 800174e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001750:	1c59      	adds	r1, r3, #1
 8001752:	6261      	str	r1, [r4, #36]	; 0x24
 8001754:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001756:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001758:	3b01      	subs	r3, #1
 800175a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800175c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800175e:	3b01      	subs	r3, #1
 8001760:	b29b      	uxth	r3, r3
 8001762:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001764:	e788      	b.n	8001678 <HAL_I2C_Mem_Read+0xc8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001766:	f7ff fb7f 	bl	8000e68 <I2C_WaitOnFlagUntilTimeout>
 800176a:	4602      	mov	r2, r0
 800176c:	2800      	cmp	r0, #0
 800176e:	d1cb      	bne.n	8001708 <HAL_I2C_Mem_Read+0x158>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001770:	6821      	ldr	r1, [r4, #0]
 8001772:	680b      	ldr	r3, [r1, #0]
 8001774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001778:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800177a:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	6919      	ldr	r1, [r3, #16]
 8001780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001782:	1c58      	adds	r0, r3, #1
 8001784:	6260      	str	r0, [r4, #36]	; 0x24
 8001786:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8001788:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800178a:	4641      	mov	r1, r8
          hi2c->XferSize--;
 800178c:	3b01      	subs	r3, #1
 800178e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001790:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001792:	4620      	mov	r0, r4
          hi2c->XferCount--;
 8001794:	3b01      	subs	r3, #1
 8001796:	b29b      	uxth	r3, r3
 8001798:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800179a:	9600      	str	r6, [sp, #0]
 800179c:	463b      	mov	r3, r7
 800179e:	f7ff fb63 	bl	8000e68 <I2C_WaitOnFlagUntilTimeout>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d0bf      	beq.n	8001726 <HAL_I2C_Mem_Read+0x176>
 80017a6:	e7af      	b.n	8001708 <HAL_I2C_Mem_Read+0x158>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a8:	4632      	mov	r2, r6
 80017aa:	4639      	mov	r1, r7
 80017ac:	4620      	mov	r0, r4
 80017ae:	f7ff fbbe 	bl	8000f2e <I2C_WaitOnRXNEFlagUntilTimeout>
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d1a5      	bne.n	8001702 <HAL_I2C_Mem_Read+0x152>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017bc:	1c59      	adds	r1, r3, #1
 80017be:	6261      	str	r1, [r4, #36]	; 0x24
 80017c0:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80017c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017c4:	3b01      	subs	r3, #1
 80017c6:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80017c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	0752      	lsls	r2, r2, #29
 80017d6:	f57f af4f 	bpl.w	8001678 <HAL_I2C_Mem_Read+0xc8>
 80017da:	e7b7      	b.n	800174c <HAL_I2C_Mem_Read+0x19c>
 80017dc:	00100002 	.word	0x00100002
 80017e0:	ffff0000 	.word	0xffff0000
 80017e4:	00010004 	.word	0x00010004

080017e8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e8:	6803      	ldr	r3, [r0, #0]
{
 80017ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ee:	07db      	lsls	r3, r3, #31
{
 80017f0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f2:	d410      	bmi.n	8001816 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f4:	682b      	ldr	r3, [r5, #0]
 80017f6:	079f      	lsls	r7, r3, #30
 80017f8:	d45e      	bmi.n	80018b8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fa:	682b      	ldr	r3, [r5, #0]
 80017fc:	0719      	lsls	r1, r3, #28
 80017fe:	f100 8095 	bmi.w	800192c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001802:	682b      	ldr	r3, [r5, #0]
 8001804:	075a      	lsls	r2, r3, #29
 8001806:	f100 80c1 	bmi.w	800198c <HAL_RCC_OscConfig+0x1a4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180a:	69ea      	ldr	r2, [r5, #28]
 800180c:	2a00      	cmp	r2, #0
 800180e:	f040 812d 	bne.w	8001a6c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001812:	2000      	movs	r0, #0
 8001814:	e014      	b.n	8001840 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001816:	4c91      	ldr	r4, [pc, #580]	; (8001a5c <HAL_RCC_OscConfig+0x274>)
 8001818:	6863      	ldr	r3, [r4, #4]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b04      	cmp	r3, #4
 8001820:	d007      	beq.n	8001832 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001822:	6863      	ldr	r3, [r4, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_OscConfig+0x5e>
 800182c:	6863      	ldr	r3, [r4, #4]
 800182e:	03de      	lsls	r6, r3, #15
 8001830:	d509      	bpl.n	8001846 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	039c      	lsls	r4, r3, #14
 8001836:	d5dd      	bpl.n	80017f4 <HAL_RCC_OscConfig+0xc>
 8001838:	686b      	ldr	r3, [r5, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1da      	bne.n	80017f4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800183e:	2001      	movs	r0, #1
}
 8001840:	b002      	add	sp, #8
 8001842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001846:	686b      	ldr	r3, [r5, #4]
 8001848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184c:	d110      	bne.n	8001870 <HAL_RCC_OscConfig+0x88>
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001856:	f7ff f9a9 	bl	8000bac <HAL_GetTick>
 800185a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185c:	6823      	ldr	r3, [r4, #0]
 800185e:	0398      	lsls	r0, r3, #14
 8001860:	d4c8      	bmi.n	80017f4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001862:	f7ff f9a3 	bl	8000bac <HAL_GetTick>
 8001866:	1b80      	subs	r0, r0, r6
 8001868:	2864      	cmp	r0, #100	; 0x64
 800186a:	d9f7      	bls.n	800185c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800186c:	2003      	movs	r0, #3
 800186e:	e7e7      	b.n	8001840 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001870:	b99b      	cbnz	r3, 800189a <HAL_RCC_OscConfig+0xb2>
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001878:	6023      	str	r3, [r4, #0]
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001880:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001882:	f7ff f993 	bl	8000bac <HAL_GetTick>
 8001886:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	0399      	lsls	r1, r3, #14
 800188c:	d5b2      	bpl.n	80017f4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800188e:	f7ff f98d 	bl	8000bac <HAL_GetTick>
 8001892:	1b80      	subs	r0, r0, r6
 8001894:	2864      	cmp	r0, #100	; 0x64
 8001896:	d9f7      	bls.n	8001888 <HAL_RCC_OscConfig+0xa0>
 8001898:	e7e8      	b.n	800186c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800189e:	6823      	ldr	r3, [r4, #0]
 80018a0:	d103      	bne.n	80018aa <HAL_RCC_OscConfig+0xc2>
 80018a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a6:	6023      	str	r3, [r4, #0]
 80018a8:	e7d1      	b.n	800184e <HAL_RCC_OscConfig+0x66>
 80018aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ae:	6023      	str	r3, [r4, #0]
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b6:	e7cd      	b.n	8001854 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018b8:	4c68      	ldr	r4, [pc, #416]	; (8001a5c <HAL_RCC_OscConfig+0x274>)
 80018ba:	6863      	ldr	r3, [r4, #4]
 80018bc:	f013 0f0c 	tst.w	r3, #12
 80018c0:	d007      	beq.n	80018d2 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018c2:	6863      	ldr	r3, [r4, #4]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d110      	bne.n	80018ee <HAL_RCC_OscConfig+0x106>
 80018cc:	6863      	ldr	r3, [r4, #4]
 80018ce:	03da      	lsls	r2, r3, #15
 80018d0:	d40d      	bmi.n	80018ee <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	079b      	lsls	r3, r3, #30
 80018d6:	d502      	bpl.n	80018de <HAL_RCC_OscConfig+0xf6>
 80018d8:	692b      	ldr	r3, [r5, #16]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d1af      	bne.n	800183e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	696a      	ldr	r2, [r5, #20]
 80018e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018e6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018ea:	6023      	str	r3, [r4, #0]
 80018ec:	e785      	b.n	80017fa <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ee:	692a      	ldr	r2, [r5, #16]
 80018f0:	4b5b      	ldr	r3, [pc, #364]	; (8001a60 <HAL_RCC_OscConfig+0x278>)
 80018f2:	b16a      	cbz	r2, 8001910 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018f8:	f7ff f958 	bl	8000bac <HAL_GetTick>
 80018fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	079f      	lsls	r7, r3, #30
 8001902:	d4ec      	bmi.n	80018de <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff f952 	bl	8000bac <HAL_GetTick>
 8001908:	1b80      	subs	r0, r0, r6
 800190a:	2802      	cmp	r0, #2
 800190c:	d9f7      	bls.n	80018fe <HAL_RCC_OscConfig+0x116>
 800190e:	e7ad      	b.n	800186c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001910:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001912:	f7ff f94b 	bl	8000bac <HAL_GetTick>
 8001916:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001918:	6823      	ldr	r3, [r4, #0]
 800191a:	0798      	lsls	r0, r3, #30
 800191c:	f57f af6d 	bpl.w	80017fa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001920:	f7ff f944 	bl	8000bac <HAL_GetTick>
 8001924:	1b80      	subs	r0, r0, r6
 8001926:	2802      	cmp	r0, #2
 8001928:	d9f6      	bls.n	8001918 <HAL_RCC_OscConfig+0x130>
 800192a:	e79f      	b.n	800186c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192c:	69aa      	ldr	r2, [r5, #24]
 800192e:	4e4b      	ldr	r6, [pc, #300]	; (8001a5c <HAL_RCC_OscConfig+0x274>)
 8001930:	4b4b      	ldr	r3, [pc, #300]	; (8001a60 <HAL_RCC_OscConfig+0x278>)
 8001932:	b1e2      	cbz	r2, 800196e <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8001934:	2201      	movs	r2, #1
 8001936:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800193a:	f7ff f937 	bl	8000bac <HAL_GetTick>
 800193e:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001940:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001942:	079b      	lsls	r3, r3, #30
 8001944:	d50d      	bpl.n	8001962 <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001946:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800194a:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001952:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001954:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001956:	9b01      	ldr	r3, [sp, #4]
 8001958:	1e5a      	subs	r2, r3, #1
 800195a:	9201      	str	r2, [sp, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f9      	bne.n	8001954 <HAL_RCC_OscConfig+0x16c>
 8001960:	e74f      	b.n	8001802 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001962:	f7ff f923 	bl	8000bac <HAL_GetTick>
 8001966:	1b00      	subs	r0, r0, r4
 8001968:	2802      	cmp	r0, #2
 800196a:	d9e9      	bls.n	8001940 <HAL_RCC_OscConfig+0x158>
 800196c:	e77e      	b.n	800186c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800196e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001972:	f7ff f91b 	bl	8000bac <HAL_GetTick>
 8001976:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800197a:	079f      	lsls	r7, r3, #30
 800197c:	f57f af41 	bpl.w	8001802 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001980:	f7ff f914 	bl	8000bac <HAL_GetTick>
 8001984:	1b00      	subs	r0, r0, r4
 8001986:	2802      	cmp	r0, #2
 8001988:	d9f6      	bls.n	8001978 <HAL_RCC_OscConfig+0x190>
 800198a:	e76f      	b.n	800186c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198c:	4c33      	ldr	r4, [pc, #204]	; (8001a5c <HAL_RCC_OscConfig+0x274>)
 800198e:	69e3      	ldr	r3, [r4, #28]
 8001990:	00d8      	lsls	r0, r3, #3
 8001992:	d424      	bmi.n	80019de <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001994:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	69e3      	ldr	r3, [r4, #28]
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199c:	61e3      	str	r3, [r4, #28]
 800199e:	69e3      	ldr	r3, [r4, #28]
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4e2f      	ldr	r6, [pc, #188]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019aa:	6833      	ldr	r3, [r6, #0]
 80019ac:	05d9      	lsls	r1, r3, #23
 80019ae:	d518      	bpl.n	80019e2 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	68eb      	ldr	r3, [r5, #12]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d126      	bne.n	8001a04 <HAL_RCC_OscConfig+0x21c>
 80019b6:	6a23      	ldr	r3, [r4, #32]
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80019be:	f7ff f8f5 	bl	8000bac <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019c6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c8:	6a23      	ldr	r3, [r4, #32]
 80019ca:	079b      	lsls	r3, r3, #30
 80019cc:	d53f      	bpl.n	8001a4e <HAL_RCC_OscConfig+0x266>
    if(pwrclkchanged == SET)
 80019ce:	2f00      	cmp	r7, #0
 80019d0:	f43f af1b 	beq.w	800180a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d4:	69e3      	ldr	r3, [r4, #28]
 80019d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019da:	61e3      	str	r3, [r4, #28]
 80019dc:	e715      	b.n	800180a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80019de:	2700      	movs	r7, #0
 80019e0:	e7e2      	b.n	80019a8 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e2:	6833      	ldr	r3, [r6, #0]
 80019e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80019ea:	f7ff f8df 	bl	8000bac <HAL_GetTick>
 80019ee:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	6833      	ldr	r3, [r6, #0]
 80019f2:	05da      	lsls	r2, r3, #23
 80019f4:	d4dc      	bmi.n	80019b0 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f6:	f7ff f8d9 	bl	8000bac <HAL_GetTick>
 80019fa:	eba0 0008 	sub.w	r0, r0, r8
 80019fe:	2864      	cmp	r0, #100	; 0x64
 8001a00:	d9f6      	bls.n	80019f0 <HAL_RCC_OscConfig+0x208>
 8001a02:	e733      	b.n	800186c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a04:	b9ab      	cbnz	r3, 8001a32 <HAL_RCC_OscConfig+0x24a>
 8001a06:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6223      	str	r3, [r4, #32]
 8001a12:	6a23      	ldr	r3, [r4, #32]
 8001a14:	f023 0304 	bic.w	r3, r3, #4
 8001a18:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f8c7 	bl	8000bac <HAL_GetTick>
 8001a1e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a20:	6a23      	ldr	r3, [r4, #32]
 8001a22:	0798      	lsls	r0, r3, #30
 8001a24:	d5d3      	bpl.n	80019ce <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff f8c1 	bl	8000bac <HAL_GetTick>
 8001a2a:	1b80      	subs	r0, r0, r6
 8001a2c:	4540      	cmp	r0, r8
 8001a2e:	d9f7      	bls.n	8001a20 <HAL_RCC_OscConfig+0x238>
 8001a30:	e71c      	b.n	800186c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	6a23      	ldr	r3, [r4, #32]
 8001a36:	d103      	bne.n	8001a40 <HAL_RCC_OscConfig+0x258>
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	6223      	str	r3, [r4, #32]
 8001a3e:	e7ba      	b.n	80019b6 <HAL_RCC_OscConfig+0x1ce>
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	6223      	str	r3, [r4, #32]
 8001a46:	6a23      	ldr	r3, [r4, #32]
 8001a48:	f023 0304 	bic.w	r3, r3, #4
 8001a4c:	e7b6      	b.n	80019bc <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7ff f8ad 	bl	8000bac <HAL_GetTick>
 8001a52:	1b80      	subs	r0, r0, r6
 8001a54:	4540      	cmp	r0, r8
 8001a56:	d9b7      	bls.n	80019c8 <HAL_RCC_OscConfig+0x1e0>
 8001a58:	e708      	b.n	800186c <HAL_RCC_OscConfig+0x84>
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	42420000 	.word	0x42420000
 8001a64:	20000008 	.word	0x20000008
 8001a68:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6c:	4c23      	ldr	r4, [pc, #140]	; (8001afc <HAL_RCC_OscConfig+0x314>)
 8001a6e:	6863      	ldr	r3, [r4, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	f43f aee2 	beq.w	800183e <HAL_RCC_OscConfig+0x56>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a7a:	2a02      	cmp	r2, #2
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <HAL_RCC_OscConfig+0x318>)
        __HAL_RCC_PLL_DISABLE();
 8001a82:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a84:	d12c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001a86:	f7ff f891 	bl	8000bac <HAL_GetTick>
 8001a8a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	0199      	lsls	r1, r3, #6
 8001a90:	d420      	bmi.n	8001ad4 <HAL_RCC_OscConfig+0x2ec>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a92:	6a2b      	ldr	r3, [r5, #32]
 8001a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a98:	d105      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x2be>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a9a:	6862      	ldr	r2, [r4, #4]
 8001a9c:	68a9      	ldr	r1, [r5, #8]
 8001a9e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001aa8:	6862      	ldr	r2, [r4, #4]
 8001aaa:	430b      	orrs	r3, r1
 8001aac:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001ab0:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001ab2:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_RCC_OscConfig+0x318>)
 8001ab8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001aba:	f7ff f877 	bl	8000bac <HAL_GetTick>
 8001abe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	019a      	lsls	r2, r3, #6
 8001ac4:	f53f aea5 	bmi.w	8001812 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7ff f870 	bl	8000bac <HAL_GetTick>
 8001acc:	1b40      	subs	r0, r0, r5
 8001ace:	2802      	cmp	r0, #2
 8001ad0:	d9f6      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x2d8>
 8001ad2:	e6cb      	b.n	800186c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff f86a 	bl	8000bac <HAL_GetTick>
 8001ad8:	1b80      	subs	r0, r0, r6
 8001ada:	2802      	cmp	r0, #2
 8001adc:	d9d6      	bls.n	8001a8c <HAL_RCC_OscConfig+0x2a4>
 8001ade:	e6c5      	b.n	800186c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f864 	bl	8000bac <HAL_GetTick>
 8001ae4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	019b      	lsls	r3, r3, #6
 8001aea:	f57f ae92 	bpl.w	8001812 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff f85d 	bl	8000bac <HAL_GetTick>
 8001af2:	1b40      	subs	r0, r0, r5
 8001af4:	2802      	cmp	r0, #2
 8001af6:	d9f6      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x2fe>
 8001af8:	e6b8      	b.n	800186c <HAL_RCC_OscConfig+0x84>
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	42420000 	.word	0x42420000

08001b04 <HAL_RCC_GetSysClockFreq>:
{
 8001b04:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001b08:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b0a:	ac02      	add	r4, sp, #8
 8001b0c:	f103 0510 	add.w	r5, r3, #16
 8001b10:	4622      	mov	r2, r4
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	6859      	ldr	r1, [r3, #4]
 8001b16:	3308      	adds	r3, #8
 8001b18:	c203      	stmia	r2!, {r0, r1}
 8001b1a:	42ab      	cmp	r3, r5
 8001b1c:	4614      	mov	r4, r2
 8001b1e:	d1f7      	bne.n	8001b10 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b20:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001b24:	4911      	ldr	r1, [pc, #68]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b26:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001b2a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001b2c:	f003 020c 	and.w	r2, r3, #12
 8001b30:	2a08      	cmp	r2, #8
 8001b32:	d117      	bne.n	8001b64 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b34:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001b38:	3218      	adds	r2, #24
 8001b3a:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b3c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b3e:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b42:	d50c      	bpl.n	8001b5e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b44:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b48:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b4c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b4e:	3318      	adds	r3, #24
 8001b50:	446b      	add	r3, sp
 8001b52:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b56:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001b5a:	b007      	add	sp, #28
 8001b5c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x70>)
 8001b60:	4358      	muls	r0, r3
 8001b62:	e7fa      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001b66:	e7f8      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x56>
 8001b68:	080052d0 	.word	0x080052d0
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	007a1200 	.word	0x007a1200
 8001b74:	003d0900 	.word	0x003d0900

08001b78 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b78:	4a53      	ldr	r2, [pc, #332]	; (8001cc8 <HAL_RCC_ClockConfig+0x150>)
{
 8001b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b7e:	6813      	ldr	r3, [r2, #0]
{
 8001b80:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	428b      	cmp	r3, r1
{
 8001b88:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b8a:	d328      	bcc.n	8001bde <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	6821      	ldr	r1, [r4, #0]
 8001b8e:	078e      	lsls	r6, r1, #30
 8001b90:	d432      	bmi.n	8001bf8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b92:	07ca      	lsls	r2, r1, #31
 8001b94:	d445      	bmi.n	8001c22 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b96:	4a4c      	ldr	r2, [pc, #304]	; (8001cc8 <HAL_RCC_ClockConfig+0x150>)
 8001b98:	6813      	ldr	r3, [r2, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	42ab      	cmp	r3, r5
 8001ba0:	d87f      	bhi.n	8001ca2 <HAL_RCC_ClockConfig+0x12a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba2:	6822      	ldr	r2, [r4, #0]
 8001ba4:	4d49      	ldr	r5, [pc, #292]	; (8001ccc <HAL_RCC_ClockConfig+0x154>)
 8001ba6:	f012 0f04 	tst.w	r2, #4
 8001baa:	f040 8085 	bne.w	8001cb8 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bae:	0713      	lsls	r3, r2, #28
 8001bb0:	d506      	bpl.n	8001bc0 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bb2:	686b      	ldr	r3, [r5, #4]
 8001bb4:	6922      	ldr	r2, [r4, #16]
 8001bb6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001bba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001bbe:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc0:	f7ff ffa0 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001bc4:	686b      	ldr	r3, [r5, #4]
 8001bc6:	4a42      	ldr	r2, [pc, #264]	; (8001cd0 <HAL_RCC_ClockConfig+0x158>)
 8001bc8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bcc:	5cd3      	ldrb	r3, [r2, r3]
 8001bce:	40d8      	lsrs	r0, r3
 8001bd0:	4b40      	ldr	r3, [pc, #256]	; (8001cd4 <HAL_RCC_ClockConfig+0x15c>)
 8001bd2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f7fe ffa7 	bl	8000b28 <HAL_InitTick>
  return HAL_OK;
 8001bda:	2000      	movs	r0, #0
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x7c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	6813      	ldr	r3, [r2, #0]
 8001be0:	f023 0307 	bic.w	r3, r3, #7
 8001be4:	430b      	orrs	r3, r1
 8001be6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001be8:	6813      	ldr	r3, [r2, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	428b      	cmp	r3, r1
 8001bf0:	d0cc      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001bf2:	2001      	movs	r0, #1
}
 8001bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	4b34      	ldr	r3, [pc, #208]	; (8001ccc <HAL_RCC_ClockConfig+0x154>)
 8001bfa:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bfe:	bf1e      	ittt	ne
 8001c00:	685a      	ldrne	r2, [r3, #4]
 8001c02:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001c06:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c08:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c0a:	bf42      	ittt	mi
 8001c0c:	685a      	ldrmi	r2, [r3, #4]
 8001c0e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001c12:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	68a0      	ldr	r0, [r4, #8]
 8001c18:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c1c:	4302      	orrs	r2, r0
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	e7b7      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c22:	6862      	ldr	r2, [r4, #4]
 8001c24:	4e29      	ldr	r6, [pc, #164]	; (8001ccc <HAL_RCC_ClockConfig+0x154>)
 8001c26:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c28:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2a:	d11b      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c30:	d0df      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c32:	6873      	ldr	r3, [r6, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c34:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c38:	f023 0303 	bic.w	r3, r3, #3
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001c40:	f7fe ffb4 	bl	8000bac <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c44:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001c46:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d113      	bne.n	8001c74 <HAL_RCC_ClockConfig+0xfc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c4c:	6873      	ldr	r3, [r6, #4]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d09f      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c56:	f7fe ffa9 	bl	8000bac <HAL_GetTick>
 8001c5a:	1bc0      	subs	r0, r0, r7
 8001c5c:	4540      	cmp	r0, r8
 8001c5e:	d9f5      	bls.n	8001c4c <HAL_RCC_ClockConfig+0xd4>
          return HAL_TIMEOUT;
 8001c60:	2003      	movs	r0, #3
 8001c62:	e7c7      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c64:	2a02      	cmp	r2, #2
 8001c66:	d102      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c6c:	e7e0      	b.n	8001c30 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6e:	f013 0f02 	tst.w	r3, #2
 8001c72:	e7dd      	b.n	8001c30 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d10f      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c78:	6873      	ldr	r3, [r6, #4]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d089      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c82:	f7fe ff93 	bl	8000bac <HAL_GetTick>
 8001c86:	1bc0      	subs	r0, r0, r7
 8001c88:	4540      	cmp	r0, r8
 8001c8a:	d9f5      	bls.n	8001c78 <HAL_RCC_ClockConfig+0x100>
 8001c8c:	e7e8      	b.n	8001c60 <HAL_RCC_ClockConfig+0xe8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8e:	f7fe ff8d 	bl	8000bac <HAL_GetTick>
 8001c92:	1bc0      	subs	r0, r0, r7
 8001c94:	4540      	cmp	r0, r8
 8001c96:	d8e3      	bhi.n	8001c60 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c98:	6873      	ldr	r3, [r6, #4]
 8001c9a:	f013 0f0c 	tst.w	r3, #12
 8001c9e:	d1f6      	bne.n	8001c8e <HAL_RCC_ClockConfig+0x116>
 8001ca0:	e779      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	6813      	ldr	r3, [r2, #0]
 8001ca4:	f023 0307 	bic.w	r3, r3, #7
 8001ca8:	432b      	orrs	r3, r5
 8001caa:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cac:	6813      	ldr	r3, [r2, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	42ab      	cmp	r3, r5
 8001cb4:	d19d      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0x7a>
 8001cb6:	e774      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb8:	686b      	ldr	r3, [r5, #4]
 8001cba:	68e1      	ldr	r1, [r4, #12]
 8001cbc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	606b      	str	r3, [r5, #4]
 8001cc4:	e773      	b.n	8001bae <HAL_RCC_ClockConfig+0x36>
 8001cc6:	bf00      	nop
 8001cc8:	40022000 	.word	0x40022000
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	08005315 	.word	0x08005315
 8001cd4:	20000008 	.word	0x20000008

08001cd8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x14>)
 8001cda:	4a05      	ldr	r2, [pc, #20]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	4a03      	ldr	r2, [pc, #12]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ce6:	6810      	ldr	r0, [r2, #0]
}    
 8001ce8:	40d8      	lsrs	r0, r3
 8001cea:	4770      	bx	lr
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08005325 	.word	0x08005325
 8001cf4:	20000008 	.word	0x20000008

08001cf8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001cfa:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 8001cfe:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d00:	f043 020c 	orr.w	r2, r3, #12
	data_l = ((cmd<<4)&0xf0);
 8001d04:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001d06:	f043 0308 	orr.w	r3, r3, #8
 8001d0a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001d0e:	f040 030c 	orr.w	r3, r0, #12
 8001d12:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x08;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d16:	2364      	movs	r3, #100	; 0x64
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001d18:	f040 0008 	orr.w	r0, r0, #8
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d1c:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001d20:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	214e      	movs	r1, #78	; 0x4e
 8001d28:	2304      	movs	r3, #4
 8001d2a:	aa03      	add	r2, sp, #12
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <lcd_send_cmd+0x40>)
 8001d2e:	f7ff facf 	bl	80012d0 <HAL_I2C_Master_Transmit>
}
 8001d32:	b005      	add	sp, #20
 8001d34:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d38:	20000224 	.word	0x20000224

08001d3c <lcd_send_data>:

void lcd_send_data (char data)
{
 8001d3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001d3e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8001d42:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001d44:	f043 020d 	orr.w	r2, r3, #13
	data_l = ((data<<4)&0xf0);
 8001d48:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001d4a:	f043 0309 	orr.w	r3, r3, #9
 8001d4e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001d52:	f040 030d 	orr.w	r3, r0, #13
 8001d56:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=1
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d5a:	2364      	movs	r3, #100	; 0x64
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001d5c:	f040 0009 	orr.w	r0, r0, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001d60:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001d64:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	214e      	movs	r1, #78	; 0x4e
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	aa03      	add	r2, sp, #12
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <lcd_send_data+0x40>)
 8001d72:	f7ff faad 	bl	80012d0 <HAL_I2C_Master_Transmit>
}
 8001d76:	b005      	add	sp, #20
 8001d78:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d7c:	20000224 	.word	0x20000224

08001d80 <lcd_clear>:

void lcd_clear (void)
{
 8001d80:	b510      	push	{r4, lr}
	lcd_send_cmd (0x00);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff ffb8 	bl	8001cf8 <lcd_send_cmd>
 8001d88:	2464      	movs	r4, #100	; 0x64
	for (int i=0; i<100; i++)
	{
		lcd_send_data (' ');
 8001d8a:	2020      	movs	r0, #32
 8001d8c:	f7ff ffd6 	bl	8001d3c <lcd_send_data>
	for (int i=0; i<100; i++)
 8001d90:	3c01      	subs	r4, #1
 8001d92:	d1fa      	bne.n	8001d8a <lcd_clear+0xa>
	}
}
 8001d94:	bd10      	pop	{r4, pc}

08001d96 <lcd_init>:

void lcd_init (void)
{
 8001d96:	b508      	push	{r3, lr}
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001d98:	2032      	movs	r0, #50	; 0x32
 8001d9a:	f7fe ff0d 	bl	8000bb8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001d9e:	2030      	movs	r0, #48	; 0x30
 8001da0:	f7ff ffaa 	bl	8001cf8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001da4:	2005      	movs	r0, #5
 8001da6:	f7fe ff07 	bl	8000bb8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001daa:	2030      	movs	r0, #48	; 0x30
 8001dac:	f7ff ffa4 	bl	8001cf8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001db0:	2001      	movs	r0, #1
 8001db2:	f7fe ff01 	bl	8000bb8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001db6:	2030      	movs	r0, #48	; 0x30
 8001db8:	f7ff ff9e 	bl	8001cf8 <lcd_send_cmd>
	HAL_Delay(10);
 8001dbc:	200a      	movs	r0, #10
 8001dbe:	f7fe fefb 	bl	8000bb8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001dc2:	2020      	movs	r0, #32
 8001dc4:	f7ff ff98 	bl	8001cf8 <lcd_send_cmd>
	HAL_Delay(10);
 8001dc8:	200a      	movs	r0, #10
 8001dca:	f7fe fef5 	bl	8000bb8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001dce:	2028      	movs	r0, #40	; 0x28
 8001dd0:	f7ff ff92 	bl	8001cf8 <lcd_send_cmd>
	HAL_Delay(1);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f7fe feef 	bl	8000bb8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001dda:	2008      	movs	r0, #8
 8001ddc:	f7ff ff8c 	bl	8001cf8 <lcd_send_cmd>
	HAL_Delay(1);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f7fe fee9 	bl	8000bb8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001de6:	2001      	movs	r0, #1
 8001de8:	f7ff ff86 	bl	8001cf8 <lcd_send_cmd>
	HAL_Delay(1);
 8001dec:	2001      	movs	r0, #1
 8001dee:	f7fe fee3 	bl	8000bb8 <HAL_Delay>
	HAL_Delay(1);
 8001df2:	2001      	movs	r0, #1
 8001df4:	f7fe fee0 	bl	8000bb8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001df8:	2006      	movs	r0, #6
 8001dfa:	f7ff ff7d 	bl	8001cf8 <lcd_send_cmd>
	HAL_Delay(1);
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f7fe feda 	bl	8000bb8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}
 8001e04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001e08:	200c      	movs	r0, #12
 8001e0a:	f7ff bf75 	b.w	8001cf8 <lcd_send_cmd>

08001e0e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001e0e:	b510      	push	{r4, lr}
 8001e10:	1e44      	subs	r4, r0, #1
	while (*str) lcd_send_data (*str++);
 8001e12:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001e16:	b900      	cbnz	r0, 8001e1a <lcd_send_string+0xc>
}
 8001e18:	bd10      	pop	{r4, pc}
	while (*str) lcd_send_data (*str++);
 8001e1a:	f7ff ff8f 	bl	8001d3c <lcd_send_data>
 8001e1e:	e7f8      	b.n	8001e12 <lcd_send_string+0x4>

08001e20 <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz;


void MPU6050_Init (void)
{
 8001e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
	{*/
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8001e24:	2401      	movs	r4, #1
 8001e26:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
		Data = 0;
 8001e2a:	f04f 0800 	mov.w	r8, #0
{
 8001e2e:	b086      	sub	sp, #24
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8001e30:	4d19      	ldr	r5, [pc, #100]	; (8001e98 <MPU6050_Init+0x78>)
 8001e32:	f10d 0617 	add.w	r6, sp, #23
 8001e36:	4623      	mov	r3, r4
 8001e38:	226b      	movs	r2, #107	; 0x6b
 8001e3a:	21d0      	movs	r1, #208	; 0xd0
 8001e3c:	4628      	mov	r0, r5
 8001e3e:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8001e42:	9600      	str	r6, [sp, #0]
		Data = 0;
 8001e44:	f88d 8017 	strb.w	r8, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8001e48:	f7ff fb1c 	bl	8001484 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001e4c:	2307      	movs	r3, #7
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001e4e:	2219      	movs	r2, #25
		Data = 0x07;
 8001e50:	f88d 3017 	strb.w	r3, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001e54:	21d0      	movs	r1, #208	; 0xd0
 8001e56:	4623      	mov	r3, r4
 8001e58:	4628      	mov	r0, r5
 8001e5a:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8001e5e:	9600      	str	r6, [sp, #0]
 8001e60:	f7ff fb10 	bl	8001484 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001e64:	4623      	mov	r3, r4
 8001e66:	221c      	movs	r2, #28
 8001e68:	21d0      	movs	r1, #208	; 0xd0
 8001e6a:	4628      	mov	r0, r5
 8001e6c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8001e70:	9600      	str	r6, [sp, #0]
		Data = 0x00;
 8001e72:	f88d 8017 	strb.w	r8, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001e76:	f7ff fb05 	bl	8001484 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001e7a:	4623      	mov	r3, r4
 8001e7c:	221b      	movs	r2, #27
 8001e7e:	21d0      	movs	r1, #208	; 0xd0
 8001e80:	4628      	mov	r0, r5
 8001e82:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8001e86:	9600      	str	r6, [sp, #0]
		Data = 0x00;
 8001e88:	f88d 8017 	strb.w	r8, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001e8c:	f7ff fafa 	bl	8001484 <HAL_I2C_Mem_Write>
	//}

}
 8001e90:	b006      	add	sp, #24
 8001e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e96:	bf00      	nop
 8001e98:	20000224 	.word	0x20000224

08001e9c <MPU6050_Read_Accel>:
{
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001e9c:	2306      	movs	r3, #6
 8001e9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
{
 8001ea2:	b530      	push	{r4, r5, lr}
 8001ea4:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001ea6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001eaa:	ab04      	add	r3, sp, #16
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	223b      	movs	r2, #59	; 0x3b
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	21d0      	movs	r1, #208	; 0xd0
 8001eb4:	481b      	ldr	r0, [pc, #108]	; (8001f24 <MPU6050_Read_Accel+0x88>)
 8001eb6:	f7ff fb7b 	bl	80015b0 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);//De esta forma leemos 2 bytes
 8001eba:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <MPU6050_Read_Accel+0x8c>)
 8001ec0:	ba40      	rev16	r0, r0
 8001ec2:	8018      	strh	r0, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001ec4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8001ec8:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <MPU6050_Read_Accel+0x90>)
 8001eca:	ba5b      	rev16	r3, r3
 8001ecc:	8013      	strh	r3, [r2, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001ece:	b21d      	sxth	r5, r3
 8001ed0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001ed4:	4a16      	ldr	r2, [pc, #88]	; (8001f30 <MPU6050_Read_Accel+0x94>)
 8001ed6:	ba5b      	rev16	r3, r3
 8001ed8:	8013      	strh	r3, [r2, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8001eda:	b200      	sxth	r0, r0
 8001edc:	b21c      	sxth	r4, r3
 8001ede:	f7fe fa91 	bl	8000404 <__aeabi_i2d>
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <MPU6050_Read_Accel+0x98>)
 8001ee6:	f7fe faf7 	bl	80004d8 <__aeabi_dmul>
 8001eea:	f7fe fdcd 	bl	8000a88 <__aeabi_d2f>
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <MPU6050_Read_Accel+0x9c>)
 8001ef0:	6018      	str	r0, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 8001ef2:	4628      	mov	r0, r5
 8001ef4:	f7fe fa86 	bl	8000404 <__aeabi_i2d>
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MPU6050_Read_Accel+0x98>)
 8001efc:	f7fe faec 	bl	80004d8 <__aeabi_dmul>
 8001f00:	f7fe fdc2 	bl	8000a88 <__aeabi_d2f>
 8001f04:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <MPU6050_Read_Accel+0xa0>)
 8001f06:	6018      	str	r0, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7fe fa7b 	bl	8000404 <__aeabi_i2d>
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <MPU6050_Read_Accel+0x98>)
 8001f12:	f7fe fae1 	bl	80004d8 <__aeabi_dmul>
 8001f16:	f7fe fdb7 	bl	8000a88 <__aeabi_d2f>
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MPU6050_Read_Accel+0xa4>)
 8001f1c:	6018      	str	r0, [r3, #0]
}
 8001f1e:	b007      	add	sp, #28
 8001f20:	bd30      	pop	{r4, r5, pc}
 8001f22:	bf00      	nop
 8001f24:	20000224 	.word	0x20000224
 8001f28:	200001fc 	.word	0x200001fc
 8001f2c:	200001fe 	.word	0x200001fe
 8001f30:	20000200 	.word	0x20000200
 8001f34:	3f100000 	.word	0x3f100000
 8001f38:	20000204 	.word	0x20000204
 8001f3c:	20000208 	.word	0x20000208
 8001f40:	2000020c 	.word	0x2000020c
 8001f44:	00000000 	.word	0x00000000

08001f48 <MPU6050_Read_Gyro>:
{
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001f48:	2306      	movs	r3, #6
 8001f4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
{
 8001f4e:	b530      	push	{r4, r5, lr}
 8001f50:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001f52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001f56:	ab04      	add	r3, sp, #16
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	2243      	movs	r2, #67	; 0x43
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	21d0      	movs	r1, #208	; 0xd0
 8001f60:	481f      	ldr	r0, [pc, #124]	; (8001fe0 <MPU6050_Read_Gyro+0x98>)
 8001f62:	f7ff fb25 	bl	80015b0 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001f66:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <MPU6050_Read_Gyro+0x9c>)
 8001f6c:	ba40      	rev16	r0, r0
 8001f6e:	8018      	strh	r0, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001f70:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8001f74:	4a1c      	ldr	r2, [pc, #112]	; (8001fe8 <MPU6050_Read_Gyro+0xa0>)
 8001f76:	ba5b      	rev16	r3, r3
 8001f78:	8013      	strh	r3, [r2, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001f7a:	b21d      	sxth	r5, r3
 8001f7c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001f80:	4a1a      	ldr	r2, [pc, #104]	; (8001fec <MPU6050_Read_Gyro+0xa4>)
 8001f82:	ba5b      	rev16	r3, r3
 8001f84:	8013      	strh	r3, [r2, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 8001f86:	b200      	sxth	r0, r0
 8001f88:	b21c      	sxth	r4, r3
 8001f8a:	f7fe fa3b 	bl	8000404 <__aeabi_i2d>
 8001f8e:	a312      	add	r3, pc, #72	; (adr r3, 8001fd8 <MPU6050_Read_Gyro+0x90>)
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	f7fe fbca 	bl	800072c <__aeabi_ddiv>
 8001f98:	f7fe fd76 	bl	8000a88 <__aeabi_d2f>
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <MPU6050_Read_Gyro+0xa8>)
 8001f9e:	6018      	str	r0, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	f7fe fa2f 	bl	8000404 <__aeabi_i2d>
 8001fa6:	a30c      	add	r3, pc, #48	; (adr r3, 8001fd8 <MPU6050_Read_Gyro+0x90>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f7fe fbbe 	bl	800072c <__aeabi_ddiv>
 8001fb0:	f7fe fd6a 	bl	8000a88 <__aeabi_d2f>
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <MPU6050_Read_Gyro+0xac>)
 8001fb6:	6018      	str	r0, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f7fe fa23 	bl	8000404 <__aeabi_i2d>
 8001fbe:	a306      	add	r3, pc, #24	; (adr r3, 8001fd8 <MPU6050_Read_Gyro+0x90>)
 8001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc4:	f7fe fbb2 	bl	800072c <__aeabi_ddiv>
 8001fc8:	f7fe fd5e 	bl	8000a88 <__aeabi_d2f>
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <MPU6050_Read_Gyro+0xb0>)
 8001fce:	6018      	str	r0, [r3, #0]
}
 8001fd0:	b007      	add	sp, #28
 8001fd2:	bd30      	pop	{r4, r5, pc}
 8001fd4:	f3af 8000 	nop.w
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	40606000 	.word	0x40606000
 8001fe0:	20000224 	.word	0x20000224
 8001fe4:	20000218 	.word	0x20000218
 8001fe8:	2000021a 	.word	0x2000021a
 8001fec:	2000021c 	.word	0x2000021c
 8001ff0:	20000210 	.word	0x20000210
 8001ff4:	20000214 	.word	0x20000214
 8001ff8:	20000220 	.word	0x20000220

08001ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ffc:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ffe:	2414      	movs	r4, #20
{
 8002000:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002002:	4622      	mov	r2, r4
 8002004:	2100      	movs	r1, #0
 8002006:	a808      	add	r0, sp, #32
 8002008:	f000 fa76 	bl	80024f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800200c:	4622      	mov	r2, r4
 800200e:	2100      	movs	r1, #0
 8002010:	a801      	add	r0, sp, #4
 8002012:	f000 fa71 	bl	80024f8 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002016:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002018:	2201      	movs	r2, #1
 800201a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800201e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002022:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002026:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800202c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800202e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002030:	f7ff fbda 	bl	80017e8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002034:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002036:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800203a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800203e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002040:	4621      	mov	r1, r4
 8002042:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002044:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002048:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800204a:	f7ff fd95 	bl	8001b78 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800204e:	b010      	add	sp, #64	; 0x40
 8002050:	bd10      	pop	{r4, pc}
	...

08002054 <main>:
{
 8002054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002056:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800205a:	2400      	movs	r4, #0
  HAL_Init();
 800205c:	f7fe fd88 	bl	8000b70 <HAL_Init>
  SystemClock_Config();
 8002060:	f7ff ffcc 	bl	8001ffc <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002064:	4b68      	ldr	r3, [pc, #416]	; (8002208 <main+0x1b4>)
  hi2c1.Instance = I2C1;
 8002066:	4869      	ldr	r0, [pc, #420]	; (800220c <main+0x1b8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002068:	699a      	ldr	r2, [r3, #24]
	  lcd_send_string ("Ax=");
 800206a:	4e69      	ldr	r6, [pc, #420]	; (8002210 <main+0x1bc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800206c:	f042 0220 	orr.w	r2, r2, #32
 8002070:	619a      	str	r2, [r3, #24]
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	f002 0220 	and.w	r2, r2, #32
 8002078:	9201      	str	r2, [sp, #4]
 800207a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	f042 0208 	orr.w	r2, r2, #8
 8002082:	619a      	str	r2, [r3, #24]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	f002 0208 	and.w	r2, r2, #8
 800208a:	9202      	str	r2, [sp, #8]
 800208c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	699a      	ldr	r2, [r3, #24]
 8002090:	f042 0204 	orr.w	r2, r2, #4
 8002094:	619a      	str	r2, [r3, #24]
 8002096:	699b      	ldr	r3, [r3, #24]
  hi2c1.Init.ClockSpeed = 400000;
 8002098:	4a5e      	ldr	r2, [pc, #376]	; (8002214 <main+0x1c0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	9303      	str	r3, [sp, #12]
 80020a0:	9b03      	ldr	r3, [sp, #12]
  hi2c1.Init.ClockSpeed = 400000;
 80020a2:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <main+0x1c4>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020a4:	e9c0 5404 	strd	r5, r4, [r0, #16]
  hi2c1.Init.ClockSpeed = 400000;
 80020a8:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
 80020ac:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020b0:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020b4:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020b6:	f7ff f887 	bl	80011c8 <HAL_I2C_Init>
  hi2c2.Init.ClockSpeed = 100000;
 80020ba:	4958      	ldr	r1, [pc, #352]	; (800221c <main+0x1c8>)
 80020bc:	4b58      	ldr	r3, [pc, #352]	; (8002220 <main+0x1cc>)
  hi2c2.Instance = I2C2;
 80020be:	4859      	ldr	r0, [pc, #356]	; (8002224 <main+0x1d0>)
  hi2c2.Init.ClockSpeed = 100000;
 80020c0:	e9c0 1300 	strd	r1, r3, [r0]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020c4:	e9c0 5404 	strd	r5, r4, [r0, #16]
  hi2c2.Init.OwnAddress1 = 0;
 80020c8:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020cc:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020d0:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020d2:	f7ff f879 	bl	80011c8 <HAL_I2C_Init>
  lcd_init();
 80020d6:	f7ff fe5e 	bl	8001d96 <lcd_init>
  MPU6050_Init();
 80020da:	f7ff fea1 	bl	8001e20 <MPU6050_Init>
  lcd_send_string ("initialized");
 80020de:	4852      	ldr	r0, [pc, #328]	; (8002228 <main+0x1d4>)
 80020e0:	f7ff fe95 	bl	8001e0e <lcd_send_string>
  HAL_Delay (1000);  // wait for 1 sec
 80020e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020e8:	f7fe fd66 	bl	8000bb8 <HAL_Delay>
  lcd_clear ();
 80020ec:	f7ff fe48 	bl	8001d80 <lcd_clear>
  lcd_send_cmd (0x80|0x5A);
 80020f0:	20da      	movs	r0, #218	; 0xda
 80020f2:	f7ff fe01 	bl	8001cf8 <lcd_send_cmd>
  lcd_send_string ("MPU6050");
 80020f6:	484d      	ldr	r0, [pc, #308]	; (800222c <main+0x1d8>)
 80020f8:	f7ff fe89 	bl	8001e0e <lcd_send_string>
	  sprintf (buf, "%.2f", Ax);
 80020fc:	4c4c      	ldr	r4, [pc, #304]	; (8002230 <main+0x1dc>)
	  lcd_send_string ("g ");
 80020fe:	4d4d      	ldr	r5, [pc, #308]	; (8002234 <main+0x1e0>)
	  MPU6050_Read_Accel();
 8002100:	f7ff fecc 	bl	8001e9c <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8002104:	f7ff ff20 	bl	8001f48 <MPU6050_Read_Gyro>
	  lcd_send_cmd (0x80|0x00);  // goto 1,1
 8002108:	2080      	movs	r0, #128	; 0x80
 800210a:	f7ff fdf5 	bl	8001cf8 <lcd_send_cmd>
	  lcd_send_string ("Ax=");
 800210e:	4630      	mov	r0, r6
 8002110:	f7ff fe7d 	bl	8001e0e <lcd_send_string>
	  sprintf (buf, "%.2f", Ax);
 8002114:	4b48      	ldr	r3, [pc, #288]	; (8002238 <main+0x1e4>)
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	f7fe f986 	bl	8000428 <__aeabi_f2d>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4668      	mov	r0, sp
 8002122:	4621      	mov	r1, r4
 8002124:	f000 fe50 	bl	8002dc8 <siprintf>
	  lcd_send_string (buf);
 8002128:	4668      	mov	r0, sp
 800212a:	f7ff fe70 	bl	8001e0e <lcd_send_string>
	  lcd_send_string ("g ");
 800212e:	4628      	mov	r0, r5
 8002130:	f7ff fe6d 	bl	8001e0e <lcd_send_string>
	  lcd_send_cmd (0x80|0x40);  // goto 2,1
 8002134:	20c0      	movs	r0, #192	; 0xc0
 8002136:	f7ff fddf 	bl	8001cf8 <lcd_send_cmd>
	  lcd_send_string ("Ay=");
 800213a:	4840      	ldr	r0, [pc, #256]	; (800223c <main+0x1e8>)
 800213c:	f7ff fe67 	bl	8001e0e <lcd_send_string>
	  sprintf (buf, "%.2f", Ay);
 8002140:	4b3f      	ldr	r3, [pc, #252]	; (8002240 <main+0x1ec>)
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	f7fe f970 	bl	8000428 <__aeabi_f2d>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4668      	mov	r0, sp
 800214e:	4621      	mov	r1, r4
 8002150:	f000 fe3a 	bl	8002dc8 <siprintf>
	  lcd_send_string (buf);
 8002154:	4668      	mov	r0, sp
 8002156:	f7ff fe5a 	bl	8001e0e <lcd_send_string>
	  lcd_send_string ("g ");
 800215a:	4628      	mov	r0, r5
 800215c:	f7ff fe57 	bl	8001e0e <lcd_send_string>
	  lcd_send_cmd (0x80|0x14);  // goto 3,1
 8002160:	2094      	movs	r0, #148	; 0x94
 8002162:	f7ff fdc9 	bl	8001cf8 <lcd_send_cmd>
	  lcd_send_string ("Az=");
 8002166:	4837      	ldr	r0, [pc, #220]	; (8002244 <main+0x1f0>)
 8002168:	f7ff fe51 	bl	8001e0e <lcd_send_string>
	  sprintf (buf, "%.2f", Az);
 800216c:	4b36      	ldr	r3, [pc, #216]	; (8002248 <main+0x1f4>)
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	f7fe f95a 	bl	8000428 <__aeabi_f2d>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4668      	mov	r0, sp
 800217a:	4621      	mov	r1, r4
 800217c:	f000 fe24 	bl	8002dc8 <siprintf>
	  lcd_send_string (buf);
 8002180:	4668      	mov	r0, sp
 8002182:	f7ff fe44 	bl	8001e0e <lcd_send_string>
	  lcd_send_string ("g ");
 8002186:	4628      	mov	r0, r5
 8002188:	f7ff fe41 	bl	8001e0e <lcd_send_string>
	  lcd_send_cmd (0x80|0x0A);  // goto 1,11
 800218c:	208a      	movs	r0, #138	; 0x8a
 800218e:	f7ff fdb3 	bl	8001cf8 <lcd_send_cmd>
	  lcd_send_string ("Gx=");
 8002192:	482e      	ldr	r0, [pc, #184]	; (800224c <main+0x1f8>)
 8002194:	f7ff fe3b 	bl	8001e0e <lcd_send_string>
	  sprintf (buf, "%.2f", Gx);
 8002198:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <main+0x1fc>)
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	f7fe f944 	bl	8000428 <__aeabi_f2d>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4668      	mov	r0, sp
 80021a6:	4621      	mov	r1, r4
 80021a8:	f000 fe0e 	bl	8002dc8 <siprintf>
	  lcd_send_string (buf);
 80021ac:	4668      	mov	r0, sp
 80021ae:	f7ff fe2e 	bl	8001e0e <lcd_send_string>
	  lcd_send_cmd (0x80|0x4A);  // goto 2,11
 80021b2:	20ca      	movs	r0, #202	; 0xca
 80021b4:	f7ff fda0 	bl	8001cf8 <lcd_send_cmd>
	  lcd_send_string ("Gy=");
 80021b8:	4826      	ldr	r0, [pc, #152]	; (8002254 <main+0x200>)
 80021ba:	f7ff fe28 	bl	8001e0e <lcd_send_string>
	  sprintf (buf, "%.2f", Gy);
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <main+0x204>)
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	f7fe f931 	bl	8000428 <__aeabi_f2d>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4668      	mov	r0, sp
 80021cc:	4621      	mov	r1, r4
 80021ce:	f000 fdfb 	bl	8002dc8 <siprintf>
	  lcd_send_string (buf);
 80021d2:	4668      	mov	r0, sp
 80021d4:	f7ff fe1b 	bl	8001e0e <lcd_send_string>
	  lcd_send_cmd (0x80|0x1E);  // goto 3,11
 80021d8:	209e      	movs	r0, #158	; 0x9e
 80021da:	f7ff fd8d 	bl	8001cf8 <lcd_send_cmd>
	  lcd_send_string ("Gz=");
 80021de:	481f      	ldr	r0, [pc, #124]	; (800225c <main+0x208>)
 80021e0:	f7ff fe15 	bl	8001e0e <lcd_send_string>
	  sprintf (buf, "%.2f", Gz);
 80021e4:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <main+0x20c>)
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	f7fe f91e 	bl	8000428 <__aeabi_f2d>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4668      	mov	r0, sp
 80021f2:	4621      	mov	r1, r4
 80021f4:	f000 fde8 	bl	8002dc8 <siprintf>
	  lcd_send_string (buf);
 80021f8:	4668      	mov	r0, sp
 80021fa:	f7ff fe08 	bl	8001e0e <lcd_send_string>
	  HAL_Delay (250);  // wait for a while
 80021fe:	20fa      	movs	r0, #250	; 0xfa
 8002200:	f7fe fcda 	bl	8000bb8 <HAL_Delay>
  while (1)
 8002204:	e77c      	b.n	8002100 <main+0xac>
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	20000224 	.word	0x20000224
 8002210:	080052f5 	.word	0x080052f5
 8002214:	40005400 	.word	0x40005400
 8002218:	00061a80 	.word	0x00061a80
 800221c:	40005800 	.word	0x40005800
 8002220:	000186a0 	.word	0x000186a0
 8002224:	20000278 	.word	0x20000278
 8002228:	080052e1 	.word	0x080052e1
 800222c:	080052ed 	.word	0x080052ed
 8002230:	080052f9 	.word	0x080052f9
 8002234:	080052fe 	.word	0x080052fe
 8002238:	20000204 	.word	0x20000204
 800223c:	08005301 	.word	0x08005301
 8002240:	20000208 	.word	0x20000208
 8002244:	08005305 	.word	0x08005305
 8002248:	2000020c 	.word	0x2000020c
 800224c:	08005309 	.word	0x08005309
 8002250:	20000210 	.word	0x20000210
 8002254:	0800530d 	.word	0x0800530d
 8002258:	20000214 	.word	0x20000214
 800225c:	08005311 	.word	0x08005311
 8002260:	20000220 	.word	0x20000220

08002264 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_MspInit+0x3c>)
{
 8002266:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	619a      	str	r2, [r3, #24]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	f002 0201 	and.w	r2, r2, #1
 8002276:	9200      	str	r2, [sp, #0]
 8002278:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	69da      	ldr	r2, [r3, #28]
 800227c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002280:	61da      	str	r2, [r3, #28]
 8002282:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002284:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800228e:	6853      	ldr	r3, [r2, #4]
 8002290:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002294:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002298:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800229a:	b002      	add	sp, #8
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010000 	.word	0x40010000

080022a8 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	2210      	movs	r2, #16
{
 80022aa:	b510      	push	{r4, lr}
 80022ac:	4604      	mov	r4, r0
 80022ae:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	eb0d 0002 	add.w	r0, sp, r2
 80022b4:	2100      	movs	r1, #0
 80022b6:	f000 f91f 	bl	80024f8 <memset>
  if(hi2c->Instance==I2C1)
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	4a21      	ldr	r2, [pc, #132]	; (8002344 <HAL_I2C_MspInit+0x9c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d11e      	bne.n	8002300 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c2:	4c21      	ldr	r4, [pc, #132]	; (8002348 <HAL_I2C_MspInit+0xa0>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c4:	21c0      	movs	r1, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c8:	4820      	ldr	r0, [pc, #128]	; (800234c <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ca:	f043 0308 	orr.w	r3, r3, #8
 80022ce:	61a3      	str	r3, [r4, #24]
 80022d0:	69a3      	ldr	r3, [r4, #24]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022da:	2312      	movs	r3, #18
 80022dc:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022e0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022e4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e6:	f7fe fcd1 	bl	8000c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022ea:	69e3      	ldr	r3, [r4, #28]
 80022ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022f0:	61e3      	str	r3, [r4, #28]
 80022f2:	69e3      	ldr	r3, [r4, #28]
 80022f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80022fc:	b008      	add	sp, #32
 80022fe:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C2)
 8002300:	4a13      	ldr	r2, [pc, #76]	; (8002350 <HAL_I2C_MspInit+0xa8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d1fa      	bne.n	80022fc <HAL_I2C_MspInit+0x54>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	4c10      	ldr	r4, [pc, #64]	; (8002348 <HAL_I2C_MspInit+0xa0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002308:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230e:	480f      	ldr	r0, [pc, #60]	; (800234c <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002310:	f043 0308 	orr.w	r3, r3, #8
 8002314:	61a3      	str	r3, [r4, #24]
 8002316:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002318:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002322:	2312      	movs	r3, #18
 8002324:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232c:	f7fe fcae 	bl	8000c8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002330:	69e3      	ldr	r3, [r4, #28]
 8002332:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002336:	61e3      	str	r3, [r4, #28]
 8002338:	69e3      	ldr	r3, [r4, #28]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233e:	9303      	str	r3, [sp, #12]
 8002340:	9b03      	ldr	r3, [sp, #12]
}
 8002342:	e7db      	b.n	80022fc <HAL_I2C_MspInit+0x54>
 8002344:	40005400 	.word	0x40005400
 8002348:	40021000 	.word	0x40021000
 800234c:	40010c00 	.word	0x40010c00
 8002350:	40005800 	.word	0x40005800

08002354 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002354:	4770      	bx	lr

08002356 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002356:	e7fe      	b.n	8002356 <HardFault_Handler>

08002358 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <MemManage_Handler>

0800235a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <BusFault_Handler>

0800235c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800235c:	e7fe      	b.n	800235c <UsageFault_Handler>

0800235e <SVC_Handler>:
 800235e:	4770      	bx	lr

08002360 <DebugMon_Handler>:
 8002360:	4770      	bx	lr

08002362 <PendSV_Handler>:
 8002362:	4770      	bx	lr

08002364 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002364:	f7fe bc16 	b.w	8000b94 <HAL_IncTick>

08002368 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002368:	2001      	movs	r0, #1
 800236a:	4770      	bx	lr

0800236c <_kill>:

int _kill(int pid, int sig)
{
 800236c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800236e:	f000 f899 	bl	80024a4 <__errno>
 8002372:	2316      	movs	r3, #22
 8002374:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002376:	f04f 30ff 	mov.w	r0, #4294967295
 800237a:	bd08      	pop	{r3, pc}

0800237c <_exit>:

void _exit (int status)
{
 800237c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800237e:	f000 f891 	bl	80024a4 <__errno>
 8002382:	2316      	movs	r3, #22
 8002384:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002386:	e7fe      	b.n	8002386 <_exit+0xa>

08002388 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002388:	b570      	push	{r4, r5, r6, lr}
 800238a:	460d      	mov	r5, r1
 800238c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238e:	460e      	mov	r6, r1
 8002390:	1b73      	subs	r3, r6, r5
 8002392:	429c      	cmp	r4, r3
 8002394:	dc01      	bgt.n	800239a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002396:	4620      	mov	r0, r4
 8002398:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800239a:	f3af 8000 	nop.w
 800239e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a2:	e7f5      	b.n	8002390 <_read+0x8>

080023a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	460d      	mov	r5, r1
 80023a8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023aa:	460e      	mov	r6, r1
 80023ac:	1b73      	subs	r3, r6, r5
 80023ae:	429c      	cmp	r4, r3
 80023b0:	dc01      	bgt.n	80023b6 <_write+0x12>
	{
		__io_putchar(*ptr++);

	}
	return len;
}
 80023b2:	4620      	mov	r0, r4
 80023b4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80023b6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80023ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	e7f5      	b.n	80023ac <_write+0x8>

080023c0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <_sbrk+0x2c>)
{
 80023c2:	b508      	push	{r3, lr}
	if (heap_end == 0)
 80023c4:	6811      	ldr	r1, [r2, #0]
{
 80023c6:	4603      	mov	r3, r0
	if (heap_end == 0)
 80023c8:	b909      	cbnz	r1, 80023ce <_sbrk+0xe>
		heap_end = &end;
 80023ca:	4909      	ldr	r1, [pc, #36]	; (80023f0 <_sbrk+0x30>)
 80023cc:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80023ce:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80023d0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80023d2:	4403      	add	r3, r0
 80023d4:	428b      	cmp	r3, r1
 80023d6:	d906      	bls.n	80023e6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80023d8:	f000 f864 	bl	80024a4 <__errno>
 80023dc:	230c      	movs	r3, #12
 80023de:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80023e4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80023e6:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80023e8:	e7fc      	b.n	80023e4 <_sbrk+0x24>
 80023ea:	bf00      	nop
 80023ec:	200002cc 	.word	0x200002cc
 80023f0:	200002e0 	.word	0x200002e0

080023f4 <_close>:

int _close(int file)
{
	return -1;
}
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	4770      	bx	lr

080023fa <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80023fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80023fe:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002400:	604b      	str	r3, [r1, #4]
}
 8002402:	4770      	bx	lr

08002404 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002404:	2001      	movs	r0, #1
 8002406:	4770      	bx	lr

08002408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002408:	2000      	movs	r0, #0
 800240a:	4770      	bx	lr

0800240c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <SystemInit+0x40>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <SystemInit+0x44>)
 800241a:	400a      	ands	r2, r1
 800241c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002424:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002428:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002430:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002438:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800243a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800243e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002440:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <SystemInit+0x48>)
 8002446:	609a      	str	r2, [r3, #8]
#endif 
}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	f8ff0000 	.word	0xf8ff0000
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002458:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800245a:	e003      	b.n	8002464 <LoopCopyDataInit>

0800245c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800245e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002460:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002462:	3104      	adds	r1, #4

08002464 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002464:	480a      	ldr	r0, [pc, #40]	; (8002490 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002468:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800246a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800246c:	d3f6      	bcc.n	800245c <CopyDataInit>
  ldr r2, =_sbss
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002470:	e002      	b.n	8002478 <LoopFillZerobss>

08002472 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002474:	f842 3b04 	str.w	r3, [r2], #4

08002478 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800247a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800247c:	d3f9      	bcc.n	8002472 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800247e:	f7ff ffc5 	bl	800240c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002482:	f000 f815 	bl	80024b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002486:	f7ff fde5 	bl	8002054 <main>
  bx lr
 800248a:	4770      	bx	lr
  ldr r3, =_sidata
 800248c:	08005714 	.word	0x08005714
  ldr r0, =_sdata
 8002490:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002494:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002498:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800249c:	200002e0 	.word	0x200002e0

080024a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC1_2_IRQHandler>
	...

080024a4 <__errno>:
 80024a4:	4b01      	ldr	r3, [pc, #4]	; (80024ac <__errno+0x8>)
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	2000000c 	.word	0x2000000c

080024b0 <__libc_init_array>:
 80024b0:	b570      	push	{r4, r5, r6, lr}
 80024b2:	2600      	movs	r6, #0
 80024b4:	4d0c      	ldr	r5, [pc, #48]	; (80024e8 <__libc_init_array+0x38>)
 80024b6:	4c0d      	ldr	r4, [pc, #52]	; (80024ec <__libc_init_array+0x3c>)
 80024b8:	1b64      	subs	r4, r4, r5
 80024ba:	10a4      	asrs	r4, r4, #2
 80024bc:	42a6      	cmp	r6, r4
 80024be:	d109      	bne.n	80024d4 <__libc_init_array+0x24>
 80024c0:	f002 fefa 	bl	80052b8 <_init>
 80024c4:	2600      	movs	r6, #0
 80024c6:	4d0a      	ldr	r5, [pc, #40]	; (80024f0 <__libc_init_array+0x40>)
 80024c8:	4c0a      	ldr	r4, [pc, #40]	; (80024f4 <__libc_init_array+0x44>)
 80024ca:	1b64      	subs	r4, r4, r5
 80024cc:	10a4      	asrs	r4, r4, #2
 80024ce:	42a6      	cmp	r6, r4
 80024d0:	d105      	bne.n	80024de <__libc_init_array+0x2e>
 80024d2:	bd70      	pop	{r4, r5, r6, pc}
 80024d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80024d8:	4798      	blx	r3
 80024da:	3601      	adds	r6, #1
 80024dc:	e7ee      	b.n	80024bc <__libc_init_array+0xc>
 80024de:	f855 3b04 	ldr.w	r3, [r5], #4
 80024e2:	4798      	blx	r3
 80024e4:	3601      	adds	r6, #1
 80024e6:	e7f2      	b.n	80024ce <__libc_init_array+0x1e>
 80024e8:	0800570c 	.word	0x0800570c
 80024ec:	0800570c 	.word	0x0800570c
 80024f0:	0800570c 	.word	0x0800570c
 80024f4:	08005710 	.word	0x08005710

080024f8 <memset>:
 80024f8:	4603      	mov	r3, r0
 80024fa:	4402      	add	r2, r0
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d100      	bne.n	8002502 <memset+0xa>
 8002500:	4770      	bx	lr
 8002502:	f803 1b01 	strb.w	r1, [r3], #1
 8002506:	e7f9      	b.n	80024fc <memset+0x4>

08002508 <__cvt>:
 8002508:	2b00      	cmp	r3, #0
 800250a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800250e:	461f      	mov	r7, r3
 8002510:	bfbb      	ittet	lt
 8002512:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002516:	461f      	movlt	r7, r3
 8002518:	2300      	movge	r3, #0
 800251a:	232d      	movlt	r3, #45	; 0x2d
 800251c:	b088      	sub	sp, #32
 800251e:	4614      	mov	r4, r2
 8002520:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002522:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002524:	7013      	strb	r3, [r2, #0]
 8002526:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002528:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800252c:	f023 0820 	bic.w	r8, r3, #32
 8002530:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002534:	d005      	beq.n	8002542 <__cvt+0x3a>
 8002536:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800253a:	d100      	bne.n	800253e <__cvt+0x36>
 800253c:	3501      	adds	r5, #1
 800253e:	2302      	movs	r3, #2
 8002540:	e000      	b.n	8002544 <__cvt+0x3c>
 8002542:	2303      	movs	r3, #3
 8002544:	aa07      	add	r2, sp, #28
 8002546:	9204      	str	r2, [sp, #16]
 8002548:	aa06      	add	r2, sp, #24
 800254a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800254e:	e9cd 3500 	strd	r3, r5, [sp]
 8002552:	4622      	mov	r2, r4
 8002554:	463b      	mov	r3, r7
 8002556:	f000 fce3 	bl	8002f20 <_dtoa_r>
 800255a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800255e:	4606      	mov	r6, r0
 8002560:	d102      	bne.n	8002568 <__cvt+0x60>
 8002562:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002564:	07db      	lsls	r3, r3, #31
 8002566:	d522      	bpl.n	80025ae <__cvt+0xa6>
 8002568:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800256c:	eb06 0905 	add.w	r9, r6, r5
 8002570:	d110      	bne.n	8002594 <__cvt+0x8c>
 8002572:	7833      	ldrb	r3, [r6, #0]
 8002574:	2b30      	cmp	r3, #48	; 0x30
 8002576:	d10a      	bne.n	800258e <__cvt+0x86>
 8002578:	2200      	movs	r2, #0
 800257a:	2300      	movs	r3, #0
 800257c:	4620      	mov	r0, r4
 800257e:	4639      	mov	r1, r7
 8002580:	f7fe fa12 	bl	80009a8 <__aeabi_dcmpeq>
 8002584:	b918      	cbnz	r0, 800258e <__cvt+0x86>
 8002586:	f1c5 0501 	rsb	r5, r5, #1
 800258a:	f8ca 5000 	str.w	r5, [sl]
 800258e:	f8da 3000 	ldr.w	r3, [sl]
 8002592:	4499      	add	r9, r3
 8002594:	2200      	movs	r2, #0
 8002596:	2300      	movs	r3, #0
 8002598:	4620      	mov	r0, r4
 800259a:	4639      	mov	r1, r7
 800259c:	f7fe fa04 	bl	80009a8 <__aeabi_dcmpeq>
 80025a0:	b108      	cbz	r0, 80025a6 <__cvt+0x9e>
 80025a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80025a6:	2230      	movs	r2, #48	; 0x30
 80025a8:	9b07      	ldr	r3, [sp, #28]
 80025aa:	454b      	cmp	r3, r9
 80025ac:	d307      	bcc.n	80025be <__cvt+0xb6>
 80025ae:	4630      	mov	r0, r6
 80025b0:	9b07      	ldr	r3, [sp, #28]
 80025b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80025b4:	1b9b      	subs	r3, r3, r6
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	b008      	add	sp, #32
 80025ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025be:	1c59      	adds	r1, r3, #1
 80025c0:	9107      	str	r1, [sp, #28]
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	e7f0      	b.n	80025a8 <__cvt+0xa0>

080025c6 <__exponent>:
 80025c6:	4603      	mov	r3, r0
 80025c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025ca:	2900      	cmp	r1, #0
 80025cc:	f803 2b02 	strb.w	r2, [r3], #2
 80025d0:	bfb6      	itet	lt
 80025d2:	222d      	movlt	r2, #45	; 0x2d
 80025d4:	222b      	movge	r2, #43	; 0x2b
 80025d6:	4249      	neglt	r1, r1
 80025d8:	2909      	cmp	r1, #9
 80025da:	7042      	strb	r2, [r0, #1]
 80025dc:	dd2b      	ble.n	8002636 <__exponent+0x70>
 80025de:	f10d 0407 	add.w	r4, sp, #7
 80025e2:	46a4      	mov	ip, r4
 80025e4:	270a      	movs	r7, #10
 80025e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80025ea:	460a      	mov	r2, r1
 80025ec:	46a6      	mov	lr, r4
 80025ee:	fb07 1516 	mls	r5, r7, r6, r1
 80025f2:	2a63      	cmp	r2, #99	; 0x63
 80025f4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80025f8:	4631      	mov	r1, r6
 80025fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80025fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002602:	dcf0      	bgt.n	80025e6 <__exponent+0x20>
 8002604:	3130      	adds	r1, #48	; 0x30
 8002606:	f1ae 0502 	sub.w	r5, lr, #2
 800260a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800260e:	4629      	mov	r1, r5
 8002610:	1c44      	adds	r4, r0, #1
 8002612:	4561      	cmp	r1, ip
 8002614:	d30a      	bcc.n	800262c <__exponent+0x66>
 8002616:	f10d 0209 	add.w	r2, sp, #9
 800261a:	eba2 020e 	sub.w	r2, r2, lr
 800261e:	4565      	cmp	r5, ip
 8002620:	bf88      	it	hi
 8002622:	2200      	movhi	r2, #0
 8002624:	4413      	add	r3, r2
 8002626:	1a18      	subs	r0, r3, r0
 8002628:	b003      	add	sp, #12
 800262a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800262c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002630:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002634:	e7ed      	b.n	8002612 <__exponent+0x4c>
 8002636:	2330      	movs	r3, #48	; 0x30
 8002638:	3130      	adds	r1, #48	; 0x30
 800263a:	7083      	strb	r3, [r0, #2]
 800263c:	70c1      	strb	r1, [r0, #3]
 800263e:	1d03      	adds	r3, r0, #4
 8002640:	e7f1      	b.n	8002626 <__exponent+0x60>
	...

08002644 <_printf_float>:
 8002644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002648:	b091      	sub	sp, #68	; 0x44
 800264a:	460c      	mov	r4, r1
 800264c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002650:	4616      	mov	r6, r2
 8002652:	461f      	mov	r7, r3
 8002654:	4605      	mov	r5, r0
 8002656:	f001 fa51 	bl	8003afc <_localeconv_r>
 800265a:	6803      	ldr	r3, [r0, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	9309      	str	r3, [sp, #36]	; 0x24
 8002660:	f7fd fd76 	bl	8000150 <strlen>
 8002664:	2300      	movs	r3, #0
 8002666:	930e      	str	r3, [sp, #56]	; 0x38
 8002668:	f8d8 3000 	ldr.w	r3, [r8]
 800266c:	900a      	str	r0, [sp, #40]	; 0x28
 800266e:	3307      	adds	r3, #7
 8002670:	f023 0307 	bic.w	r3, r3, #7
 8002674:	f103 0208 	add.w	r2, r3, #8
 8002678:	f894 9018 	ldrb.w	r9, [r4, #24]
 800267c:	f8d4 b000 	ldr.w	fp, [r4]
 8002680:	f8c8 2000 	str.w	r2, [r8]
 8002684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002688:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800268c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002690:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002694:	930b      	str	r3, [sp, #44]	; 0x2c
 8002696:	f04f 32ff 	mov.w	r2, #4294967295
 800269a:	4640      	mov	r0, r8
 800269c:	4b9c      	ldr	r3, [pc, #624]	; (8002910 <_printf_float+0x2cc>)
 800269e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80026a0:	f7fe f9b4 	bl	8000a0c <__aeabi_dcmpun>
 80026a4:	bb70      	cbnz	r0, 8002704 <_printf_float+0xc0>
 80026a6:	f04f 32ff 	mov.w	r2, #4294967295
 80026aa:	4640      	mov	r0, r8
 80026ac:	4b98      	ldr	r3, [pc, #608]	; (8002910 <_printf_float+0x2cc>)
 80026ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80026b0:	f7fe f98e 	bl	80009d0 <__aeabi_dcmple>
 80026b4:	bb30      	cbnz	r0, 8002704 <_printf_float+0xc0>
 80026b6:	2200      	movs	r2, #0
 80026b8:	2300      	movs	r3, #0
 80026ba:	4640      	mov	r0, r8
 80026bc:	4651      	mov	r1, sl
 80026be:	f7fe f97d 	bl	80009bc <__aeabi_dcmplt>
 80026c2:	b110      	cbz	r0, 80026ca <_printf_float+0x86>
 80026c4:	232d      	movs	r3, #45	; 0x2d
 80026c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026ca:	4b92      	ldr	r3, [pc, #584]	; (8002914 <_printf_float+0x2d0>)
 80026cc:	4892      	ldr	r0, [pc, #584]	; (8002918 <_printf_float+0x2d4>)
 80026ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80026d2:	bf94      	ite	ls
 80026d4:	4698      	movls	r8, r3
 80026d6:	4680      	movhi	r8, r0
 80026d8:	2303      	movs	r3, #3
 80026da:	f04f 0a00 	mov.w	sl, #0
 80026de:	6123      	str	r3, [r4, #16]
 80026e0:	f02b 0304 	bic.w	r3, fp, #4
 80026e4:	6023      	str	r3, [r4, #0]
 80026e6:	4633      	mov	r3, r6
 80026e8:	4621      	mov	r1, r4
 80026ea:	4628      	mov	r0, r5
 80026ec:	9700      	str	r7, [sp, #0]
 80026ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80026f0:	f000 f9d4 	bl	8002a9c <_printf_common>
 80026f4:	3001      	adds	r0, #1
 80026f6:	f040 8090 	bne.w	800281a <_printf_float+0x1d6>
 80026fa:	f04f 30ff 	mov.w	r0, #4294967295
 80026fe:	b011      	add	sp, #68	; 0x44
 8002700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002704:	4642      	mov	r2, r8
 8002706:	4653      	mov	r3, sl
 8002708:	4640      	mov	r0, r8
 800270a:	4651      	mov	r1, sl
 800270c:	f7fe f97e 	bl	8000a0c <__aeabi_dcmpun>
 8002710:	b148      	cbz	r0, 8002726 <_printf_float+0xe2>
 8002712:	f1ba 0f00 	cmp.w	sl, #0
 8002716:	bfb8      	it	lt
 8002718:	232d      	movlt	r3, #45	; 0x2d
 800271a:	4880      	ldr	r0, [pc, #512]	; (800291c <_printf_float+0x2d8>)
 800271c:	bfb8      	it	lt
 800271e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002722:	4b7f      	ldr	r3, [pc, #508]	; (8002920 <_printf_float+0x2dc>)
 8002724:	e7d3      	b.n	80026ce <_printf_float+0x8a>
 8002726:	6863      	ldr	r3, [r4, #4]
 8002728:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	d142      	bne.n	80027b6 <_printf_float+0x172>
 8002730:	2306      	movs	r3, #6
 8002732:	6063      	str	r3, [r4, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	9206      	str	r2, [sp, #24]
 8002738:	aa0e      	add	r2, sp, #56	; 0x38
 800273a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800273e:	aa0d      	add	r2, sp, #52	; 0x34
 8002740:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002744:	9203      	str	r2, [sp, #12]
 8002746:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800274a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800274e:	6023      	str	r3, [r4, #0]
 8002750:	6863      	ldr	r3, [r4, #4]
 8002752:	4642      	mov	r2, r8
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	4628      	mov	r0, r5
 8002758:	4653      	mov	r3, sl
 800275a:	910b      	str	r1, [sp, #44]	; 0x2c
 800275c:	f7ff fed4 	bl	8002508 <__cvt>
 8002760:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002762:	4680      	mov	r8, r0
 8002764:	2947      	cmp	r1, #71	; 0x47
 8002766:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002768:	d108      	bne.n	800277c <_printf_float+0x138>
 800276a:	1cc8      	adds	r0, r1, #3
 800276c:	db02      	blt.n	8002774 <_printf_float+0x130>
 800276e:	6863      	ldr	r3, [r4, #4]
 8002770:	4299      	cmp	r1, r3
 8002772:	dd40      	ble.n	80027f6 <_printf_float+0x1b2>
 8002774:	f1a9 0902 	sub.w	r9, r9, #2
 8002778:	fa5f f989 	uxtb.w	r9, r9
 800277c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002780:	d81f      	bhi.n	80027c2 <_printf_float+0x17e>
 8002782:	464a      	mov	r2, r9
 8002784:	3901      	subs	r1, #1
 8002786:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800278a:	910d      	str	r1, [sp, #52]	; 0x34
 800278c:	f7ff ff1b 	bl	80025c6 <__exponent>
 8002790:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002792:	4682      	mov	sl, r0
 8002794:	1813      	adds	r3, r2, r0
 8002796:	2a01      	cmp	r2, #1
 8002798:	6123      	str	r3, [r4, #16]
 800279a:	dc02      	bgt.n	80027a2 <_printf_float+0x15e>
 800279c:	6822      	ldr	r2, [r4, #0]
 800279e:	07d2      	lsls	r2, r2, #31
 80027a0:	d501      	bpl.n	80027a6 <_printf_float+0x162>
 80027a2:	3301      	adds	r3, #1
 80027a4:	6123      	str	r3, [r4, #16]
 80027a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d09b      	beq.n	80026e6 <_printf_float+0xa2>
 80027ae:	232d      	movs	r3, #45	; 0x2d
 80027b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027b4:	e797      	b.n	80026e6 <_printf_float+0xa2>
 80027b6:	2947      	cmp	r1, #71	; 0x47
 80027b8:	d1bc      	bne.n	8002734 <_printf_float+0xf0>
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1ba      	bne.n	8002734 <_printf_float+0xf0>
 80027be:	2301      	movs	r3, #1
 80027c0:	e7b7      	b.n	8002732 <_printf_float+0xee>
 80027c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80027c6:	d118      	bne.n	80027fa <_printf_float+0x1b6>
 80027c8:	2900      	cmp	r1, #0
 80027ca:	6863      	ldr	r3, [r4, #4]
 80027cc:	dd0b      	ble.n	80027e6 <_printf_float+0x1a2>
 80027ce:	6121      	str	r1, [r4, #16]
 80027d0:	b913      	cbnz	r3, 80027d8 <_printf_float+0x194>
 80027d2:	6822      	ldr	r2, [r4, #0]
 80027d4:	07d0      	lsls	r0, r2, #31
 80027d6:	d502      	bpl.n	80027de <_printf_float+0x19a>
 80027d8:	3301      	adds	r3, #1
 80027da:	440b      	add	r3, r1
 80027dc:	6123      	str	r3, [r4, #16]
 80027de:	f04f 0a00 	mov.w	sl, #0
 80027e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80027e4:	e7df      	b.n	80027a6 <_printf_float+0x162>
 80027e6:	b913      	cbnz	r3, 80027ee <_printf_float+0x1aa>
 80027e8:	6822      	ldr	r2, [r4, #0]
 80027ea:	07d2      	lsls	r2, r2, #31
 80027ec:	d501      	bpl.n	80027f2 <_printf_float+0x1ae>
 80027ee:	3302      	adds	r3, #2
 80027f0:	e7f4      	b.n	80027dc <_printf_float+0x198>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e7f2      	b.n	80027dc <_printf_float+0x198>
 80027f6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80027fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027fc:	4299      	cmp	r1, r3
 80027fe:	db05      	blt.n	800280c <_printf_float+0x1c8>
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	6121      	str	r1, [r4, #16]
 8002804:	07d8      	lsls	r0, r3, #31
 8002806:	d5ea      	bpl.n	80027de <_printf_float+0x19a>
 8002808:	1c4b      	adds	r3, r1, #1
 800280a:	e7e7      	b.n	80027dc <_printf_float+0x198>
 800280c:	2900      	cmp	r1, #0
 800280e:	bfcc      	ite	gt
 8002810:	2201      	movgt	r2, #1
 8002812:	f1c1 0202 	rsble	r2, r1, #2
 8002816:	4413      	add	r3, r2
 8002818:	e7e0      	b.n	80027dc <_printf_float+0x198>
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	055a      	lsls	r2, r3, #21
 800281e:	d407      	bmi.n	8002830 <_printf_float+0x1ec>
 8002820:	6923      	ldr	r3, [r4, #16]
 8002822:	4642      	mov	r2, r8
 8002824:	4631      	mov	r1, r6
 8002826:	4628      	mov	r0, r5
 8002828:	47b8      	blx	r7
 800282a:	3001      	adds	r0, #1
 800282c:	d12b      	bne.n	8002886 <_printf_float+0x242>
 800282e:	e764      	b.n	80026fa <_printf_float+0xb6>
 8002830:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002834:	f240 80dd 	bls.w	80029f2 <_printf_float+0x3ae>
 8002838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800283c:	2200      	movs	r2, #0
 800283e:	2300      	movs	r3, #0
 8002840:	f7fe f8b2 	bl	80009a8 <__aeabi_dcmpeq>
 8002844:	2800      	cmp	r0, #0
 8002846:	d033      	beq.n	80028b0 <_printf_float+0x26c>
 8002848:	2301      	movs	r3, #1
 800284a:	4631      	mov	r1, r6
 800284c:	4628      	mov	r0, r5
 800284e:	4a35      	ldr	r2, [pc, #212]	; (8002924 <_printf_float+0x2e0>)
 8002850:	47b8      	blx	r7
 8002852:	3001      	adds	r0, #1
 8002854:	f43f af51 	beq.w	80026fa <_printf_float+0xb6>
 8002858:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800285c:	429a      	cmp	r2, r3
 800285e:	db02      	blt.n	8002866 <_printf_float+0x222>
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	07d8      	lsls	r0, r3, #31
 8002864:	d50f      	bpl.n	8002886 <_printf_float+0x242>
 8002866:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800286a:	4631      	mov	r1, r6
 800286c:	4628      	mov	r0, r5
 800286e:	47b8      	blx	r7
 8002870:	3001      	adds	r0, #1
 8002872:	f43f af42 	beq.w	80026fa <_printf_float+0xb6>
 8002876:	f04f 0800 	mov.w	r8, #0
 800287a:	f104 091a 	add.w	r9, r4, #26
 800287e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002880:	3b01      	subs	r3, #1
 8002882:	4543      	cmp	r3, r8
 8002884:	dc09      	bgt.n	800289a <_printf_float+0x256>
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	079b      	lsls	r3, r3, #30
 800288a:	f100 8102 	bmi.w	8002a92 <_printf_float+0x44e>
 800288e:	68e0      	ldr	r0, [r4, #12]
 8002890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002892:	4298      	cmp	r0, r3
 8002894:	bfb8      	it	lt
 8002896:	4618      	movlt	r0, r3
 8002898:	e731      	b.n	80026fe <_printf_float+0xba>
 800289a:	2301      	movs	r3, #1
 800289c:	464a      	mov	r2, r9
 800289e:	4631      	mov	r1, r6
 80028a0:	4628      	mov	r0, r5
 80028a2:	47b8      	blx	r7
 80028a4:	3001      	adds	r0, #1
 80028a6:	f43f af28 	beq.w	80026fa <_printf_float+0xb6>
 80028aa:	f108 0801 	add.w	r8, r8, #1
 80028ae:	e7e6      	b.n	800287e <_printf_float+0x23a>
 80028b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	dc38      	bgt.n	8002928 <_printf_float+0x2e4>
 80028b6:	2301      	movs	r3, #1
 80028b8:	4631      	mov	r1, r6
 80028ba:	4628      	mov	r0, r5
 80028bc:	4a19      	ldr	r2, [pc, #100]	; (8002924 <_printf_float+0x2e0>)
 80028be:	47b8      	blx	r7
 80028c0:	3001      	adds	r0, #1
 80028c2:	f43f af1a 	beq.w	80026fa <_printf_float+0xb6>
 80028c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80028ca:	4313      	orrs	r3, r2
 80028cc:	d102      	bne.n	80028d4 <_printf_float+0x290>
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	07d9      	lsls	r1, r3, #31
 80028d2:	d5d8      	bpl.n	8002886 <_printf_float+0x242>
 80028d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80028d8:	4631      	mov	r1, r6
 80028da:	4628      	mov	r0, r5
 80028dc:	47b8      	blx	r7
 80028de:	3001      	adds	r0, #1
 80028e0:	f43f af0b 	beq.w	80026fa <_printf_float+0xb6>
 80028e4:	f04f 0900 	mov.w	r9, #0
 80028e8:	f104 0a1a 	add.w	sl, r4, #26
 80028ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80028ee:	425b      	negs	r3, r3
 80028f0:	454b      	cmp	r3, r9
 80028f2:	dc01      	bgt.n	80028f8 <_printf_float+0x2b4>
 80028f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028f6:	e794      	b.n	8002822 <_printf_float+0x1de>
 80028f8:	2301      	movs	r3, #1
 80028fa:	4652      	mov	r2, sl
 80028fc:	4631      	mov	r1, r6
 80028fe:	4628      	mov	r0, r5
 8002900:	47b8      	blx	r7
 8002902:	3001      	adds	r0, #1
 8002904:	f43f aef9 	beq.w	80026fa <_printf_float+0xb6>
 8002908:	f109 0901 	add.w	r9, r9, #1
 800290c:	e7ee      	b.n	80028ec <_printf_float+0x2a8>
 800290e:	bf00      	nop
 8002910:	7fefffff 	.word	0x7fefffff
 8002914:	08005334 	.word	0x08005334
 8002918:	08005338 	.word	0x08005338
 800291c:	08005340 	.word	0x08005340
 8002920:	0800533c 	.word	0x0800533c
 8002924:	080052f3 	.word	0x080052f3
 8002928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800292a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800292c:	429a      	cmp	r2, r3
 800292e:	bfa8      	it	ge
 8002930:	461a      	movge	r2, r3
 8002932:	2a00      	cmp	r2, #0
 8002934:	4691      	mov	r9, r2
 8002936:	dc37      	bgt.n	80029a8 <_printf_float+0x364>
 8002938:	f04f 0b00 	mov.w	fp, #0
 800293c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002940:	f104 021a 	add.w	r2, r4, #26
 8002944:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002948:	ebaa 0309 	sub.w	r3, sl, r9
 800294c:	455b      	cmp	r3, fp
 800294e:	dc33      	bgt.n	80029b8 <_printf_float+0x374>
 8002950:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002954:	429a      	cmp	r2, r3
 8002956:	db3b      	blt.n	80029d0 <_printf_float+0x38c>
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	07da      	lsls	r2, r3, #31
 800295c:	d438      	bmi.n	80029d0 <_printf_float+0x38c>
 800295e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002960:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002962:	eba3 020a 	sub.w	r2, r3, sl
 8002966:	eba3 0901 	sub.w	r9, r3, r1
 800296a:	4591      	cmp	r9, r2
 800296c:	bfa8      	it	ge
 800296e:	4691      	movge	r9, r2
 8002970:	f1b9 0f00 	cmp.w	r9, #0
 8002974:	dc34      	bgt.n	80029e0 <_printf_float+0x39c>
 8002976:	f04f 0800 	mov.w	r8, #0
 800297a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800297e:	f104 0a1a 	add.w	sl, r4, #26
 8002982:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	eba3 0309 	sub.w	r3, r3, r9
 800298c:	4543      	cmp	r3, r8
 800298e:	f77f af7a 	ble.w	8002886 <_printf_float+0x242>
 8002992:	2301      	movs	r3, #1
 8002994:	4652      	mov	r2, sl
 8002996:	4631      	mov	r1, r6
 8002998:	4628      	mov	r0, r5
 800299a:	47b8      	blx	r7
 800299c:	3001      	adds	r0, #1
 800299e:	f43f aeac 	beq.w	80026fa <_printf_float+0xb6>
 80029a2:	f108 0801 	add.w	r8, r8, #1
 80029a6:	e7ec      	b.n	8002982 <_printf_float+0x33e>
 80029a8:	4613      	mov	r3, r2
 80029aa:	4631      	mov	r1, r6
 80029ac:	4642      	mov	r2, r8
 80029ae:	4628      	mov	r0, r5
 80029b0:	47b8      	blx	r7
 80029b2:	3001      	adds	r0, #1
 80029b4:	d1c0      	bne.n	8002938 <_printf_float+0x2f4>
 80029b6:	e6a0      	b.n	80026fa <_printf_float+0xb6>
 80029b8:	2301      	movs	r3, #1
 80029ba:	4631      	mov	r1, r6
 80029bc:	4628      	mov	r0, r5
 80029be:	920b      	str	r2, [sp, #44]	; 0x2c
 80029c0:	47b8      	blx	r7
 80029c2:	3001      	adds	r0, #1
 80029c4:	f43f ae99 	beq.w	80026fa <_printf_float+0xb6>
 80029c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80029ca:	f10b 0b01 	add.w	fp, fp, #1
 80029ce:	e7b9      	b.n	8002944 <_printf_float+0x300>
 80029d0:	4631      	mov	r1, r6
 80029d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80029d6:	4628      	mov	r0, r5
 80029d8:	47b8      	blx	r7
 80029da:	3001      	adds	r0, #1
 80029dc:	d1bf      	bne.n	800295e <_printf_float+0x31a>
 80029de:	e68c      	b.n	80026fa <_printf_float+0xb6>
 80029e0:	464b      	mov	r3, r9
 80029e2:	4631      	mov	r1, r6
 80029e4:	4628      	mov	r0, r5
 80029e6:	eb08 020a 	add.w	r2, r8, sl
 80029ea:	47b8      	blx	r7
 80029ec:	3001      	adds	r0, #1
 80029ee:	d1c2      	bne.n	8002976 <_printf_float+0x332>
 80029f0:	e683      	b.n	80026fa <_printf_float+0xb6>
 80029f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80029f4:	2a01      	cmp	r2, #1
 80029f6:	dc01      	bgt.n	80029fc <_printf_float+0x3b8>
 80029f8:	07db      	lsls	r3, r3, #31
 80029fa:	d537      	bpl.n	8002a6c <_printf_float+0x428>
 80029fc:	2301      	movs	r3, #1
 80029fe:	4642      	mov	r2, r8
 8002a00:	4631      	mov	r1, r6
 8002a02:	4628      	mov	r0, r5
 8002a04:	47b8      	blx	r7
 8002a06:	3001      	adds	r0, #1
 8002a08:	f43f ae77 	beq.w	80026fa <_printf_float+0xb6>
 8002a0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002a10:	4631      	mov	r1, r6
 8002a12:	4628      	mov	r0, r5
 8002a14:	47b8      	blx	r7
 8002a16:	3001      	adds	r0, #1
 8002a18:	f43f ae6f 	beq.w	80026fa <_printf_float+0xb6>
 8002a1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002a20:	2200      	movs	r2, #0
 8002a22:	2300      	movs	r3, #0
 8002a24:	f7fd ffc0 	bl	80009a8 <__aeabi_dcmpeq>
 8002a28:	b9d8      	cbnz	r0, 8002a62 <_printf_float+0x41e>
 8002a2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a2c:	f108 0201 	add.w	r2, r8, #1
 8002a30:	3b01      	subs	r3, #1
 8002a32:	4631      	mov	r1, r6
 8002a34:	4628      	mov	r0, r5
 8002a36:	47b8      	blx	r7
 8002a38:	3001      	adds	r0, #1
 8002a3a:	d10e      	bne.n	8002a5a <_printf_float+0x416>
 8002a3c:	e65d      	b.n	80026fa <_printf_float+0xb6>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	464a      	mov	r2, r9
 8002a42:	4631      	mov	r1, r6
 8002a44:	4628      	mov	r0, r5
 8002a46:	47b8      	blx	r7
 8002a48:	3001      	adds	r0, #1
 8002a4a:	f43f ae56 	beq.w	80026fa <_printf_float+0xb6>
 8002a4e:	f108 0801 	add.w	r8, r8, #1
 8002a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a54:	3b01      	subs	r3, #1
 8002a56:	4543      	cmp	r3, r8
 8002a58:	dcf1      	bgt.n	8002a3e <_printf_float+0x3fa>
 8002a5a:	4653      	mov	r3, sl
 8002a5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002a60:	e6e0      	b.n	8002824 <_printf_float+0x1e0>
 8002a62:	f04f 0800 	mov.w	r8, #0
 8002a66:	f104 091a 	add.w	r9, r4, #26
 8002a6a:	e7f2      	b.n	8002a52 <_printf_float+0x40e>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	4642      	mov	r2, r8
 8002a70:	e7df      	b.n	8002a32 <_printf_float+0x3ee>
 8002a72:	2301      	movs	r3, #1
 8002a74:	464a      	mov	r2, r9
 8002a76:	4631      	mov	r1, r6
 8002a78:	4628      	mov	r0, r5
 8002a7a:	47b8      	blx	r7
 8002a7c:	3001      	adds	r0, #1
 8002a7e:	f43f ae3c 	beq.w	80026fa <_printf_float+0xb6>
 8002a82:	f108 0801 	add.w	r8, r8, #1
 8002a86:	68e3      	ldr	r3, [r4, #12]
 8002a88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002a8a:	1a5b      	subs	r3, r3, r1
 8002a8c:	4543      	cmp	r3, r8
 8002a8e:	dcf0      	bgt.n	8002a72 <_printf_float+0x42e>
 8002a90:	e6fd      	b.n	800288e <_printf_float+0x24a>
 8002a92:	f04f 0800 	mov.w	r8, #0
 8002a96:	f104 0919 	add.w	r9, r4, #25
 8002a9a:	e7f4      	b.n	8002a86 <_printf_float+0x442>

08002a9c <_printf_common>:
 8002a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aa0:	4616      	mov	r6, r2
 8002aa2:	4699      	mov	r9, r3
 8002aa4:	688a      	ldr	r2, [r1, #8]
 8002aa6:	690b      	ldr	r3, [r1, #16]
 8002aa8:	4607      	mov	r7, r0
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	bfb8      	it	lt
 8002aae:	4613      	movlt	r3, r2
 8002ab0:	6033      	str	r3, [r6, #0]
 8002ab2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ab6:	460c      	mov	r4, r1
 8002ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002abc:	b10a      	cbz	r2, 8002ac2 <_printf_common+0x26>
 8002abe:	3301      	adds	r3, #1
 8002ac0:	6033      	str	r3, [r6, #0]
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	0699      	lsls	r1, r3, #26
 8002ac6:	bf42      	ittt	mi
 8002ac8:	6833      	ldrmi	r3, [r6, #0]
 8002aca:	3302      	addmi	r3, #2
 8002acc:	6033      	strmi	r3, [r6, #0]
 8002ace:	6825      	ldr	r5, [r4, #0]
 8002ad0:	f015 0506 	ands.w	r5, r5, #6
 8002ad4:	d106      	bne.n	8002ae4 <_printf_common+0x48>
 8002ad6:	f104 0a19 	add.w	sl, r4, #25
 8002ada:	68e3      	ldr	r3, [r4, #12]
 8002adc:	6832      	ldr	r2, [r6, #0]
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	42ab      	cmp	r3, r5
 8002ae2:	dc28      	bgt.n	8002b36 <_printf_common+0x9a>
 8002ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ae8:	1e13      	subs	r3, r2, #0
 8002aea:	6822      	ldr	r2, [r4, #0]
 8002aec:	bf18      	it	ne
 8002aee:	2301      	movne	r3, #1
 8002af0:	0692      	lsls	r2, r2, #26
 8002af2:	d42d      	bmi.n	8002b50 <_printf_common+0xb4>
 8002af4:	4649      	mov	r1, r9
 8002af6:	4638      	mov	r0, r7
 8002af8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002afc:	47c0      	blx	r8
 8002afe:	3001      	adds	r0, #1
 8002b00:	d020      	beq.n	8002b44 <_printf_common+0xa8>
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	68e5      	ldr	r5, [r4, #12]
 8002b06:	f003 0306 	and.w	r3, r3, #6
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	bf18      	it	ne
 8002b0e:	2500      	movne	r5, #0
 8002b10:	6832      	ldr	r2, [r6, #0]
 8002b12:	f04f 0600 	mov.w	r6, #0
 8002b16:	68a3      	ldr	r3, [r4, #8]
 8002b18:	bf08      	it	eq
 8002b1a:	1aad      	subeq	r5, r5, r2
 8002b1c:	6922      	ldr	r2, [r4, #16]
 8002b1e:	bf08      	it	eq
 8002b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b24:	4293      	cmp	r3, r2
 8002b26:	bfc4      	itt	gt
 8002b28:	1a9b      	subgt	r3, r3, r2
 8002b2a:	18ed      	addgt	r5, r5, r3
 8002b2c:	341a      	adds	r4, #26
 8002b2e:	42b5      	cmp	r5, r6
 8002b30:	d11a      	bne.n	8002b68 <_printf_common+0xcc>
 8002b32:	2000      	movs	r0, #0
 8002b34:	e008      	b.n	8002b48 <_printf_common+0xac>
 8002b36:	2301      	movs	r3, #1
 8002b38:	4652      	mov	r2, sl
 8002b3a:	4649      	mov	r1, r9
 8002b3c:	4638      	mov	r0, r7
 8002b3e:	47c0      	blx	r8
 8002b40:	3001      	adds	r0, #1
 8002b42:	d103      	bne.n	8002b4c <_printf_common+0xb0>
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b4c:	3501      	adds	r5, #1
 8002b4e:	e7c4      	b.n	8002ada <_printf_common+0x3e>
 8002b50:	2030      	movs	r0, #48	; 0x30
 8002b52:	18e1      	adds	r1, r4, r3
 8002b54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b5e:	4422      	add	r2, r4
 8002b60:	3302      	adds	r3, #2
 8002b62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b66:	e7c5      	b.n	8002af4 <_printf_common+0x58>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	4622      	mov	r2, r4
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	4638      	mov	r0, r7
 8002b70:	47c0      	blx	r8
 8002b72:	3001      	adds	r0, #1
 8002b74:	d0e6      	beq.n	8002b44 <_printf_common+0xa8>
 8002b76:	3601      	adds	r6, #1
 8002b78:	e7d9      	b.n	8002b2e <_printf_common+0x92>
	...

08002b7c <_printf_i>:
 8002b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b80:	7e0f      	ldrb	r7, [r1, #24]
 8002b82:	4691      	mov	r9, r2
 8002b84:	2f78      	cmp	r7, #120	; 0x78
 8002b86:	4680      	mov	r8, r0
 8002b88:	460c      	mov	r4, r1
 8002b8a:	469a      	mov	sl, r3
 8002b8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b92:	d807      	bhi.n	8002ba4 <_printf_i+0x28>
 8002b94:	2f62      	cmp	r7, #98	; 0x62
 8002b96:	d80a      	bhi.n	8002bae <_printf_i+0x32>
 8002b98:	2f00      	cmp	r7, #0
 8002b9a:	f000 80d9 	beq.w	8002d50 <_printf_i+0x1d4>
 8002b9e:	2f58      	cmp	r7, #88	; 0x58
 8002ba0:	f000 80a4 	beq.w	8002cec <_printf_i+0x170>
 8002ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002bac:	e03a      	b.n	8002c24 <_printf_i+0xa8>
 8002bae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002bb2:	2b15      	cmp	r3, #21
 8002bb4:	d8f6      	bhi.n	8002ba4 <_printf_i+0x28>
 8002bb6:	a101      	add	r1, pc, #4	; (adr r1, 8002bbc <_printf_i+0x40>)
 8002bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002bbc:	08002c15 	.word	0x08002c15
 8002bc0:	08002c29 	.word	0x08002c29
 8002bc4:	08002ba5 	.word	0x08002ba5
 8002bc8:	08002ba5 	.word	0x08002ba5
 8002bcc:	08002ba5 	.word	0x08002ba5
 8002bd0:	08002ba5 	.word	0x08002ba5
 8002bd4:	08002c29 	.word	0x08002c29
 8002bd8:	08002ba5 	.word	0x08002ba5
 8002bdc:	08002ba5 	.word	0x08002ba5
 8002be0:	08002ba5 	.word	0x08002ba5
 8002be4:	08002ba5 	.word	0x08002ba5
 8002be8:	08002d37 	.word	0x08002d37
 8002bec:	08002c59 	.word	0x08002c59
 8002bf0:	08002d19 	.word	0x08002d19
 8002bf4:	08002ba5 	.word	0x08002ba5
 8002bf8:	08002ba5 	.word	0x08002ba5
 8002bfc:	08002d59 	.word	0x08002d59
 8002c00:	08002ba5 	.word	0x08002ba5
 8002c04:	08002c59 	.word	0x08002c59
 8002c08:	08002ba5 	.word	0x08002ba5
 8002c0c:	08002ba5 	.word	0x08002ba5
 8002c10:	08002d21 	.word	0x08002d21
 8002c14:	682b      	ldr	r3, [r5, #0]
 8002c16:	1d1a      	adds	r2, r3, #4
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	602a      	str	r2, [r5, #0]
 8002c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0a4      	b.n	8002d72 <_printf_i+0x1f6>
 8002c28:	6820      	ldr	r0, [r4, #0]
 8002c2a:	6829      	ldr	r1, [r5, #0]
 8002c2c:	0606      	lsls	r6, r0, #24
 8002c2e:	f101 0304 	add.w	r3, r1, #4
 8002c32:	d50a      	bpl.n	8002c4a <_printf_i+0xce>
 8002c34:	680e      	ldr	r6, [r1, #0]
 8002c36:	602b      	str	r3, [r5, #0]
 8002c38:	2e00      	cmp	r6, #0
 8002c3a:	da03      	bge.n	8002c44 <_printf_i+0xc8>
 8002c3c:	232d      	movs	r3, #45	; 0x2d
 8002c3e:	4276      	negs	r6, r6
 8002c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c44:	230a      	movs	r3, #10
 8002c46:	485e      	ldr	r0, [pc, #376]	; (8002dc0 <_printf_i+0x244>)
 8002c48:	e019      	b.n	8002c7e <_printf_i+0x102>
 8002c4a:	680e      	ldr	r6, [r1, #0]
 8002c4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c50:	602b      	str	r3, [r5, #0]
 8002c52:	bf18      	it	ne
 8002c54:	b236      	sxthne	r6, r6
 8002c56:	e7ef      	b.n	8002c38 <_printf_i+0xbc>
 8002c58:	682b      	ldr	r3, [r5, #0]
 8002c5a:	6820      	ldr	r0, [r4, #0]
 8002c5c:	1d19      	adds	r1, r3, #4
 8002c5e:	6029      	str	r1, [r5, #0]
 8002c60:	0601      	lsls	r1, r0, #24
 8002c62:	d501      	bpl.n	8002c68 <_printf_i+0xec>
 8002c64:	681e      	ldr	r6, [r3, #0]
 8002c66:	e002      	b.n	8002c6e <_printf_i+0xf2>
 8002c68:	0646      	lsls	r6, r0, #25
 8002c6a:	d5fb      	bpl.n	8002c64 <_printf_i+0xe8>
 8002c6c:	881e      	ldrh	r6, [r3, #0]
 8002c6e:	2f6f      	cmp	r7, #111	; 0x6f
 8002c70:	bf0c      	ite	eq
 8002c72:	2308      	moveq	r3, #8
 8002c74:	230a      	movne	r3, #10
 8002c76:	4852      	ldr	r0, [pc, #328]	; (8002dc0 <_printf_i+0x244>)
 8002c78:	2100      	movs	r1, #0
 8002c7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c7e:	6865      	ldr	r5, [r4, #4]
 8002c80:	2d00      	cmp	r5, #0
 8002c82:	bfa8      	it	ge
 8002c84:	6821      	ldrge	r1, [r4, #0]
 8002c86:	60a5      	str	r5, [r4, #8]
 8002c88:	bfa4      	itt	ge
 8002c8a:	f021 0104 	bicge.w	r1, r1, #4
 8002c8e:	6021      	strge	r1, [r4, #0]
 8002c90:	b90e      	cbnz	r6, 8002c96 <_printf_i+0x11a>
 8002c92:	2d00      	cmp	r5, #0
 8002c94:	d04d      	beq.n	8002d32 <_printf_i+0x1b6>
 8002c96:	4615      	mov	r5, r2
 8002c98:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c9c:	fb03 6711 	mls	r7, r3, r1, r6
 8002ca0:	5dc7      	ldrb	r7, [r0, r7]
 8002ca2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ca6:	4637      	mov	r7, r6
 8002ca8:	42bb      	cmp	r3, r7
 8002caa:	460e      	mov	r6, r1
 8002cac:	d9f4      	bls.n	8002c98 <_printf_i+0x11c>
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d10b      	bne.n	8002cca <_printf_i+0x14e>
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	07de      	lsls	r6, r3, #31
 8002cb6:	d508      	bpl.n	8002cca <_printf_i+0x14e>
 8002cb8:	6923      	ldr	r3, [r4, #16]
 8002cba:	6861      	ldr	r1, [r4, #4]
 8002cbc:	4299      	cmp	r1, r3
 8002cbe:	bfde      	ittt	le
 8002cc0:	2330      	movle	r3, #48	; 0x30
 8002cc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002cc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002cca:	1b52      	subs	r2, r2, r5
 8002ccc:	6122      	str	r2, [r4, #16]
 8002cce:	464b      	mov	r3, r9
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	4640      	mov	r0, r8
 8002cd4:	f8cd a000 	str.w	sl, [sp]
 8002cd8:	aa03      	add	r2, sp, #12
 8002cda:	f7ff fedf 	bl	8002a9c <_printf_common>
 8002cde:	3001      	adds	r0, #1
 8002ce0:	d14c      	bne.n	8002d7c <_printf_i+0x200>
 8002ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce6:	b004      	add	sp, #16
 8002ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cec:	4834      	ldr	r0, [pc, #208]	; (8002dc0 <_printf_i+0x244>)
 8002cee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002cf2:	6829      	ldr	r1, [r5, #0]
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	f851 6b04 	ldr.w	r6, [r1], #4
 8002cfa:	6029      	str	r1, [r5, #0]
 8002cfc:	061d      	lsls	r5, r3, #24
 8002cfe:	d514      	bpl.n	8002d2a <_printf_i+0x1ae>
 8002d00:	07df      	lsls	r7, r3, #31
 8002d02:	bf44      	itt	mi
 8002d04:	f043 0320 	orrmi.w	r3, r3, #32
 8002d08:	6023      	strmi	r3, [r4, #0]
 8002d0a:	b91e      	cbnz	r6, 8002d14 <_printf_i+0x198>
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	f023 0320 	bic.w	r3, r3, #32
 8002d12:	6023      	str	r3, [r4, #0]
 8002d14:	2310      	movs	r3, #16
 8002d16:	e7af      	b.n	8002c78 <_printf_i+0xfc>
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	f043 0320 	orr.w	r3, r3, #32
 8002d1e:	6023      	str	r3, [r4, #0]
 8002d20:	2378      	movs	r3, #120	; 0x78
 8002d22:	4828      	ldr	r0, [pc, #160]	; (8002dc4 <_printf_i+0x248>)
 8002d24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d28:	e7e3      	b.n	8002cf2 <_printf_i+0x176>
 8002d2a:	0659      	lsls	r1, r3, #25
 8002d2c:	bf48      	it	mi
 8002d2e:	b2b6      	uxthmi	r6, r6
 8002d30:	e7e6      	b.n	8002d00 <_printf_i+0x184>
 8002d32:	4615      	mov	r5, r2
 8002d34:	e7bb      	b.n	8002cae <_printf_i+0x132>
 8002d36:	682b      	ldr	r3, [r5, #0]
 8002d38:	6826      	ldr	r6, [r4, #0]
 8002d3a:	1d18      	adds	r0, r3, #4
 8002d3c:	6961      	ldr	r1, [r4, #20]
 8002d3e:	6028      	str	r0, [r5, #0]
 8002d40:	0635      	lsls	r5, r6, #24
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	d501      	bpl.n	8002d4a <_printf_i+0x1ce>
 8002d46:	6019      	str	r1, [r3, #0]
 8002d48:	e002      	b.n	8002d50 <_printf_i+0x1d4>
 8002d4a:	0670      	lsls	r0, r6, #25
 8002d4c:	d5fb      	bpl.n	8002d46 <_printf_i+0x1ca>
 8002d4e:	8019      	strh	r1, [r3, #0]
 8002d50:	2300      	movs	r3, #0
 8002d52:	4615      	mov	r5, r2
 8002d54:	6123      	str	r3, [r4, #16]
 8002d56:	e7ba      	b.n	8002cce <_printf_i+0x152>
 8002d58:	682b      	ldr	r3, [r5, #0]
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	1d1a      	adds	r2, r3, #4
 8002d5e:	602a      	str	r2, [r5, #0]
 8002d60:	681d      	ldr	r5, [r3, #0]
 8002d62:	6862      	ldr	r2, [r4, #4]
 8002d64:	4628      	mov	r0, r5
 8002d66:	f000 fed5 	bl	8003b14 <memchr>
 8002d6a:	b108      	cbz	r0, 8002d70 <_printf_i+0x1f4>
 8002d6c:	1b40      	subs	r0, r0, r5
 8002d6e:	6060      	str	r0, [r4, #4]
 8002d70:	6863      	ldr	r3, [r4, #4]
 8002d72:	6123      	str	r3, [r4, #16]
 8002d74:	2300      	movs	r3, #0
 8002d76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d7a:	e7a8      	b.n	8002cce <_printf_i+0x152>
 8002d7c:	462a      	mov	r2, r5
 8002d7e:	4649      	mov	r1, r9
 8002d80:	4640      	mov	r0, r8
 8002d82:	6923      	ldr	r3, [r4, #16]
 8002d84:	47d0      	blx	sl
 8002d86:	3001      	adds	r0, #1
 8002d88:	d0ab      	beq.n	8002ce2 <_printf_i+0x166>
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	079b      	lsls	r3, r3, #30
 8002d8e:	d413      	bmi.n	8002db8 <_printf_i+0x23c>
 8002d90:	68e0      	ldr	r0, [r4, #12]
 8002d92:	9b03      	ldr	r3, [sp, #12]
 8002d94:	4298      	cmp	r0, r3
 8002d96:	bfb8      	it	lt
 8002d98:	4618      	movlt	r0, r3
 8002d9a:	e7a4      	b.n	8002ce6 <_printf_i+0x16a>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	4632      	mov	r2, r6
 8002da0:	4649      	mov	r1, r9
 8002da2:	4640      	mov	r0, r8
 8002da4:	47d0      	blx	sl
 8002da6:	3001      	adds	r0, #1
 8002da8:	d09b      	beq.n	8002ce2 <_printf_i+0x166>
 8002daa:	3501      	adds	r5, #1
 8002dac:	68e3      	ldr	r3, [r4, #12]
 8002dae:	9903      	ldr	r1, [sp, #12]
 8002db0:	1a5b      	subs	r3, r3, r1
 8002db2:	42ab      	cmp	r3, r5
 8002db4:	dcf2      	bgt.n	8002d9c <_printf_i+0x220>
 8002db6:	e7eb      	b.n	8002d90 <_printf_i+0x214>
 8002db8:	2500      	movs	r5, #0
 8002dba:	f104 0619 	add.w	r6, r4, #25
 8002dbe:	e7f5      	b.n	8002dac <_printf_i+0x230>
 8002dc0:	08005344 	.word	0x08005344
 8002dc4:	08005355 	.word	0x08005355

08002dc8 <siprintf>:
 8002dc8:	b40e      	push	{r1, r2, r3}
 8002dca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002dce:	b500      	push	{lr}
 8002dd0:	b09c      	sub	sp, #112	; 0x70
 8002dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8002dd4:	9002      	str	r0, [sp, #8]
 8002dd6:	9006      	str	r0, [sp, #24]
 8002dd8:	9107      	str	r1, [sp, #28]
 8002dda:	9104      	str	r1, [sp, #16]
 8002ddc:	4808      	ldr	r0, [pc, #32]	; (8002e00 <siprintf+0x38>)
 8002dde:	4909      	ldr	r1, [pc, #36]	; (8002e04 <siprintf+0x3c>)
 8002de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002de4:	9105      	str	r1, [sp, #20]
 8002de6:	6800      	ldr	r0, [r0, #0]
 8002de8:	a902      	add	r1, sp, #8
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	f001 fb7c 	bl	80044e8 <_svfiprintf_r>
 8002df0:	2200      	movs	r2, #0
 8002df2:	9b02      	ldr	r3, [sp, #8]
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	b01c      	add	sp, #112	; 0x70
 8002df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dfc:	b003      	add	sp, #12
 8002dfe:	4770      	bx	lr
 8002e00:	2000000c 	.word	0x2000000c
 8002e04:	ffff0208 	.word	0xffff0208

08002e08 <quorem>:
 8002e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e0c:	6903      	ldr	r3, [r0, #16]
 8002e0e:	690c      	ldr	r4, [r1, #16]
 8002e10:	4607      	mov	r7, r0
 8002e12:	42a3      	cmp	r3, r4
 8002e14:	f2c0 8082 	blt.w	8002f1c <quorem+0x114>
 8002e18:	3c01      	subs	r4, #1
 8002e1a:	f100 0514 	add.w	r5, r0, #20
 8002e1e:	f101 0814 	add.w	r8, r1, #20
 8002e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002e2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002e30:	3301      	adds	r3, #1
 8002e32:	429a      	cmp	r2, r3
 8002e34:	fbb2 f6f3 	udiv	r6, r2, r3
 8002e38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002e3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002e40:	d331      	bcc.n	8002ea6 <quorem+0x9e>
 8002e42:	f04f 0e00 	mov.w	lr, #0
 8002e46:	4640      	mov	r0, r8
 8002e48:	46ac      	mov	ip, r5
 8002e4a:	46f2      	mov	sl, lr
 8002e4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8002e50:	b293      	uxth	r3, r2
 8002e52:	fb06 e303 	mla	r3, r6, r3, lr
 8002e56:	0c12      	lsrs	r2, r2, #16
 8002e58:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	fb06 e202 	mla	r2, r6, r2, lr
 8002e62:	ebaa 0303 	sub.w	r3, sl, r3
 8002e66:	f8dc a000 	ldr.w	sl, [ip]
 8002e6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002e6e:	fa1f fa8a 	uxth.w	sl, sl
 8002e72:	4453      	add	r3, sl
 8002e74:	f8dc a000 	ldr.w	sl, [ip]
 8002e78:	b292      	uxth	r2, r2
 8002e7a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002e7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e88:	4581      	cmp	r9, r0
 8002e8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002e8e:	f84c 3b04 	str.w	r3, [ip], #4
 8002e92:	d2db      	bcs.n	8002e4c <quorem+0x44>
 8002e94:	f855 300b 	ldr.w	r3, [r5, fp]
 8002e98:	b92b      	cbnz	r3, 8002ea6 <quorem+0x9e>
 8002e9a:	9b01      	ldr	r3, [sp, #4]
 8002e9c:	3b04      	subs	r3, #4
 8002e9e:	429d      	cmp	r5, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	d32f      	bcc.n	8002f04 <quorem+0xfc>
 8002ea4:	613c      	str	r4, [r7, #16]
 8002ea6:	4638      	mov	r0, r7
 8002ea8:	f001 f8ce 	bl	8004048 <__mcmp>
 8002eac:	2800      	cmp	r0, #0
 8002eae:	db25      	blt.n	8002efc <quorem+0xf4>
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	f04f 0c00 	mov.w	ip, #0
 8002eb6:	3601      	adds	r6, #1
 8002eb8:	f858 1b04 	ldr.w	r1, [r8], #4
 8002ebc:	f8d0 e000 	ldr.w	lr, [r0]
 8002ec0:	b28b      	uxth	r3, r1
 8002ec2:	ebac 0303 	sub.w	r3, ip, r3
 8002ec6:	fa1f f28e 	uxth.w	r2, lr
 8002eca:	4413      	add	r3, r2
 8002ecc:	0c0a      	lsrs	r2, r1, #16
 8002ece:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002ed2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002edc:	45c1      	cmp	r9, r8
 8002ede:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002ee2:	f840 3b04 	str.w	r3, [r0], #4
 8002ee6:	d2e7      	bcs.n	8002eb8 <quorem+0xb0>
 8002ee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002eec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002ef0:	b922      	cbnz	r2, 8002efc <quorem+0xf4>
 8002ef2:	3b04      	subs	r3, #4
 8002ef4:	429d      	cmp	r5, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	d30a      	bcc.n	8002f10 <quorem+0x108>
 8002efa:	613c      	str	r4, [r7, #16]
 8002efc:	4630      	mov	r0, r6
 8002efe:	b003      	add	sp, #12
 8002f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	3b04      	subs	r3, #4
 8002f08:	2a00      	cmp	r2, #0
 8002f0a:	d1cb      	bne.n	8002ea4 <quorem+0x9c>
 8002f0c:	3c01      	subs	r4, #1
 8002f0e:	e7c6      	b.n	8002e9e <quorem+0x96>
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	3b04      	subs	r3, #4
 8002f14:	2a00      	cmp	r2, #0
 8002f16:	d1f0      	bne.n	8002efa <quorem+0xf2>
 8002f18:	3c01      	subs	r4, #1
 8002f1a:	e7eb      	b.n	8002ef4 <quorem+0xec>
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	e7ee      	b.n	8002efe <quorem+0xf6>

08002f20 <_dtoa_r>:
 8002f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f24:	4616      	mov	r6, r2
 8002f26:	461f      	mov	r7, r3
 8002f28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002f2a:	b099      	sub	sp, #100	; 0x64
 8002f2c:	4605      	mov	r5, r0
 8002f2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002f32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8002f36:	b974      	cbnz	r4, 8002f56 <_dtoa_r+0x36>
 8002f38:	2010      	movs	r0, #16
 8002f3a:	f000 fde3 	bl	8003b04 <malloc>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	6268      	str	r0, [r5, #36]	; 0x24
 8002f42:	b920      	cbnz	r0, 8002f4e <_dtoa_r+0x2e>
 8002f44:	21ea      	movs	r1, #234	; 0xea
 8002f46:	4ba8      	ldr	r3, [pc, #672]	; (80031e8 <_dtoa_r+0x2c8>)
 8002f48:	48a8      	ldr	r0, [pc, #672]	; (80031ec <_dtoa_r+0x2cc>)
 8002f4a:	f001 fbdd 	bl	8004708 <__assert_func>
 8002f4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002f52:	6004      	str	r4, [r0, #0]
 8002f54:	60c4      	str	r4, [r0, #12]
 8002f56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002f58:	6819      	ldr	r1, [r3, #0]
 8002f5a:	b151      	cbz	r1, 8002f72 <_dtoa_r+0x52>
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	2301      	movs	r3, #1
 8002f60:	4093      	lsls	r3, r2
 8002f62:	604a      	str	r2, [r1, #4]
 8002f64:	608b      	str	r3, [r1, #8]
 8002f66:	4628      	mov	r0, r5
 8002f68:	f000 fe30 	bl	8003bcc <_Bfree>
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	1e3b      	subs	r3, r7, #0
 8002f74:	bfaf      	iteee	ge
 8002f76:	2300      	movge	r3, #0
 8002f78:	2201      	movlt	r2, #1
 8002f7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002f7e:	9305      	strlt	r3, [sp, #20]
 8002f80:	bfa8      	it	ge
 8002f82:	f8c8 3000 	strge.w	r3, [r8]
 8002f86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002f8a:	4b99      	ldr	r3, [pc, #612]	; (80031f0 <_dtoa_r+0x2d0>)
 8002f8c:	bfb8      	it	lt
 8002f8e:	f8c8 2000 	strlt.w	r2, [r8]
 8002f92:	ea33 0309 	bics.w	r3, r3, r9
 8002f96:	d119      	bne.n	8002fcc <_dtoa_r+0xac>
 8002f98:	f242 730f 	movw	r3, #9999	; 0x270f
 8002f9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002fa4:	4333      	orrs	r3, r6
 8002fa6:	f000 857f 	beq.w	8003aa8 <_dtoa_r+0xb88>
 8002faa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002fac:	b953      	cbnz	r3, 8002fc4 <_dtoa_r+0xa4>
 8002fae:	4b91      	ldr	r3, [pc, #580]	; (80031f4 <_dtoa_r+0x2d4>)
 8002fb0:	e022      	b.n	8002ff8 <_dtoa_r+0xd8>
 8002fb2:	4b91      	ldr	r3, [pc, #580]	; (80031f8 <_dtoa_r+0x2d8>)
 8002fb4:	9303      	str	r3, [sp, #12]
 8002fb6:	3308      	adds	r3, #8
 8002fb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	9803      	ldr	r0, [sp, #12]
 8002fbe:	b019      	add	sp, #100	; 0x64
 8002fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fc4:	4b8b      	ldr	r3, [pc, #556]	; (80031f4 <_dtoa_r+0x2d4>)
 8002fc6:	9303      	str	r3, [sp, #12]
 8002fc8:	3303      	adds	r3, #3
 8002fca:	e7f5      	b.n	8002fb8 <_dtoa_r+0x98>
 8002fcc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002fd0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8002fd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f7fd fce4 	bl	80009a8 <__aeabi_dcmpeq>
 8002fe0:	4680      	mov	r8, r0
 8002fe2:	b158      	cbz	r0, 8002ffc <_dtoa_r+0xdc>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8558 	beq.w	8003aa2 <_dtoa_r+0xb82>
 8002ff2:	4882      	ldr	r0, [pc, #520]	; (80031fc <_dtoa_r+0x2dc>)
 8002ff4:	6018      	str	r0, [r3, #0]
 8002ff6:	1e43      	subs	r3, r0, #1
 8002ff8:	9303      	str	r3, [sp, #12]
 8002ffa:	e7df      	b.n	8002fbc <_dtoa_r+0x9c>
 8002ffc:	ab16      	add	r3, sp, #88	; 0x58
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	ab17      	add	r3, sp, #92	; 0x5c
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	4628      	mov	r0, r5
 8003006:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800300a:	f001 f8c5 	bl	8004198 <__d2b>
 800300e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003012:	4683      	mov	fp, r0
 8003014:	2c00      	cmp	r4, #0
 8003016:	d07f      	beq.n	8003118 <_dtoa_r+0x1f8>
 8003018:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800301c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800301e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003022:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003026:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800302a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800302e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003032:	2200      	movs	r2, #0
 8003034:	4b72      	ldr	r3, [pc, #456]	; (8003200 <_dtoa_r+0x2e0>)
 8003036:	f7fd f897 	bl	8000168 <__aeabi_dsub>
 800303a:	a365      	add	r3, pc, #404	; (adr r3, 80031d0 <_dtoa_r+0x2b0>)
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f7fd fa4a 	bl	80004d8 <__aeabi_dmul>
 8003044:	a364      	add	r3, pc, #400	; (adr r3, 80031d8 <_dtoa_r+0x2b8>)
 8003046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304a:	f7fd f88f 	bl	800016c <__adddf3>
 800304e:	4606      	mov	r6, r0
 8003050:	4620      	mov	r0, r4
 8003052:	460f      	mov	r7, r1
 8003054:	f7fd f9d6 	bl	8000404 <__aeabi_i2d>
 8003058:	a361      	add	r3, pc, #388	; (adr r3, 80031e0 <_dtoa_r+0x2c0>)
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	f7fd fa3b 	bl	80004d8 <__aeabi_dmul>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4630      	mov	r0, r6
 8003068:	4639      	mov	r1, r7
 800306a:	f7fd f87f 	bl	800016c <__adddf3>
 800306e:	4606      	mov	r6, r0
 8003070:	460f      	mov	r7, r1
 8003072:	f7fd fce1 	bl	8000a38 <__aeabi_d2iz>
 8003076:	2200      	movs	r2, #0
 8003078:	4682      	mov	sl, r0
 800307a:	2300      	movs	r3, #0
 800307c:	4630      	mov	r0, r6
 800307e:	4639      	mov	r1, r7
 8003080:	f7fd fc9c 	bl	80009bc <__aeabi_dcmplt>
 8003084:	b148      	cbz	r0, 800309a <_dtoa_r+0x17a>
 8003086:	4650      	mov	r0, sl
 8003088:	f7fd f9bc 	bl	8000404 <__aeabi_i2d>
 800308c:	4632      	mov	r2, r6
 800308e:	463b      	mov	r3, r7
 8003090:	f7fd fc8a 	bl	80009a8 <__aeabi_dcmpeq>
 8003094:	b908      	cbnz	r0, 800309a <_dtoa_r+0x17a>
 8003096:	f10a 3aff 	add.w	sl, sl, #4294967295
 800309a:	f1ba 0f16 	cmp.w	sl, #22
 800309e:	d858      	bhi.n	8003152 <_dtoa_r+0x232>
 80030a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80030a4:	4b57      	ldr	r3, [pc, #348]	; (8003204 <_dtoa_r+0x2e4>)
 80030a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80030aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ae:	f7fd fc85 	bl	80009bc <__aeabi_dcmplt>
 80030b2:	2800      	cmp	r0, #0
 80030b4:	d04f      	beq.n	8003156 <_dtoa_r+0x236>
 80030b6:	2300      	movs	r3, #0
 80030b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80030bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80030be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80030c0:	1b1c      	subs	r4, r3, r4
 80030c2:	1e63      	subs	r3, r4, #1
 80030c4:	9309      	str	r3, [sp, #36]	; 0x24
 80030c6:	bf49      	itett	mi
 80030c8:	f1c4 0301 	rsbmi	r3, r4, #1
 80030cc:	2300      	movpl	r3, #0
 80030ce:	9306      	strmi	r3, [sp, #24]
 80030d0:	2300      	movmi	r3, #0
 80030d2:	bf54      	ite	pl
 80030d4:	9306      	strpl	r3, [sp, #24]
 80030d6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80030d8:	f1ba 0f00 	cmp.w	sl, #0
 80030dc:	db3d      	blt.n	800315a <_dtoa_r+0x23a>
 80030de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030e0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80030e4:	4453      	add	r3, sl
 80030e6:	9309      	str	r3, [sp, #36]	; 0x24
 80030e8:	2300      	movs	r3, #0
 80030ea:	930a      	str	r3, [sp, #40]	; 0x28
 80030ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80030ee:	2b09      	cmp	r3, #9
 80030f0:	f200 808c 	bhi.w	800320c <_dtoa_r+0x2ec>
 80030f4:	2b05      	cmp	r3, #5
 80030f6:	bfc4      	itt	gt
 80030f8:	3b04      	subgt	r3, #4
 80030fa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80030fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80030fe:	bfc8      	it	gt
 8003100:	2400      	movgt	r4, #0
 8003102:	f1a3 0302 	sub.w	r3, r3, #2
 8003106:	bfd8      	it	le
 8003108:	2401      	movle	r4, #1
 800310a:	2b03      	cmp	r3, #3
 800310c:	f200 808a 	bhi.w	8003224 <_dtoa_r+0x304>
 8003110:	e8df f003 	tbb	[pc, r3]
 8003114:	5b4d4f2d 	.word	0x5b4d4f2d
 8003118:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800311c:	441c      	add	r4, r3
 800311e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003122:	2b20      	cmp	r3, #32
 8003124:	bfc3      	ittte	gt
 8003126:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800312a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800312e:	fa09 f303 	lslgt.w	r3, r9, r3
 8003132:	f1c3 0320 	rsble	r3, r3, #32
 8003136:	bfc6      	itte	gt
 8003138:	fa26 f000 	lsrgt.w	r0, r6, r0
 800313c:	4318      	orrgt	r0, r3
 800313e:	fa06 f003 	lslle.w	r0, r6, r3
 8003142:	f7fd f94f 	bl	80003e4 <__aeabi_ui2d>
 8003146:	2301      	movs	r3, #1
 8003148:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800314c:	3c01      	subs	r4, #1
 800314e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003150:	e76f      	b.n	8003032 <_dtoa_r+0x112>
 8003152:	2301      	movs	r3, #1
 8003154:	e7b2      	b.n	80030bc <_dtoa_r+0x19c>
 8003156:	900f      	str	r0, [sp, #60]	; 0x3c
 8003158:	e7b1      	b.n	80030be <_dtoa_r+0x19e>
 800315a:	9b06      	ldr	r3, [sp, #24]
 800315c:	eba3 030a 	sub.w	r3, r3, sl
 8003160:	9306      	str	r3, [sp, #24]
 8003162:	f1ca 0300 	rsb	r3, sl, #0
 8003166:	930a      	str	r3, [sp, #40]	; 0x28
 8003168:	2300      	movs	r3, #0
 800316a:	930e      	str	r3, [sp, #56]	; 0x38
 800316c:	e7be      	b.n	80030ec <_dtoa_r+0x1cc>
 800316e:	2300      	movs	r3, #0
 8003170:	930b      	str	r3, [sp, #44]	; 0x2c
 8003172:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003174:	2b00      	cmp	r3, #0
 8003176:	dc58      	bgt.n	800322a <_dtoa_r+0x30a>
 8003178:	f04f 0901 	mov.w	r9, #1
 800317c:	464b      	mov	r3, r9
 800317e:	f8cd 9020 	str.w	r9, [sp, #32]
 8003182:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003186:	2200      	movs	r2, #0
 8003188:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800318a:	6042      	str	r2, [r0, #4]
 800318c:	2204      	movs	r2, #4
 800318e:	f102 0614 	add.w	r6, r2, #20
 8003192:	429e      	cmp	r6, r3
 8003194:	6841      	ldr	r1, [r0, #4]
 8003196:	d94e      	bls.n	8003236 <_dtoa_r+0x316>
 8003198:	4628      	mov	r0, r5
 800319a:	f000 fcd7 	bl	8003b4c <_Balloc>
 800319e:	9003      	str	r0, [sp, #12]
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d14c      	bne.n	800323e <_dtoa_r+0x31e>
 80031a4:	4602      	mov	r2, r0
 80031a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80031aa:	4b17      	ldr	r3, [pc, #92]	; (8003208 <_dtoa_r+0x2e8>)
 80031ac:	e6cc      	b.n	8002f48 <_dtoa_r+0x28>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e7de      	b.n	8003170 <_dtoa_r+0x250>
 80031b2:	2300      	movs	r3, #0
 80031b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80031b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80031b8:	eb0a 0903 	add.w	r9, sl, r3
 80031bc:	f109 0301 	add.w	r3, r9, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	9308      	str	r3, [sp, #32]
 80031c4:	bfb8      	it	lt
 80031c6:	2301      	movlt	r3, #1
 80031c8:	e7dd      	b.n	8003186 <_dtoa_r+0x266>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e7f2      	b.n	80031b4 <_dtoa_r+0x294>
 80031ce:	bf00      	nop
 80031d0:	636f4361 	.word	0x636f4361
 80031d4:	3fd287a7 	.word	0x3fd287a7
 80031d8:	8b60c8b3 	.word	0x8b60c8b3
 80031dc:	3fc68a28 	.word	0x3fc68a28
 80031e0:	509f79fb 	.word	0x509f79fb
 80031e4:	3fd34413 	.word	0x3fd34413
 80031e8:	08005373 	.word	0x08005373
 80031ec:	0800538a 	.word	0x0800538a
 80031f0:	7ff00000 	.word	0x7ff00000
 80031f4:	0800536f 	.word	0x0800536f
 80031f8:	08005366 	.word	0x08005366
 80031fc:	080052f4 	.word	0x080052f4
 8003200:	3ff80000 	.word	0x3ff80000
 8003204:	08005480 	.word	0x08005480
 8003208:	080053e5 	.word	0x080053e5
 800320c:	2401      	movs	r4, #1
 800320e:	2300      	movs	r3, #0
 8003210:	940b      	str	r4, [sp, #44]	; 0x2c
 8003212:	9322      	str	r3, [sp, #136]	; 0x88
 8003214:	f04f 39ff 	mov.w	r9, #4294967295
 8003218:	2200      	movs	r2, #0
 800321a:	2312      	movs	r3, #18
 800321c:	f8cd 9020 	str.w	r9, [sp, #32]
 8003220:	9223      	str	r2, [sp, #140]	; 0x8c
 8003222:	e7b0      	b.n	8003186 <_dtoa_r+0x266>
 8003224:	2301      	movs	r3, #1
 8003226:	930b      	str	r3, [sp, #44]	; 0x2c
 8003228:	e7f4      	b.n	8003214 <_dtoa_r+0x2f4>
 800322a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800322e:	464b      	mov	r3, r9
 8003230:	f8cd 9020 	str.w	r9, [sp, #32]
 8003234:	e7a7      	b.n	8003186 <_dtoa_r+0x266>
 8003236:	3101      	adds	r1, #1
 8003238:	6041      	str	r1, [r0, #4]
 800323a:	0052      	lsls	r2, r2, #1
 800323c:	e7a7      	b.n	800318e <_dtoa_r+0x26e>
 800323e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003240:	9a03      	ldr	r2, [sp, #12]
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	9b08      	ldr	r3, [sp, #32]
 8003246:	2b0e      	cmp	r3, #14
 8003248:	f200 80a8 	bhi.w	800339c <_dtoa_r+0x47c>
 800324c:	2c00      	cmp	r4, #0
 800324e:	f000 80a5 	beq.w	800339c <_dtoa_r+0x47c>
 8003252:	f1ba 0f00 	cmp.w	sl, #0
 8003256:	dd34      	ble.n	80032c2 <_dtoa_r+0x3a2>
 8003258:	4a9a      	ldr	r2, [pc, #616]	; (80034c4 <_dtoa_r+0x5a4>)
 800325a:	f00a 030f 	and.w	r3, sl, #15
 800325e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003262:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003266:	e9d3 3400 	ldrd	r3, r4, [r3]
 800326a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800326e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8003272:	d016      	beq.n	80032a2 <_dtoa_r+0x382>
 8003274:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003278:	4b93      	ldr	r3, [pc, #588]	; (80034c8 <_dtoa_r+0x5a8>)
 800327a:	2703      	movs	r7, #3
 800327c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003280:	f7fd fa54 	bl	800072c <__aeabi_ddiv>
 8003284:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003288:	f004 040f 	and.w	r4, r4, #15
 800328c:	4e8e      	ldr	r6, [pc, #568]	; (80034c8 <_dtoa_r+0x5a8>)
 800328e:	b954      	cbnz	r4, 80032a6 <_dtoa_r+0x386>
 8003290:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003298:	f7fd fa48 	bl	800072c <__aeabi_ddiv>
 800329c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80032a0:	e029      	b.n	80032f6 <_dtoa_r+0x3d6>
 80032a2:	2702      	movs	r7, #2
 80032a4:	e7f2      	b.n	800328c <_dtoa_r+0x36c>
 80032a6:	07e1      	lsls	r1, r4, #31
 80032a8:	d508      	bpl.n	80032bc <_dtoa_r+0x39c>
 80032aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80032ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80032b2:	f7fd f911 	bl	80004d8 <__aeabi_dmul>
 80032b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80032ba:	3701      	adds	r7, #1
 80032bc:	1064      	asrs	r4, r4, #1
 80032be:	3608      	adds	r6, #8
 80032c0:	e7e5      	b.n	800328e <_dtoa_r+0x36e>
 80032c2:	f000 80a5 	beq.w	8003410 <_dtoa_r+0x4f0>
 80032c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80032ca:	f1ca 0400 	rsb	r4, sl, #0
 80032ce:	4b7d      	ldr	r3, [pc, #500]	; (80034c4 <_dtoa_r+0x5a4>)
 80032d0:	f004 020f 	and.w	r2, r4, #15
 80032d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f7fd f8fc 	bl	80004d8 <__aeabi_dmul>
 80032e0:	2702      	movs	r7, #2
 80032e2:	2300      	movs	r3, #0
 80032e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80032e8:	4e77      	ldr	r6, [pc, #476]	; (80034c8 <_dtoa_r+0x5a8>)
 80032ea:	1124      	asrs	r4, r4, #4
 80032ec:	2c00      	cmp	r4, #0
 80032ee:	f040 8084 	bne.w	80033fa <_dtoa_r+0x4da>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1d2      	bne.n	800329c <_dtoa_r+0x37c>
 80032f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 808b 	beq.w	8003414 <_dtoa_r+0x4f4>
 80032fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003302:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003306:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800330a:	2200      	movs	r2, #0
 800330c:	4b6f      	ldr	r3, [pc, #444]	; (80034cc <_dtoa_r+0x5ac>)
 800330e:	f7fd fb55 	bl	80009bc <__aeabi_dcmplt>
 8003312:	2800      	cmp	r0, #0
 8003314:	d07e      	beq.n	8003414 <_dtoa_r+0x4f4>
 8003316:	9b08      	ldr	r3, [sp, #32]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d07b      	beq.n	8003414 <_dtoa_r+0x4f4>
 800331c:	f1b9 0f00 	cmp.w	r9, #0
 8003320:	dd38      	ble.n	8003394 <_dtoa_r+0x474>
 8003322:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003326:	2200      	movs	r2, #0
 8003328:	4b69      	ldr	r3, [pc, #420]	; (80034d0 <_dtoa_r+0x5b0>)
 800332a:	f7fd f8d5 	bl	80004d8 <__aeabi_dmul>
 800332e:	464c      	mov	r4, r9
 8003330:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003334:	f10a 38ff 	add.w	r8, sl, #4294967295
 8003338:	3701      	adds	r7, #1
 800333a:	4638      	mov	r0, r7
 800333c:	f7fd f862 	bl	8000404 <__aeabi_i2d>
 8003340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003344:	f7fd f8c8 	bl	80004d8 <__aeabi_dmul>
 8003348:	2200      	movs	r2, #0
 800334a:	4b62      	ldr	r3, [pc, #392]	; (80034d4 <_dtoa_r+0x5b4>)
 800334c:	f7fc ff0e 	bl	800016c <__adddf3>
 8003350:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003354:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003358:	9611      	str	r6, [sp, #68]	; 0x44
 800335a:	2c00      	cmp	r4, #0
 800335c:	d15d      	bne.n	800341a <_dtoa_r+0x4fa>
 800335e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003362:	2200      	movs	r2, #0
 8003364:	4b5c      	ldr	r3, [pc, #368]	; (80034d8 <_dtoa_r+0x5b8>)
 8003366:	f7fc feff 	bl	8000168 <__aeabi_dsub>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003372:	4633      	mov	r3, r6
 8003374:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003376:	f7fd fb3f 	bl	80009f8 <__aeabi_dcmpgt>
 800337a:	2800      	cmp	r0, #0
 800337c:	f040 829c 	bne.w	80038b8 <_dtoa_r+0x998>
 8003380:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003384:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003386:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800338a:	f7fd fb17 	bl	80009bc <__aeabi_dcmplt>
 800338e:	2800      	cmp	r0, #0
 8003390:	f040 8290 	bne.w	80038b4 <_dtoa_r+0x994>
 8003394:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003398:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800339c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f2c0 8152 	blt.w	8003648 <_dtoa_r+0x728>
 80033a4:	f1ba 0f0e 	cmp.w	sl, #14
 80033a8:	f300 814e 	bgt.w	8003648 <_dtoa_r+0x728>
 80033ac:	4b45      	ldr	r3, [pc, #276]	; (80034c4 <_dtoa_r+0x5a4>)
 80033ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80033b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80033ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f280 80db 	bge.w	8003578 <_dtoa_r+0x658>
 80033c2:	9b08      	ldr	r3, [sp, #32]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f300 80d7 	bgt.w	8003578 <_dtoa_r+0x658>
 80033ca:	f040 8272 	bne.w	80038b2 <_dtoa_r+0x992>
 80033ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033d2:	2200      	movs	r2, #0
 80033d4:	4b40      	ldr	r3, [pc, #256]	; (80034d8 <_dtoa_r+0x5b8>)
 80033d6:	f7fd f87f 	bl	80004d8 <__aeabi_dmul>
 80033da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80033de:	f7fd fb01 	bl	80009e4 <__aeabi_dcmpge>
 80033e2:	9c08      	ldr	r4, [sp, #32]
 80033e4:	4626      	mov	r6, r4
 80033e6:	2800      	cmp	r0, #0
 80033e8:	f040 8248 	bne.w	800387c <_dtoa_r+0x95c>
 80033ec:	2331      	movs	r3, #49	; 0x31
 80033ee:	9f03      	ldr	r7, [sp, #12]
 80033f0:	f10a 0a01 	add.w	sl, sl, #1
 80033f4:	f807 3b01 	strb.w	r3, [r7], #1
 80033f8:	e244      	b.n	8003884 <_dtoa_r+0x964>
 80033fa:	07e2      	lsls	r2, r4, #31
 80033fc:	d505      	bpl.n	800340a <_dtoa_r+0x4ea>
 80033fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003402:	f7fd f869 	bl	80004d8 <__aeabi_dmul>
 8003406:	2301      	movs	r3, #1
 8003408:	3701      	adds	r7, #1
 800340a:	1064      	asrs	r4, r4, #1
 800340c:	3608      	adds	r6, #8
 800340e:	e76d      	b.n	80032ec <_dtoa_r+0x3cc>
 8003410:	2702      	movs	r7, #2
 8003412:	e770      	b.n	80032f6 <_dtoa_r+0x3d6>
 8003414:	46d0      	mov	r8, sl
 8003416:	9c08      	ldr	r4, [sp, #32]
 8003418:	e78f      	b.n	800333a <_dtoa_r+0x41a>
 800341a:	9903      	ldr	r1, [sp, #12]
 800341c:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <_dtoa_r+0x5a4>)
 800341e:	4421      	add	r1, r4
 8003420:	9112      	str	r1, [sp, #72]	; 0x48
 8003422:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003424:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003428:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800342c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003430:	2900      	cmp	r1, #0
 8003432:	d055      	beq.n	80034e0 <_dtoa_r+0x5c0>
 8003434:	2000      	movs	r0, #0
 8003436:	4929      	ldr	r1, [pc, #164]	; (80034dc <_dtoa_r+0x5bc>)
 8003438:	f7fd f978 	bl	800072c <__aeabi_ddiv>
 800343c:	463b      	mov	r3, r7
 800343e:	4632      	mov	r2, r6
 8003440:	f7fc fe92 	bl	8000168 <__aeabi_dsub>
 8003444:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003448:	9f03      	ldr	r7, [sp, #12]
 800344a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800344e:	f7fd faf3 	bl	8000a38 <__aeabi_d2iz>
 8003452:	4604      	mov	r4, r0
 8003454:	f7fc ffd6 	bl	8000404 <__aeabi_i2d>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003460:	f7fc fe82 	bl	8000168 <__aeabi_dsub>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	3430      	adds	r4, #48	; 0x30
 800346a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800346e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003472:	f807 4b01 	strb.w	r4, [r7], #1
 8003476:	f7fd faa1 	bl	80009bc <__aeabi_dcmplt>
 800347a:	2800      	cmp	r0, #0
 800347c:	d174      	bne.n	8003568 <_dtoa_r+0x648>
 800347e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003482:	2000      	movs	r0, #0
 8003484:	4911      	ldr	r1, [pc, #68]	; (80034cc <_dtoa_r+0x5ac>)
 8003486:	f7fc fe6f 	bl	8000168 <__aeabi_dsub>
 800348a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800348e:	f7fd fa95 	bl	80009bc <__aeabi_dcmplt>
 8003492:	2800      	cmp	r0, #0
 8003494:	f040 80b7 	bne.w	8003606 <_dtoa_r+0x6e6>
 8003498:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800349a:	429f      	cmp	r7, r3
 800349c:	f43f af7a 	beq.w	8003394 <_dtoa_r+0x474>
 80034a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80034a4:	2200      	movs	r2, #0
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <_dtoa_r+0x5b0>)
 80034a8:	f7fd f816 	bl	80004d8 <__aeabi_dmul>
 80034ac:	2200      	movs	r2, #0
 80034ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80034b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <_dtoa_r+0x5b0>)
 80034b8:	f7fd f80e 	bl	80004d8 <__aeabi_dmul>
 80034bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80034c0:	e7c3      	b.n	800344a <_dtoa_r+0x52a>
 80034c2:	bf00      	nop
 80034c4:	08005480 	.word	0x08005480
 80034c8:	08005458 	.word	0x08005458
 80034cc:	3ff00000 	.word	0x3ff00000
 80034d0:	40240000 	.word	0x40240000
 80034d4:	401c0000 	.word	0x401c0000
 80034d8:	40140000 	.word	0x40140000
 80034dc:	3fe00000 	.word	0x3fe00000
 80034e0:	4630      	mov	r0, r6
 80034e2:	4639      	mov	r1, r7
 80034e4:	f7fc fff8 	bl	80004d8 <__aeabi_dmul>
 80034e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80034ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80034ee:	9c03      	ldr	r4, [sp, #12]
 80034f0:	9314      	str	r3, [sp, #80]	; 0x50
 80034f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80034f6:	f7fd fa9f 	bl	8000a38 <__aeabi_d2iz>
 80034fa:	9015      	str	r0, [sp, #84]	; 0x54
 80034fc:	f7fc ff82 	bl	8000404 <__aeabi_i2d>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003508:	f7fc fe2e 	bl	8000168 <__aeabi_dsub>
 800350c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800350e:	4606      	mov	r6, r0
 8003510:	3330      	adds	r3, #48	; 0x30
 8003512:	f804 3b01 	strb.w	r3, [r4], #1
 8003516:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003518:	460f      	mov	r7, r1
 800351a:	429c      	cmp	r4, r3
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	d124      	bne.n	800356c <_dtoa_r+0x64c>
 8003522:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003526:	4bb0      	ldr	r3, [pc, #704]	; (80037e8 <_dtoa_r+0x8c8>)
 8003528:	f7fc fe20 	bl	800016c <__adddf3>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4630      	mov	r0, r6
 8003532:	4639      	mov	r1, r7
 8003534:	f7fd fa60 	bl	80009f8 <__aeabi_dcmpgt>
 8003538:	2800      	cmp	r0, #0
 800353a:	d163      	bne.n	8003604 <_dtoa_r+0x6e4>
 800353c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003540:	2000      	movs	r0, #0
 8003542:	49a9      	ldr	r1, [pc, #676]	; (80037e8 <_dtoa_r+0x8c8>)
 8003544:	f7fc fe10 	bl	8000168 <__aeabi_dsub>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4630      	mov	r0, r6
 800354e:	4639      	mov	r1, r7
 8003550:	f7fd fa34 	bl	80009bc <__aeabi_dcmplt>
 8003554:	2800      	cmp	r0, #0
 8003556:	f43f af1d 	beq.w	8003394 <_dtoa_r+0x474>
 800355a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800355c:	1e7b      	subs	r3, r7, #1
 800355e:	9314      	str	r3, [sp, #80]	; 0x50
 8003560:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003564:	2b30      	cmp	r3, #48	; 0x30
 8003566:	d0f8      	beq.n	800355a <_dtoa_r+0x63a>
 8003568:	46c2      	mov	sl, r8
 800356a:	e03b      	b.n	80035e4 <_dtoa_r+0x6c4>
 800356c:	4b9f      	ldr	r3, [pc, #636]	; (80037ec <_dtoa_r+0x8cc>)
 800356e:	f7fc ffb3 	bl	80004d8 <__aeabi_dmul>
 8003572:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003576:	e7bc      	b.n	80034f2 <_dtoa_r+0x5d2>
 8003578:	9f03      	ldr	r7, [sp, #12]
 800357a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800357e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003582:	4640      	mov	r0, r8
 8003584:	4649      	mov	r1, r9
 8003586:	f7fd f8d1 	bl	800072c <__aeabi_ddiv>
 800358a:	f7fd fa55 	bl	8000a38 <__aeabi_d2iz>
 800358e:	4604      	mov	r4, r0
 8003590:	f7fc ff38 	bl	8000404 <__aeabi_i2d>
 8003594:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003598:	f7fc ff9e 	bl	80004d8 <__aeabi_dmul>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4640      	mov	r0, r8
 80035a2:	4649      	mov	r1, r9
 80035a4:	f7fc fde0 	bl	8000168 <__aeabi_dsub>
 80035a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80035ac:	f807 6b01 	strb.w	r6, [r7], #1
 80035b0:	9e03      	ldr	r6, [sp, #12]
 80035b2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80035b6:	1bbe      	subs	r6, r7, r6
 80035b8:	45b4      	cmp	ip, r6
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	d136      	bne.n	800362e <_dtoa_r+0x70e>
 80035c0:	f7fc fdd4 	bl	800016c <__adddf3>
 80035c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80035c8:	4680      	mov	r8, r0
 80035ca:	4689      	mov	r9, r1
 80035cc:	f7fd fa14 	bl	80009f8 <__aeabi_dcmpgt>
 80035d0:	bb58      	cbnz	r0, 800362a <_dtoa_r+0x70a>
 80035d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80035d6:	4640      	mov	r0, r8
 80035d8:	4649      	mov	r1, r9
 80035da:	f7fd f9e5 	bl	80009a8 <__aeabi_dcmpeq>
 80035de:	b108      	cbz	r0, 80035e4 <_dtoa_r+0x6c4>
 80035e0:	07e1      	lsls	r1, r4, #31
 80035e2:	d422      	bmi.n	800362a <_dtoa_r+0x70a>
 80035e4:	4628      	mov	r0, r5
 80035e6:	4659      	mov	r1, fp
 80035e8:	f000 faf0 	bl	8003bcc <_Bfree>
 80035ec:	2300      	movs	r3, #0
 80035ee:	703b      	strb	r3, [r7, #0]
 80035f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80035f2:	f10a 0001 	add.w	r0, sl, #1
 80035f6:	6018      	str	r0, [r3, #0]
 80035f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f43f acde 	beq.w	8002fbc <_dtoa_r+0x9c>
 8003600:	601f      	str	r7, [r3, #0]
 8003602:	e4db      	b.n	8002fbc <_dtoa_r+0x9c>
 8003604:	4627      	mov	r7, r4
 8003606:	463b      	mov	r3, r7
 8003608:	461f      	mov	r7, r3
 800360a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800360e:	2a39      	cmp	r2, #57	; 0x39
 8003610:	d107      	bne.n	8003622 <_dtoa_r+0x702>
 8003612:	9a03      	ldr	r2, [sp, #12]
 8003614:	429a      	cmp	r2, r3
 8003616:	d1f7      	bne.n	8003608 <_dtoa_r+0x6e8>
 8003618:	2230      	movs	r2, #48	; 0x30
 800361a:	9903      	ldr	r1, [sp, #12]
 800361c:	f108 0801 	add.w	r8, r8, #1
 8003620:	700a      	strb	r2, [r1, #0]
 8003622:	781a      	ldrb	r2, [r3, #0]
 8003624:	3201      	adds	r2, #1
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e79e      	b.n	8003568 <_dtoa_r+0x648>
 800362a:	46d0      	mov	r8, sl
 800362c:	e7eb      	b.n	8003606 <_dtoa_r+0x6e6>
 800362e:	2200      	movs	r2, #0
 8003630:	4b6e      	ldr	r3, [pc, #440]	; (80037ec <_dtoa_r+0x8cc>)
 8003632:	f7fc ff51 	bl	80004d8 <__aeabi_dmul>
 8003636:	2200      	movs	r2, #0
 8003638:	2300      	movs	r3, #0
 800363a:	4680      	mov	r8, r0
 800363c:	4689      	mov	r9, r1
 800363e:	f7fd f9b3 	bl	80009a8 <__aeabi_dcmpeq>
 8003642:	2800      	cmp	r0, #0
 8003644:	d09b      	beq.n	800357e <_dtoa_r+0x65e>
 8003646:	e7cd      	b.n	80035e4 <_dtoa_r+0x6c4>
 8003648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800364a:	2a00      	cmp	r2, #0
 800364c:	f000 80d0 	beq.w	80037f0 <_dtoa_r+0x8d0>
 8003650:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003652:	2a01      	cmp	r2, #1
 8003654:	f300 80ae 	bgt.w	80037b4 <_dtoa_r+0x894>
 8003658:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800365a:	2a00      	cmp	r2, #0
 800365c:	f000 80a6 	beq.w	80037ac <_dtoa_r+0x88c>
 8003660:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003664:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003666:	9f06      	ldr	r7, [sp, #24]
 8003668:	9a06      	ldr	r2, [sp, #24]
 800366a:	2101      	movs	r1, #1
 800366c:	441a      	add	r2, r3
 800366e:	9206      	str	r2, [sp, #24]
 8003670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003672:	4628      	mov	r0, r5
 8003674:	441a      	add	r2, r3
 8003676:	9209      	str	r2, [sp, #36]	; 0x24
 8003678:	f000 fb5e 	bl	8003d38 <__i2b>
 800367c:	4606      	mov	r6, r0
 800367e:	2f00      	cmp	r7, #0
 8003680:	dd0c      	ble.n	800369c <_dtoa_r+0x77c>
 8003682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003684:	2b00      	cmp	r3, #0
 8003686:	dd09      	ble.n	800369c <_dtoa_r+0x77c>
 8003688:	42bb      	cmp	r3, r7
 800368a:	bfa8      	it	ge
 800368c:	463b      	movge	r3, r7
 800368e:	9a06      	ldr	r2, [sp, #24]
 8003690:	1aff      	subs	r7, r7, r3
 8003692:	1ad2      	subs	r2, r2, r3
 8003694:	9206      	str	r2, [sp, #24]
 8003696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	9309      	str	r3, [sp, #36]	; 0x24
 800369c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800369e:	b1f3      	cbz	r3, 80036de <_dtoa_r+0x7be>
 80036a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 80a8 	beq.w	80037f8 <_dtoa_r+0x8d8>
 80036a8:	2c00      	cmp	r4, #0
 80036aa:	dd10      	ble.n	80036ce <_dtoa_r+0x7ae>
 80036ac:	4631      	mov	r1, r6
 80036ae:	4622      	mov	r2, r4
 80036b0:	4628      	mov	r0, r5
 80036b2:	f000 fbff 	bl	8003eb4 <__pow5mult>
 80036b6:	465a      	mov	r2, fp
 80036b8:	4601      	mov	r1, r0
 80036ba:	4606      	mov	r6, r0
 80036bc:	4628      	mov	r0, r5
 80036be:	f000 fb51 	bl	8003d64 <__multiply>
 80036c2:	4680      	mov	r8, r0
 80036c4:	4659      	mov	r1, fp
 80036c6:	4628      	mov	r0, r5
 80036c8:	f000 fa80 	bl	8003bcc <_Bfree>
 80036cc:	46c3      	mov	fp, r8
 80036ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036d0:	1b1a      	subs	r2, r3, r4
 80036d2:	d004      	beq.n	80036de <_dtoa_r+0x7be>
 80036d4:	4659      	mov	r1, fp
 80036d6:	4628      	mov	r0, r5
 80036d8:	f000 fbec 	bl	8003eb4 <__pow5mult>
 80036dc:	4683      	mov	fp, r0
 80036de:	2101      	movs	r1, #1
 80036e0:	4628      	mov	r0, r5
 80036e2:	f000 fb29 	bl	8003d38 <__i2b>
 80036e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036e8:	4604      	mov	r4, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f340 8086 	ble.w	80037fc <_dtoa_r+0x8dc>
 80036f0:	461a      	mov	r2, r3
 80036f2:	4601      	mov	r1, r0
 80036f4:	4628      	mov	r0, r5
 80036f6:	f000 fbdd 	bl	8003eb4 <__pow5mult>
 80036fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036fc:	4604      	mov	r4, r0
 80036fe:	2b01      	cmp	r3, #1
 8003700:	dd7f      	ble.n	8003802 <_dtoa_r+0x8e2>
 8003702:	f04f 0800 	mov.w	r8, #0
 8003706:	6923      	ldr	r3, [r4, #16]
 8003708:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800370c:	6918      	ldr	r0, [r3, #16]
 800370e:	f000 fac5 	bl	8003c9c <__hi0bits>
 8003712:	f1c0 0020 	rsb	r0, r0, #32
 8003716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003718:	4418      	add	r0, r3
 800371a:	f010 001f 	ands.w	r0, r0, #31
 800371e:	f000 8092 	beq.w	8003846 <_dtoa_r+0x926>
 8003722:	f1c0 0320 	rsb	r3, r0, #32
 8003726:	2b04      	cmp	r3, #4
 8003728:	f340 808a 	ble.w	8003840 <_dtoa_r+0x920>
 800372c:	f1c0 001c 	rsb	r0, r0, #28
 8003730:	9b06      	ldr	r3, [sp, #24]
 8003732:	4407      	add	r7, r0
 8003734:	4403      	add	r3, r0
 8003736:	9306      	str	r3, [sp, #24]
 8003738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800373a:	4403      	add	r3, r0
 800373c:	9309      	str	r3, [sp, #36]	; 0x24
 800373e:	9b06      	ldr	r3, [sp, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	dd05      	ble.n	8003750 <_dtoa_r+0x830>
 8003744:	4659      	mov	r1, fp
 8003746:	461a      	mov	r2, r3
 8003748:	4628      	mov	r0, r5
 800374a:	f000 fc0d 	bl	8003f68 <__lshift>
 800374e:	4683      	mov	fp, r0
 8003750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003752:	2b00      	cmp	r3, #0
 8003754:	dd05      	ble.n	8003762 <_dtoa_r+0x842>
 8003756:	4621      	mov	r1, r4
 8003758:	461a      	mov	r2, r3
 800375a:	4628      	mov	r0, r5
 800375c:	f000 fc04 	bl	8003f68 <__lshift>
 8003760:	4604      	mov	r4, r0
 8003762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d070      	beq.n	800384a <_dtoa_r+0x92a>
 8003768:	4621      	mov	r1, r4
 800376a:	4658      	mov	r0, fp
 800376c:	f000 fc6c 	bl	8004048 <__mcmp>
 8003770:	2800      	cmp	r0, #0
 8003772:	da6a      	bge.n	800384a <_dtoa_r+0x92a>
 8003774:	2300      	movs	r3, #0
 8003776:	4659      	mov	r1, fp
 8003778:	220a      	movs	r2, #10
 800377a:	4628      	mov	r0, r5
 800377c:	f000 fa48 	bl	8003c10 <__multadd>
 8003780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003782:	4683      	mov	fp, r0
 8003784:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 8194 	beq.w	8003ab6 <_dtoa_r+0xb96>
 800378e:	4631      	mov	r1, r6
 8003790:	2300      	movs	r3, #0
 8003792:	220a      	movs	r2, #10
 8003794:	4628      	mov	r0, r5
 8003796:	f000 fa3b 	bl	8003c10 <__multadd>
 800379a:	f1b9 0f00 	cmp.w	r9, #0
 800379e:	4606      	mov	r6, r0
 80037a0:	f300 8093 	bgt.w	80038ca <_dtoa_r+0x9aa>
 80037a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	dc57      	bgt.n	800385a <_dtoa_r+0x93a>
 80037aa:	e08e      	b.n	80038ca <_dtoa_r+0x9aa>
 80037ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80037ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80037b2:	e757      	b.n	8003664 <_dtoa_r+0x744>
 80037b4:	9b08      	ldr	r3, [sp, #32]
 80037b6:	1e5c      	subs	r4, r3, #1
 80037b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037ba:	42a3      	cmp	r3, r4
 80037bc:	bfb7      	itett	lt
 80037be:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80037c0:	1b1c      	subge	r4, r3, r4
 80037c2:	1ae2      	sublt	r2, r4, r3
 80037c4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80037c6:	bfbe      	ittt	lt
 80037c8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80037ca:	189b      	addlt	r3, r3, r2
 80037cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80037ce:	9b08      	ldr	r3, [sp, #32]
 80037d0:	bfb8      	it	lt
 80037d2:	2400      	movlt	r4, #0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bfbb      	ittet	lt
 80037d8:	9b06      	ldrlt	r3, [sp, #24]
 80037da:	9a08      	ldrlt	r2, [sp, #32]
 80037dc:	9f06      	ldrge	r7, [sp, #24]
 80037de:	1a9f      	sublt	r7, r3, r2
 80037e0:	bfac      	ite	ge
 80037e2:	9b08      	ldrge	r3, [sp, #32]
 80037e4:	2300      	movlt	r3, #0
 80037e6:	e73f      	b.n	8003668 <_dtoa_r+0x748>
 80037e8:	3fe00000 	.word	0x3fe00000
 80037ec:	40240000 	.word	0x40240000
 80037f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80037f2:	9f06      	ldr	r7, [sp, #24]
 80037f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80037f6:	e742      	b.n	800367e <_dtoa_r+0x75e>
 80037f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037fa:	e76b      	b.n	80036d4 <_dtoa_r+0x7b4>
 80037fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037fe:	2b01      	cmp	r3, #1
 8003800:	dc19      	bgt.n	8003836 <_dtoa_r+0x916>
 8003802:	9b04      	ldr	r3, [sp, #16]
 8003804:	b9bb      	cbnz	r3, 8003836 <_dtoa_r+0x916>
 8003806:	9b05      	ldr	r3, [sp, #20]
 8003808:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800380c:	b99b      	cbnz	r3, 8003836 <_dtoa_r+0x916>
 800380e:	9b05      	ldr	r3, [sp, #20]
 8003810:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003814:	0d1b      	lsrs	r3, r3, #20
 8003816:	051b      	lsls	r3, r3, #20
 8003818:	b183      	cbz	r3, 800383c <_dtoa_r+0x91c>
 800381a:	f04f 0801 	mov.w	r8, #1
 800381e:	9b06      	ldr	r3, [sp, #24]
 8003820:	3301      	adds	r3, #1
 8003822:	9306      	str	r3, [sp, #24]
 8003824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003826:	3301      	adds	r3, #1
 8003828:	9309      	str	r3, [sp, #36]	; 0x24
 800382a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800382c:	2b00      	cmp	r3, #0
 800382e:	f47f af6a 	bne.w	8003706 <_dtoa_r+0x7e6>
 8003832:	2001      	movs	r0, #1
 8003834:	e76f      	b.n	8003716 <_dtoa_r+0x7f6>
 8003836:	f04f 0800 	mov.w	r8, #0
 800383a:	e7f6      	b.n	800382a <_dtoa_r+0x90a>
 800383c:	4698      	mov	r8, r3
 800383e:	e7f4      	b.n	800382a <_dtoa_r+0x90a>
 8003840:	f43f af7d 	beq.w	800373e <_dtoa_r+0x81e>
 8003844:	4618      	mov	r0, r3
 8003846:	301c      	adds	r0, #28
 8003848:	e772      	b.n	8003730 <_dtoa_r+0x810>
 800384a:	9b08      	ldr	r3, [sp, #32]
 800384c:	2b00      	cmp	r3, #0
 800384e:	dc36      	bgt.n	80038be <_dtoa_r+0x99e>
 8003850:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003852:	2b02      	cmp	r3, #2
 8003854:	dd33      	ble.n	80038be <_dtoa_r+0x99e>
 8003856:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800385a:	f1b9 0f00 	cmp.w	r9, #0
 800385e:	d10d      	bne.n	800387c <_dtoa_r+0x95c>
 8003860:	4621      	mov	r1, r4
 8003862:	464b      	mov	r3, r9
 8003864:	2205      	movs	r2, #5
 8003866:	4628      	mov	r0, r5
 8003868:	f000 f9d2 	bl	8003c10 <__multadd>
 800386c:	4601      	mov	r1, r0
 800386e:	4604      	mov	r4, r0
 8003870:	4658      	mov	r0, fp
 8003872:	f000 fbe9 	bl	8004048 <__mcmp>
 8003876:	2800      	cmp	r0, #0
 8003878:	f73f adb8 	bgt.w	80033ec <_dtoa_r+0x4cc>
 800387c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800387e:	9f03      	ldr	r7, [sp, #12]
 8003880:	ea6f 0a03 	mvn.w	sl, r3
 8003884:	f04f 0800 	mov.w	r8, #0
 8003888:	4621      	mov	r1, r4
 800388a:	4628      	mov	r0, r5
 800388c:	f000 f99e 	bl	8003bcc <_Bfree>
 8003890:	2e00      	cmp	r6, #0
 8003892:	f43f aea7 	beq.w	80035e4 <_dtoa_r+0x6c4>
 8003896:	f1b8 0f00 	cmp.w	r8, #0
 800389a:	d005      	beq.n	80038a8 <_dtoa_r+0x988>
 800389c:	45b0      	cmp	r8, r6
 800389e:	d003      	beq.n	80038a8 <_dtoa_r+0x988>
 80038a0:	4641      	mov	r1, r8
 80038a2:	4628      	mov	r0, r5
 80038a4:	f000 f992 	bl	8003bcc <_Bfree>
 80038a8:	4631      	mov	r1, r6
 80038aa:	4628      	mov	r0, r5
 80038ac:	f000 f98e 	bl	8003bcc <_Bfree>
 80038b0:	e698      	b.n	80035e4 <_dtoa_r+0x6c4>
 80038b2:	2400      	movs	r4, #0
 80038b4:	4626      	mov	r6, r4
 80038b6:	e7e1      	b.n	800387c <_dtoa_r+0x95c>
 80038b8:	46c2      	mov	sl, r8
 80038ba:	4626      	mov	r6, r4
 80038bc:	e596      	b.n	80033ec <_dtoa_r+0x4cc>
 80038be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80fd 	beq.w	8003ac4 <_dtoa_r+0xba4>
 80038ca:	2f00      	cmp	r7, #0
 80038cc:	dd05      	ble.n	80038da <_dtoa_r+0x9ba>
 80038ce:	4631      	mov	r1, r6
 80038d0:	463a      	mov	r2, r7
 80038d2:	4628      	mov	r0, r5
 80038d4:	f000 fb48 	bl	8003f68 <__lshift>
 80038d8:	4606      	mov	r6, r0
 80038da:	f1b8 0f00 	cmp.w	r8, #0
 80038de:	d05c      	beq.n	800399a <_dtoa_r+0xa7a>
 80038e0:	4628      	mov	r0, r5
 80038e2:	6871      	ldr	r1, [r6, #4]
 80038e4:	f000 f932 	bl	8003b4c <_Balloc>
 80038e8:	4607      	mov	r7, r0
 80038ea:	b928      	cbnz	r0, 80038f8 <_dtoa_r+0x9d8>
 80038ec:	4602      	mov	r2, r0
 80038ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80038f2:	4b7f      	ldr	r3, [pc, #508]	; (8003af0 <_dtoa_r+0xbd0>)
 80038f4:	f7ff bb28 	b.w	8002f48 <_dtoa_r+0x28>
 80038f8:	6932      	ldr	r2, [r6, #16]
 80038fa:	f106 010c 	add.w	r1, r6, #12
 80038fe:	3202      	adds	r2, #2
 8003900:	0092      	lsls	r2, r2, #2
 8003902:	300c      	adds	r0, #12
 8003904:	f000 f914 	bl	8003b30 <memcpy>
 8003908:	2201      	movs	r2, #1
 800390a:	4639      	mov	r1, r7
 800390c:	4628      	mov	r0, r5
 800390e:	f000 fb2b 	bl	8003f68 <__lshift>
 8003912:	46b0      	mov	r8, r6
 8003914:	4606      	mov	r6, r0
 8003916:	9b03      	ldr	r3, [sp, #12]
 8003918:	3301      	adds	r3, #1
 800391a:	9308      	str	r3, [sp, #32]
 800391c:	9b03      	ldr	r3, [sp, #12]
 800391e:	444b      	add	r3, r9
 8003920:	930a      	str	r3, [sp, #40]	; 0x28
 8003922:	9b04      	ldr	r3, [sp, #16]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	9309      	str	r3, [sp, #36]	; 0x24
 800392a:	9b08      	ldr	r3, [sp, #32]
 800392c:	4621      	mov	r1, r4
 800392e:	3b01      	subs	r3, #1
 8003930:	4658      	mov	r0, fp
 8003932:	9304      	str	r3, [sp, #16]
 8003934:	f7ff fa68 	bl	8002e08 <quorem>
 8003938:	4603      	mov	r3, r0
 800393a:	4641      	mov	r1, r8
 800393c:	3330      	adds	r3, #48	; 0x30
 800393e:	9006      	str	r0, [sp, #24]
 8003940:	4658      	mov	r0, fp
 8003942:	930b      	str	r3, [sp, #44]	; 0x2c
 8003944:	f000 fb80 	bl	8004048 <__mcmp>
 8003948:	4632      	mov	r2, r6
 800394a:	4681      	mov	r9, r0
 800394c:	4621      	mov	r1, r4
 800394e:	4628      	mov	r0, r5
 8003950:	f000 fb96 	bl	8004080 <__mdiff>
 8003954:	68c2      	ldr	r2, [r0, #12]
 8003956:	4607      	mov	r7, r0
 8003958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800395a:	bb02      	cbnz	r2, 800399e <_dtoa_r+0xa7e>
 800395c:	4601      	mov	r1, r0
 800395e:	4658      	mov	r0, fp
 8003960:	f000 fb72 	bl	8004048 <__mcmp>
 8003964:	4602      	mov	r2, r0
 8003966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003968:	4639      	mov	r1, r7
 800396a:	4628      	mov	r0, r5
 800396c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003970:	f000 f92c 	bl	8003bcc <_Bfree>
 8003974:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003976:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003978:	9f08      	ldr	r7, [sp, #32]
 800397a:	ea43 0102 	orr.w	r1, r3, r2
 800397e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003980:	430b      	orrs	r3, r1
 8003982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003984:	d10d      	bne.n	80039a2 <_dtoa_r+0xa82>
 8003986:	2b39      	cmp	r3, #57	; 0x39
 8003988:	d029      	beq.n	80039de <_dtoa_r+0xabe>
 800398a:	f1b9 0f00 	cmp.w	r9, #0
 800398e:	dd01      	ble.n	8003994 <_dtoa_r+0xa74>
 8003990:	9b06      	ldr	r3, [sp, #24]
 8003992:	3331      	adds	r3, #49	; 0x31
 8003994:	9a04      	ldr	r2, [sp, #16]
 8003996:	7013      	strb	r3, [r2, #0]
 8003998:	e776      	b.n	8003888 <_dtoa_r+0x968>
 800399a:	4630      	mov	r0, r6
 800399c:	e7b9      	b.n	8003912 <_dtoa_r+0x9f2>
 800399e:	2201      	movs	r2, #1
 80039a0:	e7e2      	b.n	8003968 <_dtoa_r+0xa48>
 80039a2:	f1b9 0f00 	cmp.w	r9, #0
 80039a6:	db06      	blt.n	80039b6 <_dtoa_r+0xa96>
 80039a8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80039aa:	ea41 0909 	orr.w	r9, r1, r9
 80039ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80039b0:	ea59 0101 	orrs.w	r1, r9, r1
 80039b4:	d120      	bne.n	80039f8 <_dtoa_r+0xad8>
 80039b6:	2a00      	cmp	r2, #0
 80039b8:	ddec      	ble.n	8003994 <_dtoa_r+0xa74>
 80039ba:	4659      	mov	r1, fp
 80039bc:	2201      	movs	r2, #1
 80039be:	4628      	mov	r0, r5
 80039c0:	9308      	str	r3, [sp, #32]
 80039c2:	f000 fad1 	bl	8003f68 <__lshift>
 80039c6:	4621      	mov	r1, r4
 80039c8:	4683      	mov	fp, r0
 80039ca:	f000 fb3d 	bl	8004048 <__mcmp>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	9b08      	ldr	r3, [sp, #32]
 80039d2:	dc02      	bgt.n	80039da <_dtoa_r+0xaba>
 80039d4:	d1de      	bne.n	8003994 <_dtoa_r+0xa74>
 80039d6:	07da      	lsls	r2, r3, #31
 80039d8:	d5dc      	bpl.n	8003994 <_dtoa_r+0xa74>
 80039da:	2b39      	cmp	r3, #57	; 0x39
 80039dc:	d1d8      	bne.n	8003990 <_dtoa_r+0xa70>
 80039de:	2339      	movs	r3, #57	; 0x39
 80039e0:	9a04      	ldr	r2, [sp, #16]
 80039e2:	7013      	strb	r3, [r2, #0]
 80039e4:	463b      	mov	r3, r7
 80039e6:	461f      	mov	r7, r3
 80039e8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	2a39      	cmp	r2, #57	; 0x39
 80039f0:	d050      	beq.n	8003a94 <_dtoa_r+0xb74>
 80039f2:	3201      	adds	r2, #1
 80039f4:	701a      	strb	r2, [r3, #0]
 80039f6:	e747      	b.n	8003888 <_dtoa_r+0x968>
 80039f8:	2a00      	cmp	r2, #0
 80039fa:	dd03      	ble.n	8003a04 <_dtoa_r+0xae4>
 80039fc:	2b39      	cmp	r3, #57	; 0x39
 80039fe:	d0ee      	beq.n	80039de <_dtoa_r+0xabe>
 8003a00:	3301      	adds	r3, #1
 8003a02:	e7c7      	b.n	8003994 <_dtoa_r+0xa74>
 8003a04:	9a08      	ldr	r2, [sp, #32]
 8003a06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003a08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003a0c:	428a      	cmp	r2, r1
 8003a0e:	d02a      	beq.n	8003a66 <_dtoa_r+0xb46>
 8003a10:	4659      	mov	r1, fp
 8003a12:	2300      	movs	r3, #0
 8003a14:	220a      	movs	r2, #10
 8003a16:	4628      	mov	r0, r5
 8003a18:	f000 f8fa 	bl	8003c10 <__multadd>
 8003a1c:	45b0      	cmp	r8, r6
 8003a1e:	4683      	mov	fp, r0
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	f04f 020a 	mov.w	r2, #10
 8003a28:	4641      	mov	r1, r8
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	d107      	bne.n	8003a3e <_dtoa_r+0xb1e>
 8003a2e:	f000 f8ef 	bl	8003c10 <__multadd>
 8003a32:	4680      	mov	r8, r0
 8003a34:	4606      	mov	r6, r0
 8003a36:	9b08      	ldr	r3, [sp, #32]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	9308      	str	r3, [sp, #32]
 8003a3c:	e775      	b.n	800392a <_dtoa_r+0xa0a>
 8003a3e:	f000 f8e7 	bl	8003c10 <__multadd>
 8003a42:	4631      	mov	r1, r6
 8003a44:	4680      	mov	r8, r0
 8003a46:	2300      	movs	r3, #0
 8003a48:	220a      	movs	r2, #10
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	f000 f8e0 	bl	8003c10 <__multadd>
 8003a50:	4606      	mov	r6, r0
 8003a52:	e7f0      	b.n	8003a36 <_dtoa_r+0xb16>
 8003a54:	f1b9 0f00 	cmp.w	r9, #0
 8003a58:	bfcc      	ite	gt
 8003a5a:	464f      	movgt	r7, r9
 8003a5c:	2701      	movle	r7, #1
 8003a5e:	f04f 0800 	mov.w	r8, #0
 8003a62:	9a03      	ldr	r2, [sp, #12]
 8003a64:	4417      	add	r7, r2
 8003a66:	4659      	mov	r1, fp
 8003a68:	2201      	movs	r2, #1
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	9308      	str	r3, [sp, #32]
 8003a6e:	f000 fa7b 	bl	8003f68 <__lshift>
 8003a72:	4621      	mov	r1, r4
 8003a74:	4683      	mov	fp, r0
 8003a76:	f000 fae7 	bl	8004048 <__mcmp>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	dcb2      	bgt.n	80039e4 <_dtoa_r+0xac4>
 8003a7e:	d102      	bne.n	8003a86 <_dtoa_r+0xb66>
 8003a80:	9b08      	ldr	r3, [sp, #32]
 8003a82:	07db      	lsls	r3, r3, #31
 8003a84:	d4ae      	bmi.n	80039e4 <_dtoa_r+0xac4>
 8003a86:	463b      	mov	r3, r7
 8003a88:	461f      	mov	r7, r3
 8003a8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003a8e:	2a30      	cmp	r2, #48	; 0x30
 8003a90:	d0fa      	beq.n	8003a88 <_dtoa_r+0xb68>
 8003a92:	e6f9      	b.n	8003888 <_dtoa_r+0x968>
 8003a94:	9a03      	ldr	r2, [sp, #12]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d1a5      	bne.n	80039e6 <_dtoa_r+0xac6>
 8003a9a:	2331      	movs	r3, #49	; 0x31
 8003a9c:	f10a 0a01 	add.w	sl, sl, #1
 8003aa0:	e779      	b.n	8003996 <_dtoa_r+0xa76>
 8003aa2:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <_dtoa_r+0xbd4>)
 8003aa4:	f7ff baa8 	b.w	8002ff8 <_dtoa_r+0xd8>
 8003aa8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f47f aa81 	bne.w	8002fb2 <_dtoa_r+0x92>
 8003ab0:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <_dtoa_r+0xbd8>)
 8003ab2:	f7ff baa1 	b.w	8002ff8 <_dtoa_r+0xd8>
 8003ab6:	f1b9 0f00 	cmp.w	r9, #0
 8003aba:	dc03      	bgt.n	8003ac4 <_dtoa_r+0xba4>
 8003abc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	f73f aecb 	bgt.w	800385a <_dtoa_r+0x93a>
 8003ac4:	9f03      	ldr	r7, [sp, #12]
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	4658      	mov	r0, fp
 8003aca:	f7ff f99d 	bl	8002e08 <quorem>
 8003ace:	9a03      	ldr	r2, [sp, #12]
 8003ad0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003ad4:	f807 3b01 	strb.w	r3, [r7], #1
 8003ad8:	1aba      	subs	r2, r7, r2
 8003ada:	4591      	cmp	r9, r2
 8003adc:	ddba      	ble.n	8003a54 <_dtoa_r+0xb34>
 8003ade:	4659      	mov	r1, fp
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	220a      	movs	r2, #10
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	f000 f893 	bl	8003c10 <__multadd>
 8003aea:	4683      	mov	fp, r0
 8003aec:	e7eb      	b.n	8003ac6 <_dtoa_r+0xba6>
 8003aee:	bf00      	nop
 8003af0:	080053e5 	.word	0x080053e5
 8003af4:	080052f3 	.word	0x080052f3
 8003af8:	08005366 	.word	0x08005366

08003afc <_localeconv_r>:
 8003afc:	4800      	ldr	r0, [pc, #0]	; (8003b00 <_localeconv_r+0x4>)
 8003afe:	4770      	bx	lr
 8003b00:	20000160 	.word	0x20000160

08003b04 <malloc>:
 8003b04:	4b02      	ldr	r3, [pc, #8]	; (8003b10 <malloc+0xc>)
 8003b06:	4601      	mov	r1, r0
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	f000 bc1d 	b.w	8004348 <_malloc_r>
 8003b0e:	bf00      	nop
 8003b10:	2000000c 	.word	0x2000000c

08003b14 <memchr>:
 8003b14:	4603      	mov	r3, r0
 8003b16:	b510      	push	{r4, lr}
 8003b18:	b2c9      	uxtb	r1, r1
 8003b1a:	4402      	add	r2, r0
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	d101      	bne.n	8003b26 <memchr+0x12>
 8003b22:	2000      	movs	r0, #0
 8003b24:	e003      	b.n	8003b2e <memchr+0x1a>
 8003b26:	7804      	ldrb	r4, [r0, #0]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	428c      	cmp	r4, r1
 8003b2c:	d1f6      	bne.n	8003b1c <memchr+0x8>
 8003b2e:	bd10      	pop	{r4, pc}

08003b30 <memcpy>:
 8003b30:	440a      	add	r2, r1
 8003b32:	4291      	cmp	r1, r2
 8003b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b38:	d100      	bne.n	8003b3c <memcpy+0xc>
 8003b3a:	4770      	bx	lr
 8003b3c:	b510      	push	{r4, lr}
 8003b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b42:	4291      	cmp	r1, r2
 8003b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b48:	d1f9      	bne.n	8003b3e <memcpy+0xe>
 8003b4a:	bd10      	pop	{r4, pc}

08003b4c <_Balloc>:
 8003b4c:	b570      	push	{r4, r5, r6, lr}
 8003b4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003b50:	4604      	mov	r4, r0
 8003b52:	460d      	mov	r5, r1
 8003b54:	b976      	cbnz	r6, 8003b74 <_Balloc+0x28>
 8003b56:	2010      	movs	r0, #16
 8003b58:	f7ff ffd4 	bl	8003b04 <malloc>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6260      	str	r0, [r4, #36]	; 0x24
 8003b60:	b920      	cbnz	r0, 8003b6c <_Balloc+0x20>
 8003b62:	2166      	movs	r1, #102	; 0x66
 8003b64:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <_Balloc+0x78>)
 8003b66:	4818      	ldr	r0, [pc, #96]	; (8003bc8 <_Balloc+0x7c>)
 8003b68:	f000 fdce 	bl	8004708 <__assert_func>
 8003b6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b70:	6006      	str	r6, [r0, #0]
 8003b72:	60c6      	str	r6, [r0, #12]
 8003b74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003b76:	68f3      	ldr	r3, [r6, #12]
 8003b78:	b183      	cbz	r3, 8003b9c <_Balloc+0x50>
 8003b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003b82:	b9b8      	cbnz	r0, 8003bb4 <_Balloc+0x68>
 8003b84:	2101      	movs	r1, #1
 8003b86:	fa01 f605 	lsl.w	r6, r1, r5
 8003b8a:	1d72      	adds	r2, r6, #5
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	0092      	lsls	r2, r2, #2
 8003b90:	f000 fb5e 	bl	8004250 <_calloc_r>
 8003b94:	b160      	cbz	r0, 8003bb0 <_Balloc+0x64>
 8003b96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003b9a:	e00e      	b.n	8003bba <_Balloc+0x6e>
 8003b9c:	2221      	movs	r2, #33	; 0x21
 8003b9e:	2104      	movs	r1, #4
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f000 fb55 	bl	8004250 <_calloc_r>
 8003ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ba8:	60f0      	str	r0, [r6, #12]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e4      	bne.n	8003b7a <_Balloc+0x2e>
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	bd70      	pop	{r4, r5, r6, pc}
 8003bb4:	6802      	ldr	r2, [r0, #0]
 8003bb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003bc0:	e7f7      	b.n	8003bb2 <_Balloc+0x66>
 8003bc2:	bf00      	nop
 8003bc4:	08005373 	.word	0x08005373
 8003bc8:	080053f6 	.word	0x080053f6

08003bcc <_Bfree>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003bd0:	4605      	mov	r5, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	b976      	cbnz	r6, 8003bf4 <_Bfree+0x28>
 8003bd6:	2010      	movs	r0, #16
 8003bd8:	f7ff ff94 	bl	8003b04 <malloc>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	6268      	str	r0, [r5, #36]	; 0x24
 8003be0:	b920      	cbnz	r0, 8003bec <_Bfree+0x20>
 8003be2:	218a      	movs	r1, #138	; 0x8a
 8003be4:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <_Bfree+0x3c>)
 8003be6:	4809      	ldr	r0, [pc, #36]	; (8003c0c <_Bfree+0x40>)
 8003be8:	f000 fd8e 	bl	8004708 <__assert_func>
 8003bec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003bf0:	6006      	str	r6, [r0, #0]
 8003bf2:	60c6      	str	r6, [r0, #12]
 8003bf4:	b13c      	cbz	r4, 8003c06 <_Bfree+0x3a>
 8003bf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003bf8:	6862      	ldr	r2, [r4, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c00:	6021      	str	r1, [r4, #0]
 8003c02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
 8003c08:	08005373 	.word	0x08005373
 8003c0c:	080053f6 	.word	0x080053f6

08003c10 <__multadd>:
 8003c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c14:	4607      	mov	r7, r0
 8003c16:	460c      	mov	r4, r1
 8003c18:	461e      	mov	r6, r3
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	690d      	ldr	r5, [r1, #16]
 8003c1e:	f101 0c14 	add.w	ip, r1, #20
 8003c22:	f8dc 3000 	ldr.w	r3, [ip]
 8003c26:	3001      	adds	r0, #1
 8003c28:	b299      	uxth	r1, r3
 8003c2a:	fb02 6101 	mla	r1, r2, r1, r6
 8003c2e:	0c1e      	lsrs	r6, r3, #16
 8003c30:	0c0b      	lsrs	r3, r1, #16
 8003c32:	fb02 3306 	mla	r3, r2, r6, r3
 8003c36:	b289      	uxth	r1, r1
 8003c38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003c3c:	4285      	cmp	r5, r0
 8003c3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003c42:	f84c 1b04 	str.w	r1, [ip], #4
 8003c46:	dcec      	bgt.n	8003c22 <__multadd+0x12>
 8003c48:	b30e      	cbz	r6, 8003c8e <__multadd+0x7e>
 8003c4a:	68a3      	ldr	r3, [r4, #8]
 8003c4c:	42ab      	cmp	r3, r5
 8003c4e:	dc19      	bgt.n	8003c84 <__multadd+0x74>
 8003c50:	6861      	ldr	r1, [r4, #4]
 8003c52:	4638      	mov	r0, r7
 8003c54:	3101      	adds	r1, #1
 8003c56:	f7ff ff79 	bl	8003b4c <_Balloc>
 8003c5a:	4680      	mov	r8, r0
 8003c5c:	b928      	cbnz	r0, 8003c6a <__multadd+0x5a>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	21b5      	movs	r1, #181	; 0xb5
 8003c62:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <__multadd+0x84>)
 8003c64:	480c      	ldr	r0, [pc, #48]	; (8003c98 <__multadd+0x88>)
 8003c66:	f000 fd4f 	bl	8004708 <__assert_func>
 8003c6a:	6922      	ldr	r2, [r4, #16]
 8003c6c:	f104 010c 	add.w	r1, r4, #12
 8003c70:	3202      	adds	r2, #2
 8003c72:	0092      	lsls	r2, r2, #2
 8003c74:	300c      	adds	r0, #12
 8003c76:	f7ff ff5b 	bl	8003b30 <memcpy>
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	f7ff ffa5 	bl	8003bcc <_Bfree>
 8003c82:	4644      	mov	r4, r8
 8003c84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003c88:	3501      	adds	r5, #1
 8003c8a:	615e      	str	r6, [r3, #20]
 8003c8c:	6125      	str	r5, [r4, #16]
 8003c8e:	4620      	mov	r0, r4
 8003c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c94:	080053e5 	.word	0x080053e5
 8003c98:	080053f6 	.word	0x080053f6

08003c9c <__hi0bits>:
 8003c9c:	0c02      	lsrs	r2, r0, #16
 8003c9e:	0412      	lsls	r2, r2, #16
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	b9ca      	cbnz	r2, 8003cd8 <__hi0bits+0x3c>
 8003ca4:	0403      	lsls	r3, r0, #16
 8003ca6:	2010      	movs	r0, #16
 8003ca8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003cac:	bf04      	itt	eq
 8003cae:	021b      	lsleq	r3, r3, #8
 8003cb0:	3008      	addeq	r0, #8
 8003cb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003cb6:	bf04      	itt	eq
 8003cb8:	011b      	lsleq	r3, r3, #4
 8003cba:	3004      	addeq	r0, #4
 8003cbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003cc0:	bf04      	itt	eq
 8003cc2:	009b      	lsleq	r3, r3, #2
 8003cc4:	3002      	addeq	r0, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	db05      	blt.n	8003cd6 <__hi0bits+0x3a>
 8003cca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003cce:	f100 0001 	add.w	r0, r0, #1
 8003cd2:	bf08      	it	eq
 8003cd4:	2020      	moveq	r0, #32
 8003cd6:	4770      	bx	lr
 8003cd8:	2000      	movs	r0, #0
 8003cda:	e7e5      	b.n	8003ca8 <__hi0bits+0xc>

08003cdc <__lo0bits>:
 8003cdc:	6803      	ldr	r3, [r0, #0]
 8003cde:	4602      	mov	r2, r0
 8003ce0:	f013 0007 	ands.w	r0, r3, #7
 8003ce4:	d00b      	beq.n	8003cfe <__lo0bits+0x22>
 8003ce6:	07d9      	lsls	r1, r3, #31
 8003ce8:	d421      	bmi.n	8003d2e <__lo0bits+0x52>
 8003cea:	0798      	lsls	r0, r3, #30
 8003cec:	bf49      	itett	mi
 8003cee:	085b      	lsrmi	r3, r3, #1
 8003cf0:	089b      	lsrpl	r3, r3, #2
 8003cf2:	2001      	movmi	r0, #1
 8003cf4:	6013      	strmi	r3, [r2, #0]
 8003cf6:	bf5c      	itt	pl
 8003cf8:	2002      	movpl	r0, #2
 8003cfa:	6013      	strpl	r3, [r2, #0]
 8003cfc:	4770      	bx	lr
 8003cfe:	b299      	uxth	r1, r3
 8003d00:	b909      	cbnz	r1, 8003d06 <__lo0bits+0x2a>
 8003d02:	2010      	movs	r0, #16
 8003d04:	0c1b      	lsrs	r3, r3, #16
 8003d06:	b2d9      	uxtb	r1, r3
 8003d08:	b909      	cbnz	r1, 8003d0e <__lo0bits+0x32>
 8003d0a:	3008      	adds	r0, #8
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	0719      	lsls	r1, r3, #28
 8003d10:	bf04      	itt	eq
 8003d12:	091b      	lsreq	r3, r3, #4
 8003d14:	3004      	addeq	r0, #4
 8003d16:	0799      	lsls	r1, r3, #30
 8003d18:	bf04      	itt	eq
 8003d1a:	089b      	lsreq	r3, r3, #2
 8003d1c:	3002      	addeq	r0, #2
 8003d1e:	07d9      	lsls	r1, r3, #31
 8003d20:	d403      	bmi.n	8003d2a <__lo0bits+0x4e>
 8003d22:	085b      	lsrs	r3, r3, #1
 8003d24:	f100 0001 	add.w	r0, r0, #1
 8003d28:	d003      	beq.n	8003d32 <__lo0bits+0x56>
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	4770      	bx	lr
 8003d2e:	2000      	movs	r0, #0
 8003d30:	4770      	bx	lr
 8003d32:	2020      	movs	r0, #32
 8003d34:	4770      	bx	lr
	...

08003d38 <__i2b>:
 8003d38:	b510      	push	{r4, lr}
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	f7ff ff05 	bl	8003b4c <_Balloc>
 8003d42:	4602      	mov	r2, r0
 8003d44:	b928      	cbnz	r0, 8003d52 <__i2b+0x1a>
 8003d46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003d4a:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <__i2b+0x24>)
 8003d4c:	4804      	ldr	r0, [pc, #16]	; (8003d60 <__i2b+0x28>)
 8003d4e:	f000 fcdb 	bl	8004708 <__assert_func>
 8003d52:	2301      	movs	r3, #1
 8003d54:	6144      	str	r4, [r0, #20]
 8003d56:	6103      	str	r3, [r0, #16]
 8003d58:	bd10      	pop	{r4, pc}
 8003d5a:	bf00      	nop
 8003d5c:	080053e5 	.word	0x080053e5
 8003d60:	080053f6 	.word	0x080053f6

08003d64 <__multiply>:
 8003d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d68:	4691      	mov	r9, r2
 8003d6a:	690a      	ldr	r2, [r1, #16]
 8003d6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003d70:	460c      	mov	r4, r1
 8003d72:	429a      	cmp	r2, r3
 8003d74:	bfbe      	ittt	lt
 8003d76:	460b      	movlt	r3, r1
 8003d78:	464c      	movlt	r4, r9
 8003d7a:	4699      	movlt	r9, r3
 8003d7c:	6927      	ldr	r7, [r4, #16]
 8003d7e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003d82:	68a3      	ldr	r3, [r4, #8]
 8003d84:	6861      	ldr	r1, [r4, #4]
 8003d86:	eb07 060a 	add.w	r6, r7, sl
 8003d8a:	42b3      	cmp	r3, r6
 8003d8c:	b085      	sub	sp, #20
 8003d8e:	bfb8      	it	lt
 8003d90:	3101      	addlt	r1, #1
 8003d92:	f7ff fedb 	bl	8003b4c <_Balloc>
 8003d96:	b930      	cbnz	r0, 8003da6 <__multiply+0x42>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	f240 115d 	movw	r1, #349	; 0x15d
 8003d9e:	4b43      	ldr	r3, [pc, #268]	; (8003eac <__multiply+0x148>)
 8003da0:	4843      	ldr	r0, [pc, #268]	; (8003eb0 <__multiply+0x14c>)
 8003da2:	f000 fcb1 	bl	8004708 <__assert_func>
 8003da6:	f100 0514 	add.w	r5, r0, #20
 8003daa:	462b      	mov	r3, r5
 8003dac:	2200      	movs	r2, #0
 8003dae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003db2:	4543      	cmp	r3, r8
 8003db4:	d321      	bcc.n	8003dfa <__multiply+0x96>
 8003db6:	f104 0314 	add.w	r3, r4, #20
 8003dba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003dbe:	f109 0314 	add.w	r3, r9, #20
 8003dc2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003dc6:	9202      	str	r2, [sp, #8]
 8003dc8:	1b3a      	subs	r2, r7, r4
 8003dca:	3a15      	subs	r2, #21
 8003dcc:	f022 0203 	bic.w	r2, r2, #3
 8003dd0:	3204      	adds	r2, #4
 8003dd2:	f104 0115 	add.w	r1, r4, #21
 8003dd6:	428f      	cmp	r7, r1
 8003dd8:	bf38      	it	cc
 8003dda:	2204      	movcc	r2, #4
 8003ddc:	9201      	str	r2, [sp, #4]
 8003dde:	9a02      	ldr	r2, [sp, #8]
 8003de0:	9303      	str	r3, [sp, #12]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d80c      	bhi.n	8003e00 <__multiply+0x9c>
 8003de6:	2e00      	cmp	r6, #0
 8003de8:	dd03      	ble.n	8003df2 <__multiply+0x8e>
 8003dea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d059      	beq.n	8003ea6 <__multiply+0x142>
 8003df2:	6106      	str	r6, [r0, #16]
 8003df4:	b005      	add	sp, #20
 8003df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dfa:	f843 2b04 	str.w	r2, [r3], #4
 8003dfe:	e7d8      	b.n	8003db2 <__multiply+0x4e>
 8003e00:	f8b3 a000 	ldrh.w	sl, [r3]
 8003e04:	f1ba 0f00 	cmp.w	sl, #0
 8003e08:	d023      	beq.n	8003e52 <__multiply+0xee>
 8003e0a:	46a9      	mov	r9, r5
 8003e0c:	f04f 0c00 	mov.w	ip, #0
 8003e10:	f104 0e14 	add.w	lr, r4, #20
 8003e14:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003e18:	f8d9 1000 	ldr.w	r1, [r9]
 8003e1c:	fa1f fb82 	uxth.w	fp, r2
 8003e20:	b289      	uxth	r1, r1
 8003e22:	fb0a 110b 	mla	r1, sl, fp, r1
 8003e26:	4461      	add	r1, ip
 8003e28:	f8d9 c000 	ldr.w	ip, [r9]
 8003e2c:	0c12      	lsrs	r2, r2, #16
 8003e2e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003e32:	fb0a c202 	mla	r2, sl, r2, ip
 8003e36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003e3a:	b289      	uxth	r1, r1
 8003e3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003e40:	4577      	cmp	r7, lr
 8003e42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003e46:	f849 1b04 	str.w	r1, [r9], #4
 8003e4a:	d8e3      	bhi.n	8003e14 <__multiply+0xb0>
 8003e4c:	9a01      	ldr	r2, [sp, #4]
 8003e4e:	f845 c002 	str.w	ip, [r5, r2]
 8003e52:	9a03      	ldr	r2, [sp, #12]
 8003e54:	3304      	adds	r3, #4
 8003e56:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003e5a:	f1b9 0f00 	cmp.w	r9, #0
 8003e5e:	d020      	beq.n	8003ea2 <__multiply+0x13e>
 8003e60:	46ae      	mov	lr, r5
 8003e62:	f04f 0a00 	mov.w	sl, #0
 8003e66:	6829      	ldr	r1, [r5, #0]
 8003e68:	f104 0c14 	add.w	ip, r4, #20
 8003e6c:	f8bc b000 	ldrh.w	fp, [ip]
 8003e70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003e74:	b289      	uxth	r1, r1
 8003e76:	fb09 220b 	mla	r2, r9, fp, r2
 8003e7a:	4492      	add	sl, r2
 8003e7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003e80:	f84e 1b04 	str.w	r1, [lr], #4
 8003e84:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003e88:	f8be 1000 	ldrh.w	r1, [lr]
 8003e8c:	0c12      	lsrs	r2, r2, #16
 8003e8e:	fb09 1102 	mla	r1, r9, r2, r1
 8003e92:	4567      	cmp	r7, ip
 8003e94:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003e98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003e9c:	d8e6      	bhi.n	8003e6c <__multiply+0x108>
 8003e9e:	9a01      	ldr	r2, [sp, #4]
 8003ea0:	50a9      	str	r1, [r5, r2]
 8003ea2:	3504      	adds	r5, #4
 8003ea4:	e79b      	b.n	8003dde <__multiply+0x7a>
 8003ea6:	3e01      	subs	r6, #1
 8003ea8:	e79d      	b.n	8003de6 <__multiply+0x82>
 8003eaa:	bf00      	nop
 8003eac:	080053e5 	.word	0x080053e5
 8003eb0:	080053f6 	.word	0x080053f6

08003eb4 <__pow5mult>:
 8003eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003eb8:	4615      	mov	r5, r2
 8003eba:	f012 0203 	ands.w	r2, r2, #3
 8003ebe:	4606      	mov	r6, r0
 8003ec0:	460f      	mov	r7, r1
 8003ec2:	d007      	beq.n	8003ed4 <__pow5mult+0x20>
 8003ec4:	4c25      	ldr	r4, [pc, #148]	; (8003f5c <__pow5mult+0xa8>)
 8003ec6:	3a01      	subs	r2, #1
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003ece:	f7ff fe9f 	bl	8003c10 <__multadd>
 8003ed2:	4607      	mov	r7, r0
 8003ed4:	10ad      	asrs	r5, r5, #2
 8003ed6:	d03d      	beq.n	8003f54 <__pow5mult+0xa0>
 8003ed8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003eda:	b97c      	cbnz	r4, 8003efc <__pow5mult+0x48>
 8003edc:	2010      	movs	r0, #16
 8003ede:	f7ff fe11 	bl	8003b04 <malloc>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	6270      	str	r0, [r6, #36]	; 0x24
 8003ee6:	b928      	cbnz	r0, 8003ef4 <__pow5mult+0x40>
 8003ee8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003eec:	4b1c      	ldr	r3, [pc, #112]	; (8003f60 <__pow5mult+0xac>)
 8003eee:	481d      	ldr	r0, [pc, #116]	; (8003f64 <__pow5mult+0xb0>)
 8003ef0:	f000 fc0a 	bl	8004708 <__assert_func>
 8003ef4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ef8:	6004      	str	r4, [r0, #0]
 8003efa:	60c4      	str	r4, [r0, #12]
 8003efc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003f00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003f04:	b94c      	cbnz	r4, 8003f1a <__pow5mult+0x66>
 8003f06:	f240 2171 	movw	r1, #625	; 0x271
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f7ff ff14 	bl	8003d38 <__i2b>
 8003f10:	2300      	movs	r3, #0
 8003f12:	4604      	mov	r4, r0
 8003f14:	f8c8 0008 	str.w	r0, [r8, #8]
 8003f18:	6003      	str	r3, [r0, #0]
 8003f1a:	f04f 0900 	mov.w	r9, #0
 8003f1e:	07eb      	lsls	r3, r5, #31
 8003f20:	d50a      	bpl.n	8003f38 <__pow5mult+0x84>
 8003f22:	4639      	mov	r1, r7
 8003f24:	4622      	mov	r2, r4
 8003f26:	4630      	mov	r0, r6
 8003f28:	f7ff ff1c 	bl	8003d64 <__multiply>
 8003f2c:	4680      	mov	r8, r0
 8003f2e:	4639      	mov	r1, r7
 8003f30:	4630      	mov	r0, r6
 8003f32:	f7ff fe4b 	bl	8003bcc <_Bfree>
 8003f36:	4647      	mov	r7, r8
 8003f38:	106d      	asrs	r5, r5, #1
 8003f3a:	d00b      	beq.n	8003f54 <__pow5mult+0xa0>
 8003f3c:	6820      	ldr	r0, [r4, #0]
 8003f3e:	b938      	cbnz	r0, 8003f50 <__pow5mult+0x9c>
 8003f40:	4622      	mov	r2, r4
 8003f42:	4621      	mov	r1, r4
 8003f44:	4630      	mov	r0, r6
 8003f46:	f7ff ff0d 	bl	8003d64 <__multiply>
 8003f4a:	6020      	str	r0, [r4, #0]
 8003f4c:	f8c0 9000 	str.w	r9, [r0]
 8003f50:	4604      	mov	r4, r0
 8003f52:	e7e4      	b.n	8003f1e <__pow5mult+0x6a>
 8003f54:	4638      	mov	r0, r7
 8003f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f5a:	bf00      	nop
 8003f5c:	08005548 	.word	0x08005548
 8003f60:	08005373 	.word	0x08005373
 8003f64:	080053f6 	.word	0x080053f6

08003f68 <__lshift>:
 8003f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	4607      	mov	r7, r0
 8003f70:	4691      	mov	r9, r2
 8003f72:	6923      	ldr	r3, [r4, #16]
 8003f74:	6849      	ldr	r1, [r1, #4]
 8003f76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003f7a:	68a3      	ldr	r3, [r4, #8]
 8003f7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003f80:	f108 0601 	add.w	r6, r8, #1
 8003f84:	42b3      	cmp	r3, r6
 8003f86:	db0b      	blt.n	8003fa0 <__lshift+0x38>
 8003f88:	4638      	mov	r0, r7
 8003f8a:	f7ff fddf 	bl	8003b4c <_Balloc>
 8003f8e:	4605      	mov	r5, r0
 8003f90:	b948      	cbnz	r0, 8003fa6 <__lshift+0x3e>
 8003f92:	4602      	mov	r2, r0
 8003f94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003f98:	4b29      	ldr	r3, [pc, #164]	; (8004040 <__lshift+0xd8>)
 8003f9a:	482a      	ldr	r0, [pc, #168]	; (8004044 <__lshift+0xdc>)
 8003f9c:	f000 fbb4 	bl	8004708 <__assert_func>
 8003fa0:	3101      	adds	r1, #1
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	e7ee      	b.n	8003f84 <__lshift+0x1c>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f100 0114 	add.w	r1, r0, #20
 8003fac:	f100 0210 	add.w	r2, r0, #16
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	4553      	cmp	r3, sl
 8003fb4:	db37      	blt.n	8004026 <__lshift+0xbe>
 8003fb6:	6920      	ldr	r0, [r4, #16]
 8003fb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003fbc:	f104 0314 	add.w	r3, r4, #20
 8003fc0:	f019 091f 	ands.w	r9, r9, #31
 8003fc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003fc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003fcc:	d02f      	beq.n	800402e <__lshift+0xc6>
 8003fce:	468a      	mov	sl, r1
 8003fd0:	f04f 0c00 	mov.w	ip, #0
 8003fd4:	f1c9 0e20 	rsb	lr, r9, #32
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	fa02 f209 	lsl.w	r2, r2, r9
 8003fde:	ea42 020c 	orr.w	r2, r2, ip
 8003fe2:	f84a 2b04 	str.w	r2, [sl], #4
 8003fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fea:	4298      	cmp	r0, r3
 8003fec:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003ff0:	d8f2      	bhi.n	8003fd8 <__lshift+0x70>
 8003ff2:	1b03      	subs	r3, r0, r4
 8003ff4:	3b15      	subs	r3, #21
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	f104 0215 	add.w	r2, r4, #21
 8004000:	4290      	cmp	r0, r2
 8004002:	bf38      	it	cc
 8004004:	2304      	movcc	r3, #4
 8004006:	f841 c003 	str.w	ip, [r1, r3]
 800400a:	f1bc 0f00 	cmp.w	ip, #0
 800400e:	d001      	beq.n	8004014 <__lshift+0xac>
 8004010:	f108 0602 	add.w	r6, r8, #2
 8004014:	3e01      	subs	r6, #1
 8004016:	4638      	mov	r0, r7
 8004018:	4621      	mov	r1, r4
 800401a:	612e      	str	r6, [r5, #16]
 800401c:	f7ff fdd6 	bl	8003bcc <_Bfree>
 8004020:	4628      	mov	r0, r5
 8004022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004026:	f842 0f04 	str.w	r0, [r2, #4]!
 800402a:	3301      	adds	r3, #1
 800402c:	e7c1      	b.n	8003fb2 <__lshift+0x4a>
 800402e:	3904      	subs	r1, #4
 8004030:	f853 2b04 	ldr.w	r2, [r3], #4
 8004034:	4298      	cmp	r0, r3
 8004036:	f841 2f04 	str.w	r2, [r1, #4]!
 800403a:	d8f9      	bhi.n	8004030 <__lshift+0xc8>
 800403c:	e7ea      	b.n	8004014 <__lshift+0xac>
 800403e:	bf00      	nop
 8004040:	080053e5 	.word	0x080053e5
 8004044:	080053f6 	.word	0x080053f6

08004048 <__mcmp>:
 8004048:	4603      	mov	r3, r0
 800404a:	690a      	ldr	r2, [r1, #16]
 800404c:	6900      	ldr	r0, [r0, #16]
 800404e:	b530      	push	{r4, r5, lr}
 8004050:	1a80      	subs	r0, r0, r2
 8004052:	d10d      	bne.n	8004070 <__mcmp+0x28>
 8004054:	3314      	adds	r3, #20
 8004056:	3114      	adds	r1, #20
 8004058:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800405c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004060:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004064:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004068:	4295      	cmp	r5, r2
 800406a:	d002      	beq.n	8004072 <__mcmp+0x2a>
 800406c:	d304      	bcc.n	8004078 <__mcmp+0x30>
 800406e:	2001      	movs	r0, #1
 8004070:	bd30      	pop	{r4, r5, pc}
 8004072:	42a3      	cmp	r3, r4
 8004074:	d3f4      	bcc.n	8004060 <__mcmp+0x18>
 8004076:	e7fb      	b.n	8004070 <__mcmp+0x28>
 8004078:	f04f 30ff 	mov.w	r0, #4294967295
 800407c:	e7f8      	b.n	8004070 <__mcmp+0x28>
	...

08004080 <__mdiff>:
 8004080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004084:	460d      	mov	r5, r1
 8004086:	4607      	mov	r7, r0
 8004088:	4611      	mov	r1, r2
 800408a:	4628      	mov	r0, r5
 800408c:	4614      	mov	r4, r2
 800408e:	f7ff ffdb 	bl	8004048 <__mcmp>
 8004092:	1e06      	subs	r6, r0, #0
 8004094:	d111      	bne.n	80040ba <__mdiff+0x3a>
 8004096:	4631      	mov	r1, r6
 8004098:	4638      	mov	r0, r7
 800409a:	f7ff fd57 	bl	8003b4c <_Balloc>
 800409e:	4602      	mov	r2, r0
 80040a0:	b928      	cbnz	r0, 80040ae <__mdiff+0x2e>
 80040a2:	f240 2132 	movw	r1, #562	; 0x232
 80040a6:	4b3a      	ldr	r3, [pc, #232]	; (8004190 <__mdiff+0x110>)
 80040a8:	483a      	ldr	r0, [pc, #232]	; (8004194 <__mdiff+0x114>)
 80040aa:	f000 fb2d 	bl	8004708 <__assert_func>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80040b4:	4610      	mov	r0, r2
 80040b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ba:	bfa4      	itt	ge
 80040bc:	4623      	movge	r3, r4
 80040be:	462c      	movge	r4, r5
 80040c0:	4638      	mov	r0, r7
 80040c2:	6861      	ldr	r1, [r4, #4]
 80040c4:	bfa6      	itte	ge
 80040c6:	461d      	movge	r5, r3
 80040c8:	2600      	movge	r6, #0
 80040ca:	2601      	movlt	r6, #1
 80040cc:	f7ff fd3e 	bl	8003b4c <_Balloc>
 80040d0:	4602      	mov	r2, r0
 80040d2:	b918      	cbnz	r0, 80040dc <__mdiff+0x5c>
 80040d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80040d8:	4b2d      	ldr	r3, [pc, #180]	; (8004190 <__mdiff+0x110>)
 80040da:	e7e5      	b.n	80040a8 <__mdiff+0x28>
 80040dc:	f102 0814 	add.w	r8, r2, #20
 80040e0:	46c2      	mov	sl, r8
 80040e2:	f04f 0c00 	mov.w	ip, #0
 80040e6:	6927      	ldr	r7, [r4, #16]
 80040e8:	60c6      	str	r6, [r0, #12]
 80040ea:	692e      	ldr	r6, [r5, #16]
 80040ec:	f104 0014 	add.w	r0, r4, #20
 80040f0:	f105 0914 	add.w	r9, r5, #20
 80040f4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80040f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80040fc:	3410      	adds	r4, #16
 80040fe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004102:	f859 3b04 	ldr.w	r3, [r9], #4
 8004106:	fa1f f18b 	uxth.w	r1, fp
 800410a:	448c      	add	ip, r1
 800410c:	b299      	uxth	r1, r3
 800410e:	0c1b      	lsrs	r3, r3, #16
 8004110:	ebac 0101 	sub.w	r1, ip, r1
 8004114:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004118:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800411c:	b289      	uxth	r1, r1
 800411e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004122:	454e      	cmp	r6, r9
 8004124:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004128:	f84a 3b04 	str.w	r3, [sl], #4
 800412c:	d8e7      	bhi.n	80040fe <__mdiff+0x7e>
 800412e:	1b73      	subs	r3, r6, r5
 8004130:	3b15      	subs	r3, #21
 8004132:	f023 0303 	bic.w	r3, r3, #3
 8004136:	3515      	adds	r5, #21
 8004138:	3304      	adds	r3, #4
 800413a:	42ae      	cmp	r6, r5
 800413c:	bf38      	it	cc
 800413e:	2304      	movcc	r3, #4
 8004140:	4418      	add	r0, r3
 8004142:	4443      	add	r3, r8
 8004144:	461e      	mov	r6, r3
 8004146:	4605      	mov	r5, r0
 8004148:	4575      	cmp	r5, lr
 800414a:	d30e      	bcc.n	800416a <__mdiff+0xea>
 800414c:	f10e 0103 	add.w	r1, lr, #3
 8004150:	1a09      	subs	r1, r1, r0
 8004152:	f021 0103 	bic.w	r1, r1, #3
 8004156:	3803      	subs	r0, #3
 8004158:	4586      	cmp	lr, r0
 800415a:	bf38      	it	cc
 800415c:	2100      	movcc	r1, #0
 800415e:	4419      	add	r1, r3
 8004160:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004164:	b18b      	cbz	r3, 800418a <__mdiff+0x10a>
 8004166:	6117      	str	r7, [r2, #16]
 8004168:	e7a4      	b.n	80040b4 <__mdiff+0x34>
 800416a:	f855 8b04 	ldr.w	r8, [r5], #4
 800416e:	fa1f f188 	uxth.w	r1, r8
 8004172:	4461      	add	r1, ip
 8004174:	140c      	asrs	r4, r1, #16
 8004176:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800417a:	b289      	uxth	r1, r1
 800417c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004180:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004184:	f846 1b04 	str.w	r1, [r6], #4
 8004188:	e7de      	b.n	8004148 <__mdiff+0xc8>
 800418a:	3f01      	subs	r7, #1
 800418c:	e7e8      	b.n	8004160 <__mdiff+0xe0>
 800418e:	bf00      	nop
 8004190:	080053e5 	.word	0x080053e5
 8004194:	080053f6 	.word	0x080053f6

08004198 <__d2b>:
 8004198:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800419c:	2101      	movs	r1, #1
 800419e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80041a2:	4690      	mov	r8, r2
 80041a4:	461d      	mov	r5, r3
 80041a6:	f7ff fcd1 	bl	8003b4c <_Balloc>
 80041aa:	4604      	mov	r4, r0
 80041ac:	b930      	cbnz	r0, 80041bc <__d2b+0x24>
 80041ae:	4602      	mov	r2, r0
 80041b0:	f240 310a 	movw	r1, #778	; 0x30a
 80041b4:	4b24      	ldr	r3, [pc, #144]	; (8004248 <__d2b+0xb0>)
 80041b6:	4825      	ldr	r0, [pc, #148]	; (800424c <__d2b+0xb4>)
 80041b8:	f000 faa6 	bl	8004708 <__assert_func>
 80041bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80041c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80041c4:	bb2d      	cbnz	r5, 8004212 <__d2b+0x7a>
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	f1b8 0300 	subs.w	r3, r8, #0
 80041cc:	d026      	beq.n	800421c <__d2b+0x84>
 80041ce:	4668      	mov	r0, sp
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	f7ff fd83 	bl	8003cdc <__lo0bits>
 80041d6:	9900      	ldr	r1, [sp, #0]
 80041d8:	b1f0      	cbz	r0, 8004218 <__d2b+0x80>
 80041da:	9a01      	ldr	r2, [sp, #4]
 80041dc:	f1c0 0320 	rsb	r3, r0, #32
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	430b      	orrs	r3, r1
 80041e6:	40c2      	lsrs	r2, r0
 80041e8:	6163      	str	r3, [r4, #20]
 80041ea:	9201      	str	r2, [sp, #4]
 80041ec:	9b01      	ldr	r3, [sp, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bf14      	ite	ne
 80041f2:	2102      	movne	r1, #2
 80041f4:	2101      	moveq	r1, #1
 80041f6:	61a3      	str	r3, [r4, #24]
 80041f8:	6121      	str	r1, [r4, #16]
 80041fa:	b1c5      	cbz	r5, 800422e <__d2b+0x96>
 80041fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004200:	4405      	add	r5, r0
 8004202:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004206:	603d      	str	r5, [r7, #0]
 8004208:	6030      	str	r0, [r6, #0]
 800420a:	4620      	mov	r0, r4
 800420c:	b002      	add	sp, #8
 800420e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004216:	e7d6      	b.n	80041c6 <__d2b+0x2e>
 8004218:	6161      	str	r1, [r4, #20]
 800421a:	e7e7      	b.n	80041ec <__d2b+0x54>
 800421c:	a801      	add	r0, sp, #4
 800421e:	f7ff fd5d 	bl	8003cdc <__lo0bits>
 8004222:	2101      	movs	r1, #1
 8004224:	9b01      	ldr	r3, [sp, #4]
 8004226:	6121      	str	r1, [r4, #16]
 8004228:	6163      	str	r3, [r4, #20]
 800422a:	3020      	adds	r0, #32
 800422c:	e7e5      	b.n	80041fa <__d2b+0x62>
 800422e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004232:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004236:	6038      	str	r0, [r7, #0]
 8004238:	6918      	ldr	r0, [r3, #16]
 800423a:	f7ff fd2f 	bl	8003c9c <__hi0bits>
 800423e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004242:	6031      	str	r1, [r6, #0]
 8004244:	e7e1      	b.n	800420a <__d2b+0x72>
 8004246:	bf00      	nop
 8004248:	080053e5 	.word	0x080053e5
 800424c:	080053f6 	.word	0x080053f6

08004250 <_calloc_r>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	fba1 5402 	umull	r5, r4, r1, r2
 8004256:	b934      	cbnz	r4, 8004266 <_calloc_r+0x16>
 8004258:	4629      	mov	r1, r5
 800425a:	f000 f875 	bl	8004348 <_malloc_r>
 800425e:	4606      	mov	r6, r0
 8004260:	b928      	cbnz	r0, 800426e <_calloc_r+0x1e>
 8004262:	4630      	mov	r0, r6
 8004264:	bd70      	pop	{r4, r5, r6, pc}
 8004266:	220c      	movs	r2, #12
 8004268:	2600      	movs	r6, #0
 800426a:	6002      	str	r2, [r0, #0]
 800426c:	e7f9      	b.n	8004262 <_calloc_r+0x12>
 800426e:	462a      	mov	r2, r5
 8004270:	4621      	mov	r1, r4
 8004272:	f7fe f941 	bl	80024f8 <memset>
 8004276:	e7f4      	b.n	8004262 <_calloc_r+0x12>

08004278 <_free_r>:
 8004278:	b538      	push	{r3, r4, r5, lr}
 800427a:	4605      	mov	r5, r0
 800427c:	2900      	cmp	r1, #0
 800427e:	d040      	beq.n	8004302 <_free_r+0x8a>
 8004280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004284:	1f0c      	subs	r4, r1, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	bfb8      	it	lt
 800428a:	18e4      	addlt	r4, r4, r3
 800428c:	f000 fa98 	bl	80047c0 <__malloc_lock>
 8004290:	4a1c      	ldr	r2, [pc, #112]	; (8004304 <_free_r+0x8c>)
 8004292:	6813      	ldr	r3, [r2, #0]
 8004294:	b933      	cbnz	r3, 80042a4 <_free_r+0x2c>
 8004296:	6063      	str	r3, [r4, #4]
 8004298:	6014      	str	r4, [r2, #0]
 800429a:	4628      	mov	r0, r5
 800429c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042a0:	f000 ba94 	b.w	80047cc <__malloc_unlock>
 80042a4:	42a3      	cmp	r3, r4
 80042a6:	d908      	bls.n	80042ba <_free_r+0x42>
 80042a8:	6820      	ldr	r0, [r4, #0]
 80042aa:	1821      	adds	r1, r4, r0
 80042ac:	428b      	cmp	r3, r1
 80042ae:	bf01      	itttt	eq
 80042b0:	6819      	ldreq	r1, [r3, #0]
 80042b2:	685b      	ldreq	r3, [r3, #4]
 80042b4:	1809      	addeq	r1, r1, r0
 80042b6:	6021      	streq	r1, [r4, #0]
 80042b8:	e7ed      	b.n	8004296 <_free_r+0x1e>
 80042ba:	461a      	mov	r2, r3
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	b10b      	cbz	r3, 80042c4 <_free_r+0x4c>
 80042c0:	42a3      	cmp	r3, r4
 80042c2:	d9fa      	bls.n	80042ba <_free_r+0x42>
 80042c4:	6811      	ldr	r1, [r2, #0]
 80042c6:	1850      	adds	r0, r2, r1
 80042c8:	42a0      	cmp	r0, r4
 80042ca:	d10b      	bne.n	80042e4 <_free_r+0x6c>
 80042cc:	6820      	ldr	r0, [r4, #0]
 80042ce:	4401      	add	r1, r0
 80042d0:	1850      	adds	r0, r2, r1
 80042d2:	4283      	cmp	r3, r0
 80042d4:	6011      	str	r1, [r2, #0]
 80042d6:	d1e0      	bne.n	800429a <_free_r+0x22>
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4401      	add	r1, r0
 80042de:	6011      	str	r1, [r2, #0]
 80042e0:	6053      	str	r3, [r2, #4]
 80042e2:	e7da      	b.n	800429a <_free_r+0x22>
 80042e4:	d902      	bls.n	80042ec <_free_r+0x74>
 80042e6:	230c      	movs	r3, #12
 80042e8:	602b      	str	r3, [r5, #0]
 80042ea:	e7d6      	b.n	800429a <_free_r+0x22>
 80042ec:	6820      	ldr	r0, [r4, #0]
 80042ee:	1821      	adds	r1, r4, r0
 80042f0:	428b      	cmp	r3, r1
 80042f2:	bf01      	itttt	eq
 80042f4:	6819      	ldreq	r1, [r3, #0]
 80042f6:	685b      	ldreq	r3, [r3, #4]
 80042f8:	1809      	addeq	r1, r1, r0
 80042fa:	6021      	streq	r1, [r4, #0]
 80042fc:	6063      	str	r3, [r4, #4]
 80042fe:	6054      	str	r4, [r2, #4]
 8004300:	e7cb      	b.n	800429a <_free_r+0x22>
 8004302:	bd38      	pop	{r3, r4, r5, pc}
 8004304:	200002d0 	.word	0x200002d0

08004308 <sbrk_aligned>:
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	4e0e      	ldr	r6, [pc, #56]	; (8004344 <sbrk_aligned+0x3c>)
 800430c:	460c      	mov	r4, r1
 800430e:	6831      	ldr	r1, [r6, #0]
 8004310:	4605      	mov	r5, r0
 8004312:	b911      	cbnz	r1, 800431a <sbrk_aligned+0x12>
 8004314:	f000 f9e8 	bl	80046e8 <_sbrk_r>
 8004318:	6030      	str	r0, [r6, #0]
 800431a:	4621      	mov	r1, r4
 800431c:	4628      	mov	r0, r5
 800431e:	f000 f9e3 	bl	80046e8 <_sbrk_r>
 8004322:	1c43      	adds	r3, r0, #1
 8004324:	d00a      	beq.n	800433c <sbrk_aligned+0x34>
 8004326:	1cc4      	adds	r4, r0, #3
 8004328:	f024 0403 	bic.w	r4, r4, #3
 800432c:	42a0      	cmp	r0, r4
 800432e:	d007      	beq.n	8004340 <sbrk_aligned+0x38>
 8004330:	1a21      	subs	r1, r4, r0
 8004332:	4628      	mov	r0, r5
 8004334:	f000 f9d8 	bl	80046e8 <_sbrk_r>
 8004338:	3001      	adds	r0, #1
 800433a:	d101      	bne.n	8004340 <sbrk_aligned+0x38>
 800433c:	f04f 34ff 	mov.w	r4, #4294967295
 8004340:	4620      	mov	r0, r4
 8004342:	bd70      	pop	{r4, r5, r6, pc}
 8004344:	200002d4 	.word	0x200002d4

08004348 <_malloc_r>:
 8004348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800434c:	1ccd      	adds	r5, r1, #3
 800434e:	f025 0503 	bic.w	r5, r5, #3
 8004352:	3508      	adds	r5, #8
 8004354:	2d0c      	cmp	r5, #12
 8004356:	bf38      	it	cc
 8004358:	250c      	movcc	r5, #12
 800435a:	2d00      	cmp	r5, #0
 800435c:	4607      	mov	r7, r0
 800435e:	db01      	blt.n	8004364 <_malloc_r+0x1c>
 8004360:	42a9      	cmp	r1, r5
 8004362:	d905      	bls.n	8004370 <_malloc_r+0x28>
 8004364:	230c      	movs	r3, #12
 8004366:	2600      	movs	r6, #0
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	4630      	mov	r0, r6
 800436c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004370:	4e2e      	ldr	r6, [pc, #184]	; (800442c <_malloc_r+0xe4>)
 8004372:	f000 fa25 	bl	80047c0 <__malloc_lock>
 8004376:	6833      	ldr	r3, [r6, #0]
 8004378:	461c      	mov	r4, r3
 800437a:	bb34      	cbnz	r4, 80043ca <_malloc_r+0x82>
 800437c:	4629      	mov	r1, r5
 800437e:	4638      	mov	r0, r7
 8004380:	f7ff ffc2 	bl	8004308 <sbrk_aligned>
 8004384:	1c43      	adds	r3, r0, #1
 8004386:	4604      	mov	r4, r0
 8004388:	d14d      	bne.n	8004426 <_malloc_r+0xde>
 800438a:	6834      	ldr	r4, [r6, #0]
 800438c:	4626      	mov	r6, r4
 800438e:	2e00      	cmp	r6, #0
 8004390:	d140      	bne.n	8004414 <_malloc_r+0xcc>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	4631      	mov	r1, r6
 8004396:	4638      	mov	r0, r7
 8004398:	eb04 0803 	add.w	r8, r4, r3
 800439c:	f000 f9a4 	bl	80046e8 <_sbrk_r>
 80043a0:	4580      	cmp	r8, r0
 80043a2:	d13a      	bne.n	800441a <_malloc_r+0xd2>
 80043a4:	6821      	ldr	r1, [r4, #0]
 80043a6:	3503      	adds	r5, #3
 80043a8:	1a6d      	subs	r5, r5, r1
 80043aa:	f025 0503 	bic.w	r5, r5, #3
 80043ae:	3508      	adds	r5, #8
 80043b0:	2d0c      	cmp	r5, #12
 80043b2:	bf38      	it	cc
 80043b4:	250c      	movcc	r5, #12
 80043b6:	4638      	mov	r0, r7
 80043b8:	4629      	mov	r1, r5
 80043ba:	f7ff ffa5 	bl	8004308 <sbrk_aligned>
 80043be:	3001      	adds	r0, #1
 80043c0:	d02b      	beq.n	800441a <_malloc_r+0xd2>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	442b      	add	r3, r5
 80043c6:	6023      	str	r3, [r4, #0]
 80043c8:	e00e      	b.n	80043e8 <_malloc_r+0xa0>
 80043ca:	6822      	ldr	r2, [r4, #0]
 80043cc:	1b52      	subs	r2, r2, r5
 80043ce:	d41e      	bmi.n	800440e <_malloc_r+0xc6>
 80043d0:	2a0b      	cmp	r2, #11
 80043d2:	d916      	bls.n	8004402 <_malloc_r+0xba>
 80043d4:	1961      	adds	r1, r4, r5
 80043d6:	42a3      	cmp	r3, r4
 80043d8:	6025      	str	r5, [r4, #0]
 80043da:	bf18      	it	ne
 80043dc:	6059      	strne	r1, [r3, #4]
 80043de:	6863      	ldr	r3, [r4, #4]
 80043e0:	bf08      	it	eq
 80043e2:	6031      	streq	r1, [r6, #0]
 80043e4:	5162      	str	r2, [r4, r5]
 80043e6:	604b      	str	r3, [r1, #4]
 80043e8:	4638      	mov	r0, r7
 80043ea:	f104 060b 	add.w	r6, r4, #11
 80043ee:	f000 f9ed 	bl	80047cc <__malloc_unlock>
 80043f2:	f026 0607 	bic.w	r6, r6, #7
 80043f6:	1d23      	adds	r3, r4, #4
 80043f8:	1af2      	subs	r2, r6, r3
 80043fa:	d0b6      	beq.n	800436a <_malloc_r+0x22>
 80043fc:	1b9b      	subs	r3, r3, r6
 80043fe:	50a3      	str	r3, [r4, r2]
 8004400:	e7b3      	b.n	800436a <_malloc_r+0x22>
 8004402:	6862      	ldr	r2, [r4, #4]
 8004404:	42a3      	cmp	r3, r4
 8004406:	bf0c      	ite	eq
 8004408:	6032      	streq	r2, [r6, #0]
 800440a:	605a      	strne	r2, [r3, #4]
 800440c:	e7ec      	b.n	80043e8 <_malloc_r+0xa0>
 800440e:	4623      	mov	r3, r4
 8004410:	6864      	ldr	r4, [r4, #4]
 8004412:	e7b2      	b.n	800437a <_malloc_r+0x32>
 8004414:	4634      	mov	r4, r6
 8004416:	6876      	ldr	r6, [r6, #4]
 8004418:	e7b9      	b.n	800438e <_malloc_r+0x46>
 800441a:	230c      	movs	r3, #12
 800441c:	4638      	mov	r0, r7
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	f000 f9d4 	bl	80047cc <__malloc_unlock>
 8004424:	e7a1      	b.n	800436a <_malloc_r+0x22>
 8004426:	6025      	str	r5, [r4, #0]
 8004428:	e7de      	b.n	80043e8 <_malloc_r+0xa0>
 800442a:	bf00      	nop
 800442c:	200002d0 	.word	0x200002d0

08004430 <__ssputs_r>:
 8004430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004434:	688e      	ldr	r6, [r1, #8]
 8004436:	4682      	mov	sl, r0
 8004438:	429e      	cmp	r6, r3
 800443a:	460c      	mov	r4, r1
 800443c:	4690      	mov	r8, r2
 800443e:	461f      	mov	r7, r3
 8004440:	d838      	bhi.n	80044b4 <__ssputs_r+0x84>
 8004442:	898a      	ldrh	r2, [r1, #12]
 8004444:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004448:	d032      	beq.n	80044b0 <__ssputs_r+0x80>
 800444a:	6825      	ldr	r5, [r4, #0]
 800444c:	6909      	ldr	r1, [r1, #16]
 800444e:	3301      	adds	r3, #1
 8004450:	eba5 0901 	sub.w	r9, r5, r1
 8004454:	6965      	ldr	r5, [r4, #20]
 8004456:	444b      	add	r3, r9
 8004458:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800445c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004460:	106d      	asrs	r5, r5, #1
 8004462:	429d      	cmp	r5, r3
 8004464:	bf38      	it	cc
 8004466:	461d      	movcc	r5, r3
 8004468:	0553      	lsls	r3, r2, #21
 800446a:	d531      	bpl.n	80044d0 <__ssputs_r+0xa0>
 800446c:	4629      	mov	r1, r5
 800446e:	f7ff ff6b 	bl	8004348 <_malloc_r>
 8004472:	4606      	mov	r6, r0
 8004474:	b950      	cbnz	r0, 800448c <__ssputs_r+0x5c>
 8004476:	230c      	movs	r3, #12
 8004478:	f04f 30ff 	mov.w	r0, #4294967295
 800447c:	f8ca 3000 	str.w	r3, [sl]
 8004480:	89a3      	ldrh	r3, [r4, #12]
 8004482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004486:	81a3      	strh	r3, [r4, #12]
 8004488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800448c:	464a      	mov	r2, r9
 800448e:	6921      	ldr	r1, [r4, #16]
 8004490:	f7ff fb4e 	bl	8003b30 <memcpy>
 8004494:	89a3      	ldrh	r3, [r4, #12]
 8004496:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800449a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449e:	81a3      	strh	r3, [r4, #12]
 80044a0:	6126      	str	r6, [r4, #16]
 80044a2:	444e      	add	r6, r9
 80044a4:	6026      	str	r6, [r4, #0]
 80044a6:	463e      	mov	r6, r7
 80044a8:	6165      	str	r5, [r4, #20]
 80044aa:	eba5 0509 	sub.w	r5, r5, r9
 80044ae:	60a5      	str	r5, [r4, #8]
 80044b0:	42be      	cmp	r6, r7
 80044b2:	d900      	bls.n	80044b6 <__ssputs_r+0x86>
 80044b4:	463e      	mov	r6, r7
 80044b6:	4632      	mov	r2, r6
 80044b8:	4641      	mov	r1, r8
 80044ba:	6820      	ldr	r0, [r4, #0]
 80044bc:	f000 f966 	bl	800478c <memmove>
 80044c0:	68a3      	ldr	r3, [r4, #8]
 80044c2:	2000      	movs	r0, #0
 80044c4:	1b9b      	subs	r3, r3, r6
 80044c6:	60a3      	str	r3, [r4, #8]
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	4433      	add	r3, r6
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	e7db      	b.n	8004488 <__ssputs_r+0x58>
 80044d0:	462a      	mov	r2, r5
 80044d2:	f000 f981 	bl	80047d8 <_realloc_r>
 80044d6:	4606      	mov	r6, r0
 80044d8:	2800      	cmp	r0, #0
 80044da:	d1e1      	bne.n	80044a0 <__ssputs_r+0x70>
 80044dc:	4650      	mov	r0, sl
 80044de:	6921      	ldr	r1, [r4, #16]
 80044e0:	f7ff feca 	bl	8004278 <_free_r>
 80044e4:	e7c7      	b.n	8004476 <__ssputs_r+0x46>
	...

080044e8 <_svfiprintf_r>:
 80044e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ec:	4698      	mov	r8, r3
 80044ee:	898b      	ldrh	r3, [r1, #12]
 80044f0:	4607      	mov	r7, r0
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	460d      	mov	r5, r1
 80044f6:	4614      	mov	r4, r2
 80044f8:	b09d      	sub	sp, #116	; 0x74
 80044fa:	d50e      	bpl.n	800451a <_svfiprintf_r+0x32>
 80044fc:	690b      	ldr	r3, [r1, #16]
 80044fe:	b963      	cbnz	r3, 800451a <_svfiprintf_r+0x32>
 8004500:	2140      	movs	r1, #64	; 0x40
 8004502:	f7ff ff21 	bl	8004348 <_malloc_r>
 8004506:	6028      	str	r0, [r5, #0]
 8004508:	6128      	str	r0, [r5, #16]
 800450a:	b920      	cbnz	r0, 8004516 <_svfiprintf_r+0x2e>
 800450c:	230c      	movs	r3, #12
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	e0d1      	b.n	80046ba <_svfiprintf_r+0x1d2>
 8004516:	2340      	movs	r3, #64	; 0x40
 8004518:	616b      	str	r3, [r5, #20]
 800451a:	2300      	movs	r3, #0
 800451c:	9309      	str	r3, [sp, #36]	; 0x24
 800451e:	2320      	movs	r3, #32
 8004520:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004524:	2330      	movs	r3, #48	; 0x30
 8004526:	f04f 0901 	mov.w	r9, #1
 800452a:	f8cd 800c 	str.w	r8, [sp, #12]
 800452e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80046d4 <_svfiprintf_r+0x1ec>
 8004532:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004536:	4623      	mov	r3, r4
 8004538:	469a      	mov	sl, r3
 800453a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800453e:	b10a      	cbz	r2, 8004544 <_svfiprintf_r+0x5c>
 8004540:	2a25      	cmp	r2, #37	; 0x25
 8004542:	d1f9      	bne.n	8004538 <_svfiprintf_r+0x50>
 8004544:	ebba 0b04 	subs.w	fp, sl, r4
 8004548:	d00b      	beq.n	8004562 <_svfiprintf_r+0x7a>
 800454a:	465b      	mov	r3, fp
 800454c:	4622      	mov	r2, r4
 800454e:	4629      	mov	r1, r5
 8004550:	4638      	mov	r0, r7
 8004552:	f7ff ff6d 	bl	8004430 <__ssputs_r>
 8004556:	3001      	adds	r0, #1
 8004558:	f000 80aa 	beq.w	80046b0 <_svfiprintf_r+0x1c8>
 800455c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800455e:	445a      	add	r2, fp
 8004560:	9209      	str	r2, [sp, #36]	; 0x24
 8004562:	f89a 3000 	ldrb.w	r3, [sl]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 80a2 	beq.w	80046b0 <_svfiprintf_r+0x1c8>
 800456c:	2300      	movs	r3, #0
 800456e:	f04f 32ff 	mov.w	r2, #4294967295
 8004572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004576:	f10a 0a01 	add.w	sl, sl, #1
 800457a:	9304      	str	r3, [sp, #16]
 800457c:	9307      	str	r3, [sp, #28]
 800457e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004582:	931a      	str	r3, [sp, #104]	; 0x68
 8004584:	4654      	mov	r4, sl
 8004586:	2205      	movs	r2, #5
 8004588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800458c:	4851      	ldr	r0, [pc, #324]	; (80046d4 <_svfiprintf_r+0x1ec>)
 800458e:	f7ff fac1 	bl	8003b14 <memchr>
 8004592:	9a04      	ldr	r2, [sp, #16]
 8004594:	b9d8      	cbnz	r0, 80045ce <_svfiprintf_r+0xe6>
 8004596:	06d0      	lsls	r0, r2, #27
 8004598:	bf44      	itt	mi
 800459a:	2320      	movmi	r3, #32
 800459c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045a0:	0711      	lsls	r1, r2, #28
 80045a2:	bf44      	itt	mi
 80045a4:	232b      	movmi	r3, #43	; 0x2b
 80045a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045aa:	f89a 3000 	ldrb.w	r3, [sl]
 80045ae:	2b2a      	cmp	r3, #42	; 0x2a
 80045b0:	d015      	beq.n	80045de <_svfiprintf_r+0xf6>
 80045b2:	4654      	mov	r4, sl
 80045b4:	2000      	movs	r0, #0
 80045b6:	f04f 0c0a 	mov.w	ip, #10
 80045ba:	9a07      	ldr	r2, [sp, #28]
 80045bc:	4621      	mov	r1, r4
 80045be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045c2:	3b30      	subs	r3, #48	; 0x30
 80045c4:	2b09      	cmp	r3, #9
 80045c6:	d94e      	bls.n	8004666 <_svfiprintf_r+0x17e>
 80045c8:	b1b0      	cbz	r0, 80045f8 <_svfiprintf_r+0x110>
 80045ca:	9207      	str	r2, [sp, #28]
 80045cc:	e014      	b.n	80045f8 <_svfiprintf_r+0x110>
 80045ce:	eba0 0308 	sub.w	r3, r0, r8
 80045d2:	fa09 f303 	lsl.w	r3, r9, r3
 80045d6:	4313      	orrs	r3, r2
 80045d8:	46a2      	mov	sl, r4
 80045da:	9304      	str	r3, [sp, #16]
 80045dc:	e7d2      	b.n	8004584 <_svfiprintf_r+0x9c>
 80045de:	9b03      	ldr	r3, [sp, #12]
 80045e0:	1d19      	adds	r1, r3, #4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	9103      	str	r1, [sp, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bfbb      	ittet	lt
 80045ea:	425b      	neglt	r3, r3
 80045ec:	f042 0202 	orrlt.w	r2, r2, #2
 80045f0:	9307      	strge	r3, [sp, #28]
 80045f2:	9307      	strlt	r3, [sp, #28]
 80045f4:	bfb8      	it	lt
 80045f6:	9204      	strlt	r2, [sp, #16]
 80045f8:	7823      	ldrb	r3, [r4, #0]
 80045fa:	2b2e      	cmp	r3, #46	; 0x2e
 80045fc:	d10c      	bne.n	8004618 <_svfiprintf_r+0x130>
 80045fe:	7863      	ldrb	r3, [r4, #1]
 8004600:	2b2a      	cmp	r3, #42	; 0x2a
 8004602:	d135      	bne.n	8004670 <_svfiprintf_r+0x188>
 8004604:	9b03      	ldr	r3, [sp, #12]
 8004606:	3402      	adds	r4, #2
 8004608:	1d1a      	adds	r2, r3, #4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	9203      	str	r2, [sp, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	bfb8      	it	lt
 8004612:	f04f 33ff 	movlt.w	r3, #4294967295
 8004616:	9305      	str	r3, [sp, #20]
 8004618:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80046d8 <_svfiprintf_r+0x1f0>
 800461c:	2203      	movs	r2, #3
 800461e:	4650      	mov	r0, sl
 8004620:	7821      	ldrb	r1, [r4, #0]
 8004622:	f7ff fa77 	bl	8003b14 <memchr>
 8004626:	b140      	cbz	r0, 800463a <_svfiprintf_r+0x152>
 8004628:	2340      	movs	r3, #64	; 0x40
 800462a:	eba0 000a 	sub.w	r0, r0, sl
 800462e:	fa03 f000 	lsl.w	r0, r3, r0
 8004632:	9b04      	ldr	r3, [sp, #16]
 8004634:	3401      	adds	r4, #1
 8004636:	4303      	orrs	r3, r0
 8004638:	9304      	str	r3, [sp, #16]
 800463a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800463e:	2206      	movs	r2, #6
 8004640:	4826      	ldr	r0, [pc, #152]	; (80046dc <_svfiprintf_r+0x1f4>)
 8004642:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004646:	f7ff fa65 	bl	8003b14 <memchr>
 800464a:	2800      	cmp	r0, #0
 800464c:	d038      	beq.n	80046c0 <_svfiprintf_r+0x1d8>
 800464e:	4b24      	ldr	r3, [pc, #144]	; (80046e0 <_svfiprintf_r+0x1f8>)
 8004650:	bb1b      	cbnz	r3, 800469a <_svfiprintf_r+0x1b2>
 8004652:	9b03      	ldr	r3, [sp, #12]
 8004654:	3307      	adds	r3, #7
 8004656:	f023 0307 	bic.w	r3, r3, #7
 800465a:	3308      	adds	r3, #8
 800465c:	9303      	str	r3, [sp, #12]
 800465e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004660:	4433      	add	r3, r6
 8004662:	9309      	str	r3, [sp, #36]	; 0x24
 8004664:	e767      	b.n	8004536 <_svfiprintf_r+0x4e>
 8004666:	460c      	mov	r4, r1
 8004668:	2001      	movs	r0, #1
 800466a:	fb0c 3202 	mla	r2, ip, r2, r3
 800466e:	e7a5      	b.n	80045bc <_svfiprintf_r+0xd4>
 8004670:	2300      	movs	r3, #0
 8004672:	f04f 0c0a 	mov.w	ip, #10
 8004676:	4619      	mov	r1, r3
 8004678:	3401      	adds	r4, #1
 800467a:	9305      	str	r3, [sp, #20]
 800467c:	4620      	mov	r0, r4
 800467e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004682:	3a30      	subs	r2, #48	; 0x30
 8004684:	2a09      	cmp	r2, #9
 8004686:	d903      	bls.n	8004690 <_svfiprintf_r+0x1a8>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0c5      	beq.n	8004618 <_svfiprintf_r+0x130>
 800468c:	9105      	str	r1, [sp, #20]
 800468e:	e7c3      	b.n	8004618 <_svfiprintf_r+0x130>
 8004690:	4604      	mov	r4, r0
 8004692:	2301      	movs	r3, #1
 8004694:	fb0c 2101 	mla	r1, ip, r1, r2
 8004698:	e7f0      	b.n	800467c <_svfiprintf_r+0x194>
 800469a:	ab03      	add	r3, sp, #12
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	462a      	mov	r2, r5
 80046a0:	4638      	mov	r0, r7
 80046a2:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <_svfiprintf_r+0x1fc>)
 80046a4:	a904      	add	r1, sp, #16
 80046a6:	f7fd ffcd 	bl	8002644 <_printf_float>
 80046aa:	1c42      	adds	r2, r0, #1
 80046ac:	4606      	mov	r6, r0
 80046ae:	d1d6      	bne.n	800465e <_svfiprintf_r+0x176>
 80046b0:	89ab      	ldrh	r3, [r5, #12]
 80046b2:	065b      	lsls	r3, r3, #25
 80046b4:	f53f af2c 	bmi.w	8004510 <_svfiprintf_r+0x28>
 80046b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046ba:	b01d      	add	sp, #116	; 0x74
 80046bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c0:	ab03      	add	r3, sp, #12
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	462a      	mov	r2, r5
 80046c6:	4638      	mov	r0, r7
 80046c8:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <_svfiprintf_r+0x1fc>)
 80046ca:	a904      	add	r1, sp, #16
 80046cc:	f7fe fa56 	bl	8002b7c <_printf_i>
 80046d0:	e7eb      	b.n	80046aa <_svfiprintf_r+0x1c2>
 80046d2:	bf00      	nop
 80046d4:	08005554 	.word	0x08005554
 80046d8:	0800555a 	.word	0x0800555a
 80046dc:	0800555e 	.word	0x0800555e
 80046e0:	08002645 	.word	0x08002645
 80046e4:	08004431 	.word	0x08004431

080046e8 <_sbrk_r>:
 80046e8:	b538      	push	{r3, r4, r5, lr}
 80046ea:	2300      	movs	r3, #0
 80046ec:	4d05      	ldr	r5, [pc, #20]	; (8004704 <_sbrk_r+0x1c>)
 80046ee:	4604      	mov	r4, r0
 80046f0:	4608      	mov	r0, r1
 80046f2:	602b      	str	r3, [r5, #0]
 80046f4:	f7fd fe64 	bl	80023c0 <_sbrk>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	d102      	bne.n	8004702 <_sbrk_r+0x1a>
 80046fc:	682b      	ldr	r3, [r5, #0]
 80046fe:	b103      	cbz	r3, 8004702 <_sbrk_r+0x1a>
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	bd38      	pop	{r3, r4, r5, pc}
 8004704:	200002d8 	.word	0x200002d8

08004708 <__assert_func>:
 8004708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800470a:	4614      	mov	r4, r2
 800470c:	461a      	mov	r2, r3
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <__assert_func+0x2c>)
 8004710:	4605      	mov	r5, r0
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68d8      	ldr	r0, [r3, #12]
 8004716:	b14c      	cbz	r4, 800472c <__assert_func+0x24>
 8004718:	4b07      	ldr	r3, [pc, #28]	; (8004738 <__assert_func+0x30>)
 800471a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800471e:	9100      	str	r1, [sp, #0]
 8004720:	462b      	mov	r3, r5
 8004722:	4906      	ldr	r1, [pc, #24]	; (800473c <__assert_func+0x34>)
 8004724:	f000 f80e 	bl	8004744 <fiprintf>
 8004728:	f000 faaa 	bl	8004c80 <abort>
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <__assert_func+0x38>)
 800472e:	461c      	mov	r4, r3
 8004730:	e7f3      	b.n	800471a <__assert_func+0x12>
 8004732:	bf00      	nop
 8004734:	2000000c 	.word	0x2000000c
 8004738:	08005565 	.word	0x08005565
 800473c:	08005572 	.word	0x08005572
 8004740:	080055a0 	.word	0x080055a0

08004744 <fiprintf>:
 8004744:	b40e      	push	{r1, r2, r3}
 8004746:	b503      	push	{r0, r1, lr}
 8004748:	4601      	mov	r1, r0
 800474a:	ab03      	add	r3, sp, #12
 800474c:	4805      	ldr	r0, [pc, #20]	; (8004764 <fiprintf+0x20>)
 800474e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004752:	6800      	ldr	r0, [r0, #0]
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	f000 f895 	bl	8004884 <_vfiprintf_r>
 800475a:	b002      	add	sp, #8
 800475c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004760:	b003      	add	sp, #12
 8004762:	4770      	bx	lr
 8004764:	2000000c 	.word	0x2000000c

08004768 <__ascii_mbtowc>:
 8004768:	b082      	sub	sp, #8
 800476a:	b901      	cbnz	r1, 800476e <__ascii_mbtowc+0x6>
 800476c:	a901      	add	r1, sp, #4
 800476e:	b142      	cbz	r2, 8004782 <__ascii_mbtowc+0x1a>
 8004770:	b14b      	cbz	r3, 8004786 <__ascii_mbtowc+0x1e>
 8004772:	7813      	ldrb	r3, [r2, #0]
 8004774:	600b      	str	r3, [r1, #0]
 8004776:	7812      	ldrb	r2, [r2, #0]
 8004778:	1e10      	subs	r0, r2, #0
 800477a:	bf18      	it	ne
 800477c:	2001      	movne	r0, #1
 800477e:	b002      	add	sp, #8
 8004780:	4770      	bx	lr
 8004782:	4610      	mov	r0, r2
 8004784:	e7fb      	b.n	800477e <__ascii_mbtowc+0x16>
 8004786:	f06f 0001 	mvn.w	r0, #1
 800478a:	e7f8      	b.n	800477e <__ascii_mbtowc+0x16>

0800478c <memmove>:
 800478c:	4288      	cmp	r0, r1
 800478e:	b510      	push	{r4, lr}
 8004790:	eb01 0402 	add.w	r4, r1, r2
 8004794:	d902      	bls.n	800479c <memmove+0x10>
 8004796:	4284      	cmp	r4, r0
 8004798:	4623      	mov	r3, r4
 800479a:	d807      	bhi.n	80047ac <memmove+0x20>
 800479c:	1e43      	subs	r3, r0, #1
 800479e:	42a1      	cmp	r1, r4
 80047a0:	d008      	beq.n	80047b4 <memmove+0x28>
 80047a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047aa:	e7f8      	b.n	800479e <memmove+0x12>
 80047ac:	4601      	mov	r1, r0
 80047ae:	4402      	add	r2, r0
 80047b0:	428a      	cmp	r2, r1
 80047b2:	d100      	bne.n	80047b6 <memmove+0x2a>
 80047b4:	bd10      	pop	{r4, pc}
 80047b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047be:	e7f7      	b.n	80047b0 <memmove+0x24>

080047c0 <__malloc_lock>:
 80047c0:	4801      	ldr	r0, [pc, #4]	; (80047c8 <__malloc_lock+0x8>)
 80047c2:	f000 bc19 	b.w	8004ff8 <__retarget_lock_acquire_recursive>
 80047c6:	bf00      	nop
 80047c8:	200002dc 	.word	0x200002dc

080047cc <__malloc_unlock>:
 80047cc:	4801      	ldr	r0, [pc, #4]	; (80047d4 <__malloc_unlock+0x8>)
 80047ce:	f000 bc14 	b.w	8004ffa <__retarget_lock_release_recursive>
 80047d2:	bf00      	nop
 80047d4:	200002dc 	.word	0x200002dc

080047d8 <_realloc_r>:
 80047d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047dc:	4680      	mov	r8, r0
 80047de:	4614      	mov	r4, r2
 80047e0:	460e      	mov	r6, r1
 80047e2:	b921      	cbnz	r1, 80047ee <_realloc_r+0x16>
 80047e4:	4611      	mov	r1, r2
 80047e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047ea:	f7ff bdad 	b.w	8004348 <_malloc_r>
 80047ee:	b92a      	cbnz	r2, 80047fc <_realloc_r+0x24>
 80047f0:	f7ff fd42 	bl	8004278 <_free_r>
 80047f4:	4625      	mov	r5, r4
 80047f6:	4628      	mov	r0, r5
 80047f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047fc:	f000 fc64 	bl	80050c8 <_malloc_usable_size_r>
 8004800:	4284      	cmp	r4, r0
 8004802:	4607      	mov	r7, r0
 8004804:	d802      	bhi.n	800480c <_realloc_r+0x34>
 8004806:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800480a:	d812      	bhi.n	8004832 <_realloc_r+0x5a>
 800480c:	4621      	mov	r1, r4
 800480e:	4640      	mov	r0, r8
 8004810:	f7ff fd9a 	bl	8004348 <_malloc_r>
 8004814:	4605      	mov	r5, r0
 8004816:	2800      	cmp	r0, #0
 8004818:	d0ed      	beq.n	80047f6 <_realloc_r+0x1e>
 800481a:	42bc      	cmp	r4, r7
 800481c:	4622      	mov	r2, r4
 800481e:	4631      	mov	r1, r6
 8004820:	bf28      	it	cs
 8004822:	463a      	movcs	r2, r7
 8004824:	f7ff f984 	bl	8003b30 <memcpy>
 8004828:	4631      	mov	r1, r6
 800482a:	4640      	mov	r0, r8
 800482c:	f7ff fd24 	bl	8004278 <_free_r>
 8004830:	e7e1      	b.n	80047f6 <_realloc_r+0x1e>
 8004832:	4635      	mov	r5, r6
 8004834:	e7df      	b.n	80047f6 <_realloc_r+0x1e>

08004836 <__sfputc_r>:
 8004836:	6893      	ldr	r3, [r2, #8]
 8004838:	b410      	push	{r4}
 800483a:	3b01      	subs	r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	6093      	str	r3, [r2, #8]
 8004840:	da07      	bge.n	8004852 <__sfputc_r+0x1c>
 8004842:	6994      	ldr	r4, [r2, #24]
 8004844:	42a3      	cmp	r3, r4
 8004846:	db01      	blt.n	800484c <__sfputc_r+0x16>
 8004848:	290a      	cmp	r1, #10
 800484a:	d102      	bne.n	8004852 <__sfputc_r+0x1c>
 800484c:	bc10      	pop	{r4}
 800484e:	f000 b949 	b.w	8004ae4 <__swbuf_r>
 8004852:	6813      	ldr	r3, [r2, #0]
 8004854:	1c58      	adds	r0, r3, #1
 8004856:	6010      	str	r0, [r2, #0]
 8004858:	7019      	strb	r1, [r3, #0]
 800485a:	4608      	mov	r0, r1
 800485c:	bc10      	pop	{r4}
 800485e:	4770      	bx	lr

08004860 <__sfputs_r>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	4606      	mov	r6, r0
 8004864:	460f      	mov	r7, r1
 8004866:	4614      	mov	r4, r2
 8004868:	18d5      	adds	r5, r2, r3
 800486a:	42ac      	cmp	r4, r5
 800486c:	d101      	bne.n	8004872 <__sfputs_r+0x12>
 800486e:	2000      	movs	r0, #0
 8004870:	e007      	b.n	8004882 <__sfputs_r+0x22>
 8004872:	463a      	mov	r2, r7
 8004874:	4630      	mov	r0, r6
 8004876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800487a:	f7ff ffdc 	bl	8004836 <__sfputc_r>
 800487e:	1c43      	adds	r3, r0, #1
 8004880:	d1f3      	bne.n	800486a <__sfputs_r+0xa>
 8004882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004884 <_vfiprintf_r>:
 8004884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004888:	460d      	mov	r5, r1
 800488a:	4614      	mov	r4, r2
 800488c:	4698      	mov	r8, r3
 800488e:	4606      	mov	r6, r0
 8004890:	b09d      	sub	sp, #116	; 0x74
 8004892:	b118      	cbz	r0, 800489c <_vfiprintf_r+0x18>
 8004894:	6983      	ldr	r3, [r0, #24]
 8004896:	b90b      	cbnz	r3, 800489c <_vfiprintf_r+0x18>
 8004898:	f000 fb10 	bl	8004ebc <__sinit>
 800489c:	4b89      	ldr	r3, [pc, #548]	; (8004ac4 <_vfiprintf_r+0x240>)
 800489e:	429d      	cmp	r5, r3
 80048a0:	d11b      	bne.n	80048da <_vfiprintf_r+0x56>
 80048a2:	6875      	ldr	r5, [r6, #4]
 80048a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048a6:	07d9      	lsls	r1, r3, #31
 80048a8:	d405      	bmi.n	80048b6 <_vfiprintf_r+0x32>
 80048aa:	89ab      	ldrh	r3, [r5, #12]
 80048ac:	059a      	lsls	r2, r3, #22
 80048ae:	d402      	bmi.n	80048b6 <_vfiprintf_r+0x32>
 80048b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048b2:	f000 fba1 	bl	8004ff8 <__retarget_lock_acquire_recursive>
 80048b6:	89ab      	ldrh	r3, [r5, #12]
 80048b8:	071b      	lsls	r3, r3, #28
 80048ba:	d501      	bpl.n	80048c0 <_vfiprintf_r+0x3c>
 80048bc:	692b      	ldr	r3, [r5, #16]
 80048be:	b9eb      	cbnz	r3, 80048fc <_vfiprintf_r+0x78>
 80048c0:	4629      	mov	r1, r5
 80048c2:	4630      	mov	r0, r6
 80048c4:	f000 f96e 	bl	8004ba4 <__swsetup_r>
 80048c8:	b1c0      	cbz	r0, 80048fc <_vfiprintf_r+0x78>
 80048ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048cc:	07dc      	lsls	r4, r3, #31
 80048ce:	d50e      	bpl.n	80048ee <_vfiprintf_r+0x6a>
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295
 80048d4:	b01d      	add	sp, #116	; 0x74
 80048d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048da:	4b7b      	ldr	r3, [pc, #492]	; (8004ac8 <_vfiprintf_r+0x244>)
 80048dc:	429d      	cmp	r5, r3
 80048de:	d101      	bne.n	80048e4 <_vfiprintf_r+0x60>
 80048e0:	68b5      	ldr	r5, [r6, #8]
 80048e2:	e7df      	b.n	80048a4 <_vfiprintf_r+0x20>
 80048e4:	4b79      	ldr	r3, [pc, #484]	; (8004acc <_vfiprintf_r+0x248>)
 80048e6:	429d      	cmp	r5, r3
 80048e8:	bf08      	it	eq
 80048ea:	68f5      	ldreq	r5, [r6, #12]
 80048ec:	e7da      	b.n	80048a4 <_vfiprintf_r+0x20>
 80048ee:	89ab      	ldrh	r3, [r5, #12]
 80048f0:	0598      	lsls	r0, r3, #22
 80048f2:	d4ed      	bmi.n	80048d0 <_vfiprintf_r+0x4c>
 80048f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048f6:	f000 fb80 	bl	8004ffa <__retarget_lock_release_recursive>
 80048fa:	e7e9      	b.n	80048d0 <_vfiprintf_r+0x4c>
 80048fc:	2300      	movs	r3, #0
 80048fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004900:	2320      	movs	r3, #32
 8004902:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004906:	2330      	movs	r3, #48	; 0x30
 8004908:	f04f 0901 	mov.w	r9, #1
 800490c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004910:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004ad0 <_vfiprintf_r+0x24c>
 8004914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004918:	4623      	mov	r3, r4
 800491a:	469a      	mov	sl, r3
 800491c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004920:	b10a      	cbz	r2, 8004926 <_vfiprintf_r+0xa2>
 8004922:	2a25      	cmp	r2, #37	; 0x25
 8004924:	d1f9      	bne.n	800491a <_vfiprintf_r+0x96>
 8004926:	ebba 0b04 	subs.w	fp, sl, r4
 800492a:	d00b      	beq.n	8004944 <_vfiprintf_r+0xc0>
 800492c:	465b      	mov	r3, fp
 800492e:	4622      	mov	r2, r4
 8004930:	4629      	mov	r1, r5
 8004932:	4630      	mov	r0, r6
 8004934:	f7ff ff94 	bl	8004860 <__sfputs_r>
 8004938:	3001      	adds	r0, #1
 800493a:	f000 80aa 	beq.w	8004a92 <_vfiprintf_r+0x20e>
 800493e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004940:	445a      	add	r2, fp
 8004942:	9209      	str	r2, [sp, #36]	; 0x24
 8004944:	f89a 3000 	ldrb.w	r3, [sl]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80a2 	beq.w	8004a92 <_vfiprintf_r+0x20e>
 800494e:	2300      	movs	r3, #0
 8004950:	f04f 32ff 	mov.w	r2, #4294967295
 8004954:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004958:	f10a 0a01 	add.w	sl, sl, #1
 800495c:	9304      	str	r3, [sp, #16]
 800495e:	9307      	str	r3, [sp, #28]
 8004960:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004964:	931a      	str	r3, [sp, #104]	; 0x68
 8004966:	4654      	mov	r4, sl
 8004968:	2205      	movs	r2, #5
 800496a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800496e:	4858      	ldr	r0, [pc, #352]	; (8004ad0 <_vfiprintf_r+0x24c>)
 8004970:	f7ff f8d0 	bl	8003b14 <memchr>
 8004974:	9a04      	ldr	r2, [sp, #16]
 8004976:	b9d8      	cbnz	r0, 80049b0 <_vfiprintf_r+0x12c>
 8004978:	06d1      	lsls	r1, r2, #27
 800497a:	bf44      	itt	mi
 800497c:	2320      	movmi	r3, #32
 800497e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004982:	0713      	lsls	r3, r2, #28
 8004984:	bf44      	itt	mi
 8004986:	232b      	movmi	r3, #43	; 0x2b
 8004988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800498c:	f89a 3000 	ldrb.w	r3, [sl]
 8004990:	2b2a      	cmp	r3, #42	; 0x2a
 8004992:	d015      	beq.n	80049c0 <_vfiprintf_r+0x13c>
 8004994:	4654      	mov	r4, sl
 8004996:	2000      	movs	r0, #0
 8004998:	f04f 0c0a 	mov.w	ip, #10
 800499c:	9a07      	ldr	r2, [sp, #28]
 800499e:	4621      	mov	r1, r4
 80049a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049a4:	3b30      	subs	r3, #48	; 0x30
 80049a6:	2b09      	cmp	r3, #9
 80049a8:	d94e      	bls.n	8004a48 <_vfiprintf_r+0x1c4>
 80049aa:	b1b0      	cbz	r0, 80049da <_vfiprintf_r+0x156>
 80049ac:	9207      	str	r2, [sp, #28]
 80049ae:	e014      	b.n	80049da <_vfiprintf_r+0x156>
 80049b0:	eba0 0308 	sub.w	r3, r0, r8
 80049b4:	fa09 f303 	lsl.w	r3, r9, r3
 80049b8:	4313      	orrs	r3, r2
 80049ba:	46a2      	mov	sl, r4
 80049bc:	9304      	str	r3, [sp, #16]
 80049be:	e7d2      	b.n	8004966 <_vfiprintf_r+0xe2>
 80049c0:	9b03      	ldr	r3, [sp, #12]
 80049c2:	1d19      	adds	r1, r3, #4
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	9103      	str	r1, [sp, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bfbb      	ittet	lt
 80049cc:	425b      	neglt	r3, r3
 80049ce:	f042 0202 	orrlt.w	r2, r2, #2
 80049d2:	9307      	strge	r3, [sp, #28]
 80049d4:	9307      	strlt	r3, [sp, #28]
 80049d6:	bfb8      	it	lt
 80049d8:	9204      	strlt	r2, [sp, #16]
 80049da:	7823      	ldrb	r3, [r4, #0]
 80049dc:	2b2e      	cmp	r3, #46	; 0x2e
 80049de:	d10c      	bne.n	80049fa <_vfiprintf_r+0x176>
 80049e0:	7863      	ldrb	r3, [r4, #1]
 80049e2:	2b2a      	cmp	r3, #42	; 0x2a
 80049e4:	d135      	bne.n	8004a52 <_vfiprintf_r+0x1ce>
 80049e6:	9b03      	ldr	r3, [sp, #12]
 80049e8:	3402      	adds	r4, #2
 80049ea:	1d1a      	adds	r2, r3, #4
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	9203      	str	r2, [sp, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bfb8      	it	lt
 80049f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80049f8:	9305      	str	r3, [sp, #20]
 80049fa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004ad4 <_vfiprintf_r+0x250>
 80049fe:	2203      	movs	r2, #3
 8004a00:	4650      	mov	r0, sl
 8004a02:	7821      	ldrb	r1, [r4, #0]
 8004a04:	f7ff f886 	bl	8003b14 <memchr>
 8004a08:	b140      	cbz	r0, 8004a1c <_vfiprintf_r+0x198>
 8004a0a:	2340      	movs	r3, #64	; 0x40
 8004a0c:	eba0 000a 	sub.w	r0, r0, sl
 8004a10:	fa03 f000 	lsl.w	r0, r3, r0
 8004a14:	9b04      	ldr	r3, [sp, #16]
 8004a16:	3401      	adds	r4, #1
 8004a18:	4303      	orrs	r3, r0
 8004a1a:	9304      	str	r3, [sp, #16]
 8004a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a20:	2206      	movs	r2, #6
 8004a22:	482d      	ldr	r0, [pc, #180]	; (8004ad8 <_vfiprintf_r+0x254>)
 8004a24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a28:	f7ff f874 	bl	8003b14 <memchr>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	d03f      	beq.n	8004ab0 <_vfiprintf_r+0x22c>
 8004a30:	4b2a      	ldr	r3, [pc, #168]	; (8004adc <_vfiprintf_r+0x258>)
 8004a32:	bb1b      	cbnz	r3, 8004a7c <_vfiprintf_r+0x1f8>
 8004a34:	9b03      	ldr	r3, [sp, #12]
 8004a36:	3307      	adds	r3, #7
 8004a38:	f023 0307 	bic.w	r3, r3, #7
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	9303      	str	r3, [sp, #12]
 8004a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a42:	443b      	add	r3, r7
 8004a44:	9309      	str	r3, [sp, #36]	; 0x24
 8004a46:	e767      	b.n	8004918 <_vfiprintf_r+0x94>
 8004a48:	460c      	mov	r4, r1
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a50:	e7a5      	b.n	800499e <_vfiprintf_r+0x11a>
 8004a52:	2300      	movs	r3, #0
 8004a54:	f04f 0c0a 	mov.w	ip, #10
 8004a58:	4619      	mov	r1, r3
 8004a5a:	3401      	adds	r4, #1
 8004a5c:	9305      	str	r3, [sp, #20]
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a64:	3a30      	subs	r2, #48	; 0x30
 8004a66:	2a09      	cmp	r2, #9
 8004a68:	d903      	bls.n	8004a72 <_vfiprintf_r+0x1ee>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0c5      	beq.n	80049fa <_vfiprintf_r+0x176>
 8004a6e:	9105      	str	r1, [sp, #20]
 8004a70:	e7c3      	b.n	80049fa <_vfiprintf_r+0x176>
 8004a72:	4604      	mov	r4, r0
 8004a74:	2301      	movs	r3, #1
 8004a76:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a7a:	e7f0      	b.n	8004a5e <_vfiprintf_r+0x1da>
 8004a7c:	ab03      	add	r3, sp, #12
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	462a      	mov	r2, r5
 8004a82:	4630      	mov	r0, r6
 8004a84:	4b16      	ldr	r3, [pc, #88]	; (8004ae0 <_vfiprintf_r+0x25c>)
 8004a86:	a904      	add	r1, sp, #16
 8004a88:	f7fd fddc 	bl	8002644 <_printf_float>
 8004a8c:	4607      	mov	r7, r0
 8004a8e:	1c78      	adds	r0, r7, #1
 8004a90:	d1d6      	bne.n	8004a40 <_vfiprintf_r+0x1bc>
 8004a92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a94:	07d9      	lsls	r1, r3, #31
 8004a96:	d405      	bmi.n	8004aa4 <_vfiprintf_r+0x220>
 8004a98:	89ab      	ldrh	r3, [r5, #12]
 8004a9a:	059a      	lsls	r2, r3, #22
 8004a9c:	d402      	bmi.n	8004aa4 <_vfiprintf_r+0x220>
 8004a9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004aa0:	f000 faab 	bl	8004ffa <__retarget_lock_release_recursive>
 8004aa4:	89ab      	ldrh	r3, [r5, #12]
 8004aa6:	065b      	lsls	r3, r3, #25
 8004aa8:	f53f af12 	bmi.w	80048d0 <_vfiprintf_r+0x4c>
 8004aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aae:	e711      	b.n	80048d4 <_vfiprintf_r+0x50>
 8004ab0:	ab03      	add	r3, sp, #12
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	462a      	mov	r2, r5
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <_vfiprintf_r+0x25c>)
 8004aba:	a904      	add	r1, sp, #16
 8004abc:	f7fe f85e 	bl	8002b7c <_printf_i>
 8004ac0:	e7e4      	b.n	8004a8c <_vfiprintf_r+0x208>
 8004ac2:	bf00      	nop
 8004ac4:	080056cc 	.word	0x080056cc
 8004ac8:	080056ec 	.word	0x080056ec
 8004acc:	080056ac 	.word	0x080056ac
 8004ad0:	08005554 	.word	0x08005554
 8004ad4:	0800555a 	.word	0x0800555a
 8004ad8:	0800555e 	.word	0x0800555e
 8004adc:	08002645 	.word	0x08002645
 8004ae0:	08004861 	.word	0x08004861

08004ae4 <__swbuf_r>:
 8004ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae6:	460e      	mov	r6, r1
 8004ae8:	4614      	mov	r4, r2
 8004aea:	4605      	mov	r5, r0
 8004aec:	b118      	cbz	r0, 8004af6 <__swbuf_r+0x12>
 8004aee:	6983      	ldr	r3, [r0, #24]
 8004af0:	b90b      	cbnz	r3, 8004af6 <__swbuf_r+0x12>
 8004af2:	f000 f9e3 	bl	8004ebc <__sinit>
 8004af6:	4b21      	ldr	r3, [pc, #132]	; (8004b7c <__swbuf_r+0x98>)
 8004af8:	429c      	cmp	r4, r3
 8004afa:	d12b      	bne.n	8004b54 <__swbuf_r+0x70>
 8004afc:	686c      	ldr	r4, [r5, #4]
 8004afe:	69a3      	ldr	r3, [r4, #24]
 8004b00:	60a3      	str	r3, [r4, #8]
 8004b02:	89a3      	ldrh	r3, [r4, #12]
 8004b04:	071a      	lsls	r2, r3, #28
 8004b06:	d52f      	bpl.n	8004b68 <__swbuf_r+0x84>
 8004b08:	6923      	ldr	r3, [r4, #16]
 8004b0a:	b36b      	cbz	r3, 8004b68 <__swbuf_r+0x84>
 8004b0c:	6923      	ldr	r3, [r4, #16]
 8004b0e:	6820      	ldr	r0, [r4, #0]
 8004b10:	b2f6      	uxtb	r6, r6
 8004b12:	1ac0      	subs	r0, r0, r3
 8004b14:	6963      	ldr	r3, [r4, #20]
 8004b16:	4637      	mov	r7, r6
 8004b18:	4283      	cmp	r3, r0
 8004b1a:	dc04      	bgt.n	8004b26 <__swbuf_r+0x42>
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f000 f938 	bl	8004d94 <_fflush_r>
 8004b24:	bb30      	cbnz	r0, 8004b74 <__swbuf_r+0x90>
 8004b26:	68a3      	ldr	r3, [r4, #8]
 8004b28:	3001      	adds	r0, #1
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	60a3      	str	r3, [r4, #8]
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	6022      	str	r2, [r4, #0]
 8004b34:	701e      	strb	r6, [r3, #0]
 8004b36:	6963      	ldr	r3, [r4, #20]
 8004b38:	4283      	cmp	r3, r0
 8004b3a:	d004      	beq.n	8004b46 <__swbuf_r+0x62>
 8004b3c:	89a3      	ldrh	r3, [r4, #12]
 8004b3e:	07db      	lsls	r3, r3, #31
 8004b40:	d506      	bpl.n	8004b50 <__swbuf_r+0x6c>
 8004b42:	2e0a      	cmp	r6, #10
 8004b44:	d104      	bne.n	8004b50 <__swbuf_r+0x6c>
 8004b46:	4621      	mov	r1, r4
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f000 f923 	bl	8004d94 <_fflush_r>
 8004b4e:	b988      	cbnz	r0, 8004b74 <__swbuf_r+0x90>
 8004b50:	4638      	mov	r0, r7
 8004b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b54:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <__swbuf_r+0x9c>)
 8004b56:	429c      	cmp	r4, r3
 8004b58:	d101      	bne.n	8004b5e <__swbuf_r+0x7a>
 8004b5a:	68ac      	ldr	r4, [r5, #8]
 8004b5c:	e7cf      	b.n	8004afe <__swbuf_r+0x1a>
 8004b5e:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <__swbuf_r+0xa0>)
 8004b60:	429c      	cmp	r4, r3
 8004b62:	bf08      	it	eq
 8004b64:	68ec      	ldreq	r4, [r5, #12]
 8004b66:	e7ca      	b.n	8004afe <__swbuf_r+0x1a>
 8004b68:	4621      	mov	r1, r4
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f000 f81a 	bl	8004ba4 <__swsetup_r>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d0cb      	beq.n	8004b0c <__swbuf_r+0x28>
 8004b74:	f04f 37ff 	mov.w	r7, #4294967295
 8004b78:	e7ea      	b.n	8004b50 <__swbuf_r+0x6c>
 8004b7a:	bf00      	nop
 8004b7c:	080056cc 	.word	0x080056cc
 8004b80:	080056ec 	.word	0x080056ec
 8004b84:	080056ac 	.word	0x080056ac

08004b88 <__ascii_wctomb>:
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4608      	mov	r0, r1
 8004b8c:	b141      	cbz	r1, 8004ba0 <__ascii_wctomb+0x18>
 8004b8e:	2aff      	cmp	r2, #255	; 0xff
 8004b90:	d904      	bls.n	8004b9c <__ascii_wctomb+0x14>
 8004b92:	228a      	movs	r2, #138	; 0x8a
 8004b94:	f04f 30ff 	mov.w	r0, #4294967295
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	4770      	bx	lr
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	700a      	strb	r2, [r1, #0]
 8004ba0:	4770      	bx	lr
	...

08004ba4 <__swsetup_r>:
 8004ba4:	4b32      	ldr	r3, [pc, #200]	; (8004c70 <__swsetup_r+0xcc>)
 8004ba6:	b570      	push	{r4, r5, r6, lr}
 8004ba8:	681d      	ldr	r5, [r3, #0]
 8004baa:	4606      	mov	r6, r0
 8004bac:	460c      	mov	r4, r1
 8004bae:	b125      	cbz	r5, 8004bba <__swsetup_r+0x16>
 8004bb0:	69ab      	ldr	r3, [r5, #24]
 8004bb2:	b913      	cbnz	r3, 8004bba <__swsetup_r+0x16>
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f000 f981 	bl	8004ebc <__sinit>
 8004bba:	4b2e      	ldr	r3, [pc, #184]	; (8004c74 <__swsetup_r+0xd0>)
 8004bbc:	429c      	cmp	r4, r3
 8004bbe:	d10f      	bne.n	8004be0 <__swsetup_r+0x3c>
 8004bc0:	686c      	ldr	r4, [r5, #4]
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bc8:	0719      	lsls	r1, r3, #28
 8004bca:	d42c      	bmi.n	8004c26 <__swsetup_r+0x82>
 8004bcc:	06dd      	lsls	r5, r3, #27
 8004bce:	d411      	bmi.n	8004bf4 <__swsetup_r+0x50>
 8004bd0:	2309      	movs	r3, #9
 8004bd2:	6033      	str	r3, [r6, #0]
 8004bd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bdc:	81a3      	strh	r3, [r4, #12]
 8004bde:	e03e      	b.n	8004c5e <__swsetup_r+0xba>
 8004be0:	4b25      	ldr	r3, [pc, #148]	; (8004c78 <__swsetup_r+0xd4>)
 8004be2:	429c      	cmp	r4, r3
 8004be4:	d101      	bne.n	8004bea <__swsetup_r+0x46>
 8004be6:	68ac      	ldr	r4, [r5, #8]
 8004be8:	e7eb      	b.n	8004bc2 <__swsetup_r+0x1e>
 8004bea:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <__swsetup_r+0xd8>)
 8004bec:	429c      	cmp	r4, r3
 8004bee:	bf08      	it	eq
 8004bf0:	68ec      	ldreq	r4, [r5, #12]
 8004bf2:	e7e6      	b.n	8004bc2 <__swsetup_r+0x1e>
 8004bf4:	0758      	lsls	r0, r3, #29
 8004bf6:	d512      	bpl.n	8004c1e <__swsetup_r+0x7a>
 8004bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bfa:	b141      	cbz	r1, 8004c0e <__swsetup_r+0x6a>
 8004bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c00:	4299      	cmp	r1, r3
 8004c02:	d002      	beq.n	8004c0a <__swsetup_r+0x66>
 8004c04:	4630      	mov	r0, r6
 8004c06:	f7ff fb37 	bl	8004278 <_free_r>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c14:	81a3      	strh	r3, [r4, #12]
 8004c16:	2300      	movs	r3, #0
 8004c18:	6063      	str	r3, [r4, #4]
 8004c1a:	6923      	ldr	r3, [r4, #16]
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	f043 0308 	orr.w	r3, r3, #8
 8004c24:	81a3      	strh	r3, [r4, #12]
 8004c26:	6923      	ldr	r3, [r4, #16]
 8004c28:	b94b      	cbnz	r3, 8004c3e <__swsetup_r+0x9a>
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c34:	d003      	beq.n	8004c3e <__swsetup_r+0x9a>
 8004c36:	4621      	mov	r1, r4
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f000 fa05 	bl	8005048 <__smakebuf_r>
 8004c3e:	89a0      	ldrh	r0, [r4, #12]
 8004c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c44:	f010 0301 	ands.w	r3, r0, #1
 8004c48:	d00a      	beq.n	8004c60 <__swsetup_r+0xbc>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60a3      	str	r3, [r4, #8]
 8004c4e:	6963      	ldr	r3, [r4, #20]
 8004c50:	425b      	negs	r3, r3
 8004c52:	61a3      	str	r3, [r4, #24]
 8004c54:	6923      	ldr	r3, [r4, #16]
 8004c56:	b943      	cbnz	r3, 8004c6a <__swsetup_r+0xc6>
 8004c58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c5c:	d1ba      	bne.n	8004bd4 <__swsetup_r+0x30>
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	0781      	lsls	r1, r0, #30
 8004c62:	bf58      	it	pl
 8004c64:	6963      	ldrpl	r3, [r4, #20]
 8004c66:	60a3      	str	r3, [r4, #8]
 8004c68:	e7f4      	b.n	8004c54 <__swsetup_r+0xb0>
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	e7f7      	b.n	8004c5e <__swsetup_r+0xba>
 8004c6e:	bf00      	nop
 8004c70:	2000000c 	.word	0x2000000c
 8004c74:	080056cc 	.word	0x080056cc
 8004c78:	080056ec 	.word	0x080056ec
 8004c7c:	080056ac 	.word	0x080056ac

08004c80 <abort>:
 8004c80:	2006      	movs	r0, #6
 8004c82:	b508      	push	{r3, lr}
 8004c84:	f000 fa50 	bl	8005128 <raise>
 8004c88:	2001      	movs	r0, #1
 8004c8a:	f7fd fb77 	bl	800237c <_exit>
	...

08004c90 <__sflush_r>:
 8004c90:	898a      	ldrh	r2, [r1, #12]
 8004c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c94:	4605      	mov	r5, r0
 8004c96:	0710      	lsls	r0, r2, #28
 8004c98:	460c      	mov	r4, r1
 8004c9a:	d457      	bmi.n	8004d4c <__sflush_r+0xbc>
 8004c9c:	684b      	ldr	r3, [r1, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	dc04      	bgt.n	8004cac <__sflush_r+0x1c>
 8004ca2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	dc01      	bgt.n	8004cac <__sflush_r+0x1c>
 8004ca8:	2000      	movs	r0, #0
 8004caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cae:	2e00      	cmp	r6, #0
 8004cb0:	d0fa      	beq.n	8004ca8 <__sflush_r+0x18>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cb8:	682f      	ldr	r7, [r5, #0]
 8004cba:	602b      	str	r3, [r5, #0]
 8004cbc:	d032      	beq.n	8004d24 <__sflush_r+0x94>
 8004cbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	075a      	lsls	r2, r3, #29
 8004cc4:	d505      	bpl.n	8004cd2 <__sflush_r+0x42>
 8004cc6:	6863      	ldr	r3, [r4, #4]
 8004cc8:	1ac0      	subs	r0, r0, r3
 8004cca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ccc:	b10b      	cbz	r3, 8004cd2 <__sflush_r+0x42>
 8004cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cd0:	1ac0      	subs	r0, r0, r3
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cd8:	4628      	mov	r0, r5
 8004cda:	6a21      	ldr	r1, [r4, #32]
 8004cdc:	47b0      	blx	r6
 8004cde:	1c43      	adds	r3, r0, #1
 8004ce0:	89a3      	ldrh	r3, [r4, #12]
 8004ce2:	d106      	bne.n	8004cf2 <__sflush_r+0x62>
 8004ce4:	6829      	ldr	r1, [r5, #0]
 8004ce6:	291d      	cmp	r1, #29
 8004ce8:	d82c      	bhi.n	8004d44 <__sflush_r+0xb4>
 8004cea:	4a29      	ldr	r2, [pc, #164]	; (8004d90 <__sflush_r+0x100>)
 8004cec:	40ca      	lsrs	r2, r1
 8004cee:	07d6      	lsls	r6, r2, #31
 8004cf0:	d528      	bpl.n	8004d44 <__sflush_r+0xb4>
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	6062      	str	r2, [r4, #4]
 8004cf6:	6922      	ldr	r2, [r4, #16]
 8004cf8:	04d9      	lsls	r1, r3, #19
 8004cfa:	6022      	str	r2, [r4, #0]
 8004cfc:	d504      	bpl.n	8004d08 <__sflush_r+0x78>
 8004cfe:	1c42      	adds	r2, r0, #1
 8004d00:	d101      	bne.n	8004d06 <__sflush_r+0x76>
 8004d02:	682b      	ldr	r3, [r5, #0]
 8004d04:	b903      	cbnz	r3, 8004d08 <__sflush_r+0x78>
 8004d06:	6560      	str	r0, [r4, #84]	; 0x54
 8004d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d0a:	602f      	str	r7, [r5, #0]
 8004d0c:	2900      	cmp	r1, #0
 8004d0e:	d0cb      	beq.n	8004ca8 <__sflush_r+0x18>
 8004d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d14:	4299      	cmp	r1, r3
 8004d16:	d002      	beq.n	8004d1e <__sflush_r+0x8e>
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f7ff faad 	bl	8004278 <_free_r>
 8004d1e:	2000      	movs	r0, #0
 8004d20:	6360      	str	r0, [r4, #52]	; 0x34
 8004d22:	e7c2      	b.n	8004caa <__sflush_r+0x1a>
 8004d24:	6a21      	ldr	r1, [r4, #32]
 8004d26:	2301      	movs	r3, #1
 8004d28:	4628      	mov	r0, r5
 8004d2a:	47b0      	blx	r6
 8004d2c:	1c41      	adds	r1, r0, #1
 8004d2e:	d1c7      	bne.n	8004cc0 <__sflush_r+0x30>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0c4      	beq.n	8004cc0 <__sflush_r+0x30>
 8004d36:	2b1d      	cmp	r3, #29
 8004d38:	d001      	beq.n	8004d3e <__sflush_r+0xae>
 8004d3a:	2b16      	cmp	r3, #22
 8004d3c:	d101      	bne.n	8004d42 <__sflush_r+0xb2>
 8004d3e:	602f      	str	r7, [r5, #0]
 8004d40:	e7b2      	b.n	8004ca8 <__sflush_r+0x18>
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d48:	81a3      	strh	r3, [r4, #12]
 8004d4a:	e7ae      	b.n	8004caa <__sflush_r+0x1a>
 8004d4c:	690f      	ldr	r7, [r1, #16]
 8004d4e:	2f00      	cmp	r7, #0
 8004d50:	d0aa      	beq.n	8004ca8 <__sflush_r+0x18>
 8004d52:	0793      	lsls	r3, r2, #30
 8004d54:	bf18      	it	ne
 8004d56:	2300      	movne	r3, #0
 8004d58:	680e      	ldr	r6, [r1, #0]
 8004d5a:	bf08      	it	eq
 8004d5c:	694b      	ldreq	r3, [r1, #20]
 8004d5e:	1bf6      	subs	r6, r6, r7
 8004d60:	600f      	str	r7, [r1, #0]
 8004d62:	608b      	str	r3, [r1, #8]
 8004d64:	2e00      	cmp	r6, #0
 8004d66:	dd9f      	ble.n	8004ca8 <__sflush_r+0x18>
 8004d68:	4633      	mov	r3, r6
 8004d6a:	463a      	mov	r2, r7
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	6a21      	ldr	r1, [r4, #32]
 8004d70:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004d74:	47e0      	blx	ip
 8004d76:	2800      	cmp	r0, #0
 8004d78:	dc06      	bgt.n	8004d88 <__sflush_r+0xf8>
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d84:	81a3      	strh	r3, [r4, #12]
 8004d86:	e790      	b.n	8004caa <__sflush_r+0x1a>
 8004d88:	4407      	add	r7, r0
 8004d8a:	1a36      	subs	r6, r6, r0
 8004d8c:	e7ea      	b.n	8004d64 <__sflush_r+0xd4>
 8004d8e:	bf00      	nop
 8004d90:	20400001 	.word	0x20400001

08004d94 <_fflush_r>:
 8004d94:	b538      	push	{r3, r4, r5, lr}
 8004d96:	690b      	ldr	r3, [r1, #16]
 8004d98:	4605      	mov	r5, r0
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	b913      	cbnz	r3, 8004da4 <_fflush_r+0x10>
 8004d9e:	2500      	movs	r5, #0
 8004da0:	4628      	mov	r0, r5
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	b118      	cbz	r0, 8004dae <_fflush_r+0x1a>
 8004da6:	6983      	ldr	r3, [r0, #24]
 8004da8:	b90b      	cbnz	r3, 8004dae <_fflush_r+0x1a>
 8004daa:	f000 f887 	bl	8004ebc <__sinit>
 8004dae:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <_fflush_r+0x6c>)
 8004db0:	429c      	cmp	r4, r3
 8004db2:	d11b      	bne.n	8004dec <_fflush_r+0x58>
 8004db4:	686c      	ldr	r4, [r5, #4]
 8004db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0ef      	beq.n	8004d9e <_fflush_r+0xa>
 8004dbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dc0:	07d0      	lsls	r0, r2, #31
 8004dc2:	d404      	bmi.n	8004dce <_fflush_r+0x3a>
 8004dc4:	0599      	lsls	r1, r3, #22
 8004dc6:	d402      	bmi.n	8004dce <_fflush_r+0x3a>
 8004dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dca:	f000 f915 	bl	8004ff8 <__retarget_lock_acquire_recursive>
 8004dce:	4628      	mov	r0, r5
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	f7ff ff5d 	bl	8004c90 <__sflush_r>
 8004dd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dd8:	4605      	mov	r5, r0
 8004dda:	07da      	lsls	r2, r3, #31
 8004ddc:	d4e0      	bmi.n	8004da0 <_fflush_r+0xc>
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	059b      	lsls	r3, r3, #22
 8004de2:	d4dd      	bmi.n	8004da0 <_fflush_r+0xc>
 8004de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004de6:	f000 f908 	bl	8004ffa <__retarget_lock_release_recursive>
 8004dea:	e7d9      	b.n	8004da0 <_fflush_r+0xc>
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <_fflush_r+0x70>)
 8004dee:	429c      	cmp	r4, r3
 8004df0:	d101      	bne.n	8004df6 <_fflush_r+0x62>
 8004df2:	68ac      	ldr	r4, [r5, #8]
 8004df4:	e7df      	b.n	8004db6 <_fflush_r+0x22>
 8004df6:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <_fflush_r+0x74>)
 8004df8:	429c      	cmp	r4, r3
 8004dfa:	bf08      	it	eq
 8004dfc:	68ec      	ldreq	r4, [r5, #12]
 8004dfe:	e7da      	b.n	8004db6 <_fflush_r+0x22>
 8004e00:	080056cc 	.word	0x080056cc
 8004e04:	080056ec 	.word	0x080056ec
 8004e08:	080056ac 	.word	0x080056ac

08004e0c <std>:
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	b510      	push	{r4, lr}
 8004e10:	4604      	mov	r4, r0
 8004e12:	e9c0 3300 	strd	r3, r3, [r0]
 8004e16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e1a:	6083      	str	r3, [r0, #8]
 8004e1c:	8181      	strh	r1, [r0, #12]
 8004e1e:	6643      	str	r3, [r0, #100]	; 0x64
 8004e20:	81c2      	strh	r2, [r0, #14]
 8004e22:	6183      	str	r3, [r0, #24]
 8004e24:	4619      	mov	r1, r3
 8004e26:	2208      	movs	r2, #8
 8004e28:	305c      	adds	r0, #92	; 0x5c
 8004e2a:	f7fd fb65 	bl	80024f8 <memset>
 8004e2e:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <std+0x38>)
 8004e30:	6224      	str	r4, [r4, #32]
 8004e32:	6263      	str	r3, [r4, #36]	; 0x24
 8004e34:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <std+0x3c>)
 8004e36:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e38:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <std+0x40>)
 8004e3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e3c:	4b04      	ldr	r3, [pc, #16]	; (8004e50 <std+0x44>)
 8004e3e:	6323      	str	r3, [r4, #48]	; 0x30
 8004e40:	bd10      	pop	{r4, pc}
 8004e42:	bf00      	nop
 8004e44:	08005161 	.word	0x08005161
 8004e48:	08005183 	.word	0x08005183
 8004e4c:	080051bb 	.word	0x080051bb
 8004e50:	080051df 	.word	0x080051df

08004e54 <_cleanup_r>:
 8004e54:	4901      	ldr	r1, [pc, #4]	; (8004e5c <_cleanup_r+0x8>)
 8004e56:	f000 b8af 	b.w	8004fb8 <_fwalk_reent>
 8004e5a:	bf00      	nop
 8004e5c:	08004d95 	.word	0x08004d95

08004e60 <__sfmoreglue>:
 8004e60:	2268      	movs	r2, #104	; 0x68
 8004e62:	b570      	push	{r4, r5, r6, lr}
 8004e64:	1e4d      	subs	r5, r1, #1
 8004e66:	4355      	muls	r5, r2
 8004e68:	460e      	mov	r6, r1
 8004e6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e6e:	f7ff fa6b 	bl	8004348 <_malloc_r>
 8004e72:	4604      	mov	r4, r0
 8004e74:	b140      	cbz	r0, 8004e88 <__sfmoreglue+0x28>
 8004e76:	2100      	movs	r1, #0
 8004e78:	e9c0 1600 	strd	r1, r6, [r0]
 8004e7c:	300c      	adds	r0, #12
 8004e7e:	60a0      	str	r0, [r4, #8]
 8004e80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e84:	f7fd fb38 	bl	80024f8 <memset>
 8004e88:	4620      	mov	r0, r4
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}

08004e8c <__sfp_lock_acquire>:
 8004e8c:	4801      	ldr	r0, [pc, #4]	; (8004e94 <__sfp_lock_acquire+0x8>)
 8004e8e:	f000 b8b3 	b.w	8004ff8 <__retarget_lock_acquire_recursive>
 8004e92:	bf00      	nop
 8004e94:	200002dd 	.word	0x200002dd

08004e98 <__sfp_lock_release>:
 8004e98:	4801      	ldr	r0, [pc, #4]	; (8004ea0 <__sfp_lock_release+0x8>)
 8004e9a:	f000 b8ae 	b.w	8004ffa <__retarget_lock_release_recursive>
 8004e9e:	bf00      	nop
 8004ea0:	200002dd 	.word	0x200002dd

08004ea4 <__sinit_lock_acquire>:
 8004ea4:	4801      	ldr	r0, [pc, #4]	; (8004eac <__sinit_lock_acquire+0x8>)
 8004ea6:	f000 b8a7 	b.w	8004ff8 <__retarget_lock_acquire_recursive>
 8004eaa:	bf00      	nop
 8004eac:	200002de 	.word	0x200002de

08004eb0 <__sinit_lock_release>:
 8004eb0:	4801      	ldr	r0, [pc, #4]	; (8004eb8 <__sinit_lock_release+0x8>)
 8004eb2:	f000 b8a2 	b.w	8004ffa <__retarget_lock_release_recursive>
 8004eb6:	bf00      	nop
 8004eb8:	200002de 	.word	0x200002de

08004ebc <__sinit>:
 8004ebc:	b510      	push	{r4, lr}
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	f7ff fff0 	bl	8004ea4 <__sinit_lock_acquire>
 8004ec4:	69a3      	ldr	r3, [r4, #24]
 8004ec6:	b11b      	cbz	r3, 8004ed0 <__sinit+0x14>
 8004ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ecc:	f7ff bff0 	b.w	8004eb0 <__sinit_lock_release>
 8004ed0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ed4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ed6:	4b13      	ldr	r3, [pc, #76]	; (8004f24 <__sinit+0x68>)
 8004ed8:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <__sinit+0x6c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ede:	42a3      	cmp	r3, r4
 8004ee0:	bf08      	it	eq
 8004ee2:	2301      	moveq	r3, #1
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	bf08      	it	eq
 8004ee8:	61a3      	streq	r3, [r4, #24]
 8004eea:	f000 f81f 	bl	8004f2c <__sfp>
 8004eee:	6060      	str	r0, [r4, #4]
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f000 f81b 	bl	8004f2c <__sfp>
 8004ef6:	60a0      	str	r0, [r4, #8]
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f000 f817 	bl	8004f2c <__sfp>
 8004efe:	2200      	movs	r2, #0
 8004f00:	2104      	movs	r1, #4
 8004f02:	60e0      	str	r0, [r4, #12]
 8004f04:	6860      	ldr	r0, [r4, #4]
 8004f06:	f7ff ff81 	bl	8004e0c <std>
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	2109      	movs	r1, #9
 8004f0e:	68a0      	ldr	r0, [r4, #8]
 8004f10:	f7ff ff7c 	bl	8004e0c <std>
 8004f14:	2202      	movs	r2, #2
 8004f16:	2112      	movs	r1, #18
 8004f18:	68e0      	ldr	r0, [r4, #12]
 8004f1a:	f7ff ff77 	bl	8004e0c <std>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	61a3      	str	r3, [r4, #24]
 8004f22:	e7d1      	b.n	8004ec8 <__sinit+0xc>
 8004f24:	08005330 	.word	0x08005330
 8004f28:	08004e55 	.word	0x08004e55

08004f2c <__sfp>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	4607      	mov	r7, r0
 8004f30:	f7ff ffac 	bl	8004e8c <__sfp_lock_acquire>
 8004f34:	4b1e      	ldr	r3, [pc, #120]	; (8004fb0 <__sfp+0x84>)
 8004f36:	681e      	ldr	r6, [r3, #0]
 8004f38:	69b3      	ldr	r3, [r6, #24]
 8004f3a:	b913      	cbnz	r3, 8004f42 <__sfp+0x16>
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	f7ff ffbd 	bl	8004ebc <__sinit>
 8004f42:	3648      	adds	r6, #72	; 0x48
 8004f44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	d503      	bpl.n	8004f54 <__sfp+0x28>
 8004f4c:	6833      	ldr	r3, [r6, #0]
 8004f4e:	b30b      	cbz	r3, 8004f94 <__sfp+0x68>
 8004f50:	6836      	ldr	r6, [r6, #0]
 8004f52:	e7f7      	b.n	8004f44 <__sfp+0x18>
 8004f54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f58:	b9d5      	cbnz	r5, 8004f90 <__sfp+0x64>
 8004f5a:	4b16      	ldr	r3, [pc, #88]	; (8004fb4 <__sfp+0x88>)
 8004f5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f60:	60e3      	str	r3, [r4, #12]
 8004f62:	6665      	str	r5, [r4, #100]	; 0x64
 8004f64:	f000 f847 	bl	8004ff6 <__retarget_lock_init_recursive>
 8004f68:	f7ff ff96 	bl	8004e98 <__sfp_lock_release>
 8004f6c:	2208      	movs	r2, #8
 8004f6e:	4629      	mov	r1, r5
 8004f70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f78:	6025      	str	r5, [r4, #0]
 8004f7a:	61a5      	str	r5, [r4, #24]
 8004f7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f80:	f7fd faba 	bl	80024f8 <memset>
 8004f84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f90:	3468      	adds	r4, #104	; 0x68
 8004f92:	e7d9      	b.n	8004f48 <__sfp+0x1c>
 8004f94:	2104      	movs	r1, #4
 8004f96:	4638      	mov	r0, r7
 8004f98:	f7ff ff62 	bl	8004e60 <__sfmoreglue>
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	6030      	str	r0, [r6, #0]
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d1d5      	bne.n	8004f50 <__sfp+0x24>
 8004fa4:	f7ff ff78 	bl	8004e98 <__sfp_lock_release>
 8004fa8:	230c      	movs	r3, #12
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	e7ee      	b.n	8004f8c <__sfp+0x60>
 8004fae:	bf00      	nop
 8004fb0:	08005330 	.word	0x08005330
 8004fb4:	ffff0001 	.word	0xffff0001

08004fb8 <_fwalk_reent>:
 8004fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	4688      	mov	r8, r1
 8004fc0:	2700      	movs	r7, #0
 8004fc2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fca:	f1b9 0901 	subs.w	r9, r9, #1
 8004fce:	d505      	bpl.n	8004fdc <_fwalk_reent+0x24>
 8004fd0:	6824      	ldr	r4, [r4, #0]
 8004fd2:	2c00      	cmp	r4, #0
 8004fd4:	d1f7      	bne.n	8004fc6 <_fwalk_reent+0xe>
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fdc:	89ab      	ldrh	r3, [r5, #12]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d907      	bls.n	8004ff2 <_fwalk_reent+0x3a>
 8004fe2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	d003      	beq.n	8004ff2 <_fwalk_reent+0x3a>
 8004fea:	4629      	mov	r1, r5
 8004fec:	4630      	mov	r0, r6
 8004fee:	47c0      	blx	r8
 8004ff0:	4307      	orrs	r7, r0
 8004ff2:	3568      	adds	r5, #104	; 0x68
 8004ff4:	e7e9      	b.n	8004fca <_fwalk_reent+0x12>

08004ff6 <__retarget_lock_init_recursive>:
 8004ff6:	4770      	bx	lr

08004ff8 <__retarget_lock_acquire_recursive>:
 8004ff8:	4770      	bx	lr

08004ffa <__retarget_lock_release_recursive>:
 8004ffa:	4770      	bx	lr

08004ffc <__swhatbuf_r>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	460e      	mov	r6, r1
 8005000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005004:	4614      	mov	r4, r2
 8005006:	2900      	cmp	r1, #0
 8005008:	461d      	mov	r5, r3
 800500a:	b096      	sub	sp, #88	; 0x58
 800500c:	da08      	bge.n	8005020 <__swhatbuf_r+0x24>
 800500e:	2200      	movs	r2, #0
 8005010:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005014:	602a      	str	r2, [r5, #0]
 8005016:	061a      	lsls	r2, r3, #24
 8005018:	d410      	bmi.n	800503c <__swhatbuf_r+0x40>
 800501a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800501e:	e00e      	b.n	800503e <__swhatbuf_r+0x42>
 8005020:	466a      	mov	r2, sp
 8005022:	f000 f903 	bl	800522c <_fstat_r>
 8005026:	2800      	cmp	r0, #0
 8005028:	dbf1      	blt.n	800500e <__swhatbuf_r+0x12>
 800502a:	9a01      	ldr	r2, [sp, #4]
 800502c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005030:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005034:	425a      	negs	r2, r3
 8005036:	415a      	adcs	r2, r3
 8005038:	602a      	str	r2, [r5, #0]
 800503a:	e7ee      	b.n	800501a <__swhatbuf_r+0x1e>
 800503c:	2340      	movs	r3, #64	; 0x40
 800503e:	2000      	movs	r0, #0
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	b016      	add	sp, #88	; 0x58
 8005044:	bd70      	pop	{r4, r5, r6, pc}
	...

08005048 <__smakebuf_r>:
 8005048:	898b      	ldrh	r3, [r1, #12]
 800504a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800504c:	079d      	lsls	r5, r3, #30
 800504e:	4606      	mov	r6, r0
 8005050:	460c      	mov	r4, r1
 8005052:	d507      	bpl.n	8005064 <__smakebuf_r+0x1c>
 8005054:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	6123      	str	r3, [r4, #16]
 800505c:	2301      	movs	r3, #1
 800505e:	6163      	str	r3, [r4, #20]
 8005060:	b002      	add	sp, #8
 8005062:	bd70      	pop	{r4, r5, r6, pc}
 8005064:	466a      	mov	r2, sp
 8005066:	ab01      	add	r3, sp, #4
 8005068:	f7ff ffc8 	bl	8004ffc <__swhatbuf_r>
 800506c:	9900      	ldr	r1, [sp, #0]
 800506e:	4605      	mov	r5, r0
 8005070:	4630      	mov	r0, r6
 8005072:	f7ff f969 	bl	8004348 <_malloc_r>
 8005076:	b948      	cbnz	r0, 800508c <__smakebuf_r+0x44>
 8005078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800507c:	059a      	lsls	r2, r3, #22
 800507e:	d4ef      	bmi.n	8005060 <__smakebuf_r+0x18>
 8005080:	f023 0303 	bic.w	r3, r3, #3
 8005084:	f043 0302 	orr.w	r3, r3, #2
 8005088:	81a3      	strh	r3, [r4, #12]
 800508a:	e7e3      	b.n	8005054 <__smakebuf_r+0xc>
 800508c:	4b0d      	ldr	r3, [pc, #52]	; (80050c4 <__smakebuf_r+0x7c>)
 800508e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	6020      	str	r0, [r4, #0]
 8005094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005098:	81a3      	strh	r3, [r4, #12]
 800509a:	9b00      	ldr	r3, [sp, #0]
 800509c:	6120      	str	r0, [r4, #16]
 800509e:	6163      	str	r3, [r4, #20]
 80050a0:	9b01      	ldr	r3, [sp, #4]
 80050a2:	b15b      	cbz	r3, 80050bc <__smakebuf_r+0x74>
 80050a4:	4630      	mov	r0, r6
 80050a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050aa:	f000 f8d1 	bl	8005250 <_isatty_r>
 80050ae:	b128      	cbz	r0, 80050bc <__smakebuf_r+0x74>
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	81a3      	strh	r3, [r4, #12]
 80050bc:	89a0      	ldrh	r0, [r4, #12]
 80050be:	4305      	orrs	r5, r0
 80050c0:	81a5      	strh	r5, [r4, #12]
 80050c2:	e7cd      	b.n	8005060 <__smakebuf_r+0x18>
 80050c4:	08004e55 	.word	0x08004e55

080050c8 <_malloc_usable_size_r>:
 80050c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050cc:	1f18      	subs	r0, r3, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bfbc      	itt	lt
 80050d2:	580b      	ldrlt	r3, [r1, r0]
 80050d4:	18c0      	addlt	r0, r0, r3
 80050d6:	4770      	bx	lr

080050d8 <_raise_r>:
 80050d8:	291f      	cmp	r1, #31
 80050da:	b538      	push	{r3, r4, r5, lr}
 80050dc:	4604      	mov	r4, r0
 80050de:	460d      	mov	r5, r1
 80050e0:	d904      	bls.n	80050ec <_raise_r+0x14>
 80050e2:	2316      	movs	r3, #22
 80050e4:	6003      	str	r3, [r0, #0]
 80050e6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
 80050ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80050ee:	b112      	cbz	r2, 80050f6 <_raise_r+0x1e>
 80050f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80050f4:	b94b      	cbnz	r3, 800510a <_raise_r+0x32>
 80050f6:	4620      	mov	r0, r4
 80050f8:	f000 f830 	bl	800515c <_getpid_r>
 80050fc:	462a      	mov	r2, r5
 80050fe:	4601      	mov	r1, r0
 8005100:	4620      	mov	r0, r4
 8005102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005106:	f000 b817 	b.w	8005138 <_kill_r>
 800510a:	2b01      	cmp	r3, #1
 800510c:	d00a      	beq.n	8005124 <_raise_r+0x4c>
 800510e:	1c59      	adds	r1, r3, #1
 8005110:	d103      	bne.n	800511a <_raise_r+0x42>
 8005112:	2316      	movs	r3, #22
 8005114:	6003      	str	r3, [r0, #0]
 8005116:	2001      	movs	r0, #1
 8005118:	e7e7      	b.n	80050ea <_raise_r+0x12>
 800511a:	2400      	movs	r4, #0
 800511c:	4628      	mov	r0, r5
 800511e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005122:	4798      	blx	r3
 8005124:	2000      	movs	r0, #0
 8005126:	e7e0      	b.n	80050ea <_raise_r+0x12>

08005128 <raise>:
 8005128:	4b02      	ldr	r3, [pc, #8]	; (8005134 <raise+0xc>)
 800512a:	4601      	mov	r1, r0
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	f7ff bfd3 	b.w	80050d8 <_raise_r>
 8005132:	bf00      	nop
 8005134:	2000000c 	.word	0x2000000c

08005138 <_kill_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	2300      	movs	r3, #0
 800513c:	4d06      	ldr	r5, [pc, #24]	; (8005158 <_kill_r+0x20>)
 800513e:	4604      	mov	r4, r0
 8005140:	4608      	mov	r0, r1
 8005142:	4611      	mov	r1, r2
 8005144:	602b      	str	r3, [r5, #0]
 8005146:	f7fd f911 	bl	800236c <_kill>
 800514a:	1c43      	adds	r3, r0, #1
 800514c:	d102      	bne.n	8005154 <_kill_r+0x1c>
 800514e:	682b      	ldr	r3, [r5, #0]
 8005150:	b103      	cbz	r3, 8005154 <_kill_r+0x1c>
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	bd38      	pop	{r3, r4, r5, pc}
 8005156:	bf00      	nop
 8005158:	200002d8 	.word	0x200002d8

0800515c <_getpid_r>:
 800515c:	f7fd b904 	b.w	8002368 <_getpid>

08005160 <__sread>:
 8005160:	b510      	push	{r4, lr}
 8005162:	460c      	mov	r4, r1
 8005164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005168:	f000 f894 	bl	8005294 <_read_r>
 800516c:	2800      	cmp	r0, #0
 800516e:	bfab      	itete	ge
 8005170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005172:	89a3      	ldrhlt	r3, [r4, #12]
 8005174:	181b      	addge	r3, r3, r0
 8005176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800517a:	bfac      	ite	ge
 800517c:	6563      	strge	r3, [r4, #84]	; 0x54
 800517e:	81a3      	strhlt	r3, [r4, #12]
 8005180:	bd10      	pop	{r4, pc}

08005182 <__swrite>:
 8005182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005186:	461f      	mov	r7, r3
 8005188:	898b      	ldrh	r3, [r1, #12]
 800518a:	4605      	mov	r5, r0
 800518c:	05db      	lsls	r3, r3, #23
 800518e:	460c      	mov	r4, r1
 8005190:	4616      	mov	r6, r2
 8005192:	d505      	bpl.n	80051a0 <__swrite+0x1e>
 8005194:	2302      	movs	r3, #2
 8005196:	2200      	movs	r2, #0
 8005198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800519c:	f000 f868 	bl	8005270 <_lseek_r>
 80051a0:	89a3      	ldrh	r3, [r4, #12]
 80051a2:	4632      	mov	r2, r6
 80051a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051a8:	81a3      	strh	r3, [r4, #12]
 80051aa:	4628      	mov	r0, r5
 80051ac:	463b      	mov	r3, r7
 80051ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051b6:	f000 b817 	b.w	80051e8 <_write_r>

080051ba <__sseek>:
 80051ba:	b510      	push	{r4, lr}
 80051bc:	460c      	mov	r4, r1
 80051be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c2:	f000 f855 	bl	8005270 <_lseek_r>
 80051c6:	1c43      	adds	r3, r0, #1
 80051c8:	89a3      	ldrh	r3, [r4, #12]
 80051ca:	bf15      	itete	ne
 80051cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80051ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051d6:	81a3      	strheq	r3, [r4, #12]
 80051d8:	bf18      	it	ne
 80051da:	81a3      	strhne	r3, [r4, #12]
 80051dc:	bd10      	pop	{r4, pc}

080051de <__sclose>:
 80051de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e2:	f000 b813 	b.w	800520c <_close_r>
	...

080051e8 <_write_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4604      	mov	r4, r0
 80051ec:	4608      	mov	r0, r1
 80051ee:	4611      	mov	r1, r2
 80051f0:	2200      	movs	r2, #0
 80051f2:	4d05      	ldr	r5, [pc, #20]	; (8005208 <_write_r+0x20>)
 80051f4:	602a      	str	r2, [r5, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f7fd f8d4 	bl	80023a4 <_write>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_write_r+0x1e>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_write_r+0x1e>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	200002d8 	.word	0x200002d8

0800520c <_close_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	2300      	movs	r3, #0
 8005210:	4d05      	ldr	r5, [pc, #20]	; (8005228 <_close_r+0x1c>)
 8005212:	4604      	mov	r4, r0
 8005214:	4608      	mov	r0, r1
 8005216:	602b      	str	r3, [r5, #0]
 8005218:	f7fd f8ec 	bl	80023f4 <_close>
 800521c:	1c43      	adds	r3, r0, #1
 800521e:	d102      	bne.n	8005226 <_close_r+0x1a>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	b103      	cbz	r3, 8005226 <_close_r+0x1a>
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	bd38      	pop	{r3, r4, r5, pc}
 8005228:	200002d8 	.word	0x200002d8

0800522c <_fstat_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	2300      	movs	r3, #0
 8005230:	4d06      	ldr	r5, [pc, #24]	; (800524c <_fstat_r+0x20>)
 8005232:	4604      	mov	r4, r0
 8005234:	4608      	mov	r0, r1
 8005236:	4611      	mov	r1, r2
 8005238:	602b      	str	r3, [r5, #0]
 800523a:	f7fd f8de 	bl	80023fa <_fstat>
 800523e:	1c43      	adds	r3, r0, #1
 8005240:	d102      	bne.n	8005248 <_fstat_r+0x1c>
 8005242:	682b      	ldr	r3, [r5, #0]
 8005244:	b103      	cbz	r3, 8005248 <_fstat_r+0x1c>
 8005246:	6023      	str	r3, [r4, #0]
 8005248:	bd38      	pop	{r3, r4, r5, pc}
 800524a:	bf00      	nop
 800524c:	200002d8 	.word	0x200002d8

08005250 <_isatty_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	2300      	movs	r3, #0
 8005254:	4d05      	ldr	r5, [pc, #20]	; (800526c <_isatty_r+0x1c>)
 8005256:	4604      	mov	r4, r0
 8005258:	4608      	mov	r0, r1
 800525a:	602b      	str	r3, [r5, #0]
 800525c:	f7fd f8d2 	bl	8002404 <_isatty>
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	d102      	bne.n	800526a <_isatty_r+0x1a>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	b103      	cbz	r3, 800526a <_isatty_r+0x1a>
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	200002d8 	.word	0x200002d8

08005270 <_lseek_r>:
 8005270:	b538      	push	{r3, r4, r5, lr}
 8005272:	4604      	mov	r4, r0
 8005274:	4608      	mov	r0, r1
 8005276:	4611      	mov	r1, r2
 8005278:	2200      	movs	r2, #0
 800527a:	4d05      	ldr	r5, [pc, #20]	; (8005290 <_lseek_r+0x20>)
 800527c:	602a      	str	r2, [r5, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	f7fd f8c2 	bl	8002408 <_lseek>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d102      	bne.n	800528e <_lseek_r+0x1e>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	b103      	cbz	r3, 800528e <_lseek_r+0x1e>
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	bd38      	pop	{r3, r4, r5, pc}
 8005290:	200002d8 	.word	0x200002d8

08005294 <_read_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	4604      	mov	r4, r0
 8005298:	4608      	mov	r0, r1
 800529a:	4611      	mov	r1, r2
 800529c:	2200      	movs	r2, #0
 800529e:	4d05      	ldr	r5, [pc, #20]	; (80052b4 <_read_r+0x20>)
 80052a0:	602a      	str	r2, [r5, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	f7fd f870 	bl	8002388 <_read>
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	d102      	bne.n	80052b2 <_read_r+0x1e>
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	b103      	cbz	r3, 80052b2 <_read_r+0x1e>
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	200002d8 	.word	0x200002d8

080052b8 <_init>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	bf00      	nop
 80052bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052be:	bc08      	pop	{r3}
 80052c0:	469e      	mov	lr, r3
 80052c2:	4770      	bx	lr

080052c4 <_fini>:
 80052c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c6:	bf00      	nop
 80052c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ca:	bc08      	pop	{r3}
 80052cc:	469e      	mov	lr, r3
 80052ce:	4770      	bx	lr
