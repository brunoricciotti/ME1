
MPU9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f4  080030f4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080030f4  080030f4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030f4  080030f4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f4  080030f4  000130f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030f8  080030f8  000130f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080030fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000078  08003174  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003174  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066ce  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013c5  00000000  00000000  0002676f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  00027b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  00028200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ac1  00000000  00000000  00028848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c7f  00000000  00000000  0003f309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081921  00000000  00000000  00047f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c98a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d2c  00000000  00000000  000c98fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002de0 	.word	0x08002de0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002de0 	.word	0x08002de0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpun>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000700:	d102      	bne.n	8000708 <__aeabi_fcmpun+0x14>
 8000702:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000706:	d108      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000708:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800070c:	d102      	bne.n	8000714 <__aeabi_fcmpun+0x20>
 800070e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000712:	d102      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	f04f 0001 	mov.w	r0, #1
 800071e:	4770      	bx	lr

08000720 <MPU9250_init>:
int16_t Accel_X_RAW = 0;
int16_t Accel_Y_RAW = 0;
int16_t Accel_Z_RAW = 0;


void MPU9250_init(void){
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af04      	add	r7, sp, #16

	uint8_t check = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	71fb      	strb	r3, [r7, #7]
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU9250_ADDR,WHO_AM_I,1, &check, 1, I2C_TIMOUT_MS);
 800072a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	2301      	movs	r3, #1
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	1dfb      	adds	r3, r7, #7
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2301      	movs	r3, #1
 800073a:	2275      	movs	r2, #117	; 0x75
 800073c:	21d0      	movs	r1, #208	; 0xd0
 800073e:	4823      	ldr	r0, [pc, #140]	; (80007cc <MPU9250_init+0xac>)
 8000740:	f000 ff98 	bl	8001674 <HAL_I2C_Mem_Read>

	if (check == WHO_AM_I_9250_ANS)  // 0x71 will be returned by the sensor if everything goes well
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2b70      	cmp	r3, #112	; 0x70
 8000748:	d13b      	bne.n	80007c2 <MPU9250_init+0xa2>
	{
		// power management 1 register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_1, 1,&Data, 1, 1000);
 800074e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	2301      	movs	r3, #1
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	1dbb      	adds	r3, r7, #6
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	226b      	movs	r2, #107	; 0x6b
 8000760:	21d0      	movs	r1, #208	; 0xd0
 8000762:	481a      	ldr	r0, [pc, #104]	; (80007cc <MPU9250_init+0xac>)
 8000764:	f000 fe8c 	bl	8001480 <HAL_I2C_Mem_Write>

		// power management 2 register 0X6C habilito solo el eje x del acelerometro
		Data = 0x1F;
 8000768:	231f      	movs	r3, #31
 800076a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_2, 1,&Data, 1, 1000);
 800076c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000770:	9302      	str	r3, [sp, #8]
 8000772:	2301      	movs	r3, #1
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	1dbb      	adds	r3, r7, #6
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2301      	movs	r3, #1
 800077c:	226c      	movs	r2, #108	; 0x6c
 800077e:	21d0      	movs	r1, #208	; 0xd0
 8000780:	4812      	ldr	r0, [pc, #72]	; (80007cc <MPU9250_init+0xac>)
 8000782:	f000 fe7d 	bl	8001480 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000786:	2307      	movs	r3, #7
 8000788:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800078a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078e:	9302      	str	r3, [sp, #8]
 8000790:	2301      	movs	r3, #1
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	1dbb      	adds	r3, r7, #6
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2301      	movs	r3, #1
 800079a:	2219      	movs	r2, #25
 800079c:	21d0      	movs	r1, #208	; 0xd0
 800079e:	480b      	ldr	r0, [pc, #44]	; (80007cc <MPU9250_init+0xac>)
 80007a0:	f000 fe6e 	bl	8001480 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 80007a4:	2300      	movs	r3, #0
 80007a6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, ACCEL_CONFIG, 1, &Data, 1, 1000);
 80007a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	2301      	movs	r3, #1
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	1dbb      	adds	r3, r7, #6
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	221c      	movs	r2, #28
 80007ba:	21d0      	movs	r1, #208	; 0xd0
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <MPU9250_init+0xac>)
 80007be:	f000 fe5f 	bl	8001480 <HAL_I2C_Mem_Write>
	}

}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000098 	.word	0x20000098

080007d0 <MPU_readRawData>:

int16_t MPU_readRawData(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af04      	add	r7, sp, #16
    // Init buffer
    uint8_t buf[2];

    // Subroutine for reading the raw data
    HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDR, ACCEL_XOUT_H, 1, buf, 2, I2C_TIMOUT_MS);
 80007d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007da:	9302      	str	r3, [sp, #8]
 80007dc:	2302      	movs	r3, #2
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2301      	movs	r3, #1
 80007e6:	223b      	movs	r2, #59	; 0x3b
 80007e8:	21d0      	movs	r1, #208	; 0xd0
 80007ea:	4809      	ldr	r0, [pc, #36]	; (8000810 <MPU_readRawData+0x40>)
 80007ec:	f000 ff42 	bl	8001674 <HAL_I2C_Mem_Read>

    // Bit shift the data
    Ax = buf[0] << 8 | buf[1];
 80007f0:	793b      	ldrb	r3, [r7, #4]
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	797b      	ldrb	r3, [r7, #5]
 80007f8:	b21b      	sxth	r3, r3
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b21a      	sxth	r2, r3
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <MPU_readRawData+0x44>)
 8000800:	801a      	strh	r2, [r3, #0]

	// Para leer el angulo: arcsin(Ax/16384)
    return Ax;
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <MPU_readRawData+0x44>)
 8000804:	f9b3 3000 	ldrsh.w	r3, [r3]

}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000098 	.word	0x20000098
 8000814:	20000094 	.word	0x20000094

08000818 <main>:
float angulo = 2.3444;
float aceleracion;
float k = 57.295779; //convierte de radianes a grados

int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f000 fa22 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 f8b4 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000824:	f000 f926 	bl	8000a74 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000828:	f000 f8f6 	bl	8000a18 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MPU9250_init();//inicializo el sensor
 800082c:	f7ff ff78 	bl	8000720 <MPU9250_init>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ticks = HAL_GetTick();
 8000830:	f000 fa70 	bl	8000d14 <HAL_GetTick>
 8000834:	4603      	mov	r3, r0
 8000836:	4a22      	ldr	r2, [pc, #136]	; (80008c0 <main+0xa8>)
 8000838:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */
	  if(!(ticks %= 500))
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <main+0xa8>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <main+0xac>)
 8000840:	fba3 1302 	umull	r1, r3, r3, r2
 8000844:	095b      	lsrs	r3, r3, #5
 8000846:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800084a:	fb01 f303 	mul.w	r3, r1, r3
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <main+0xa8>)
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <main+0xa8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1e9      	bne.n	8000830 <main+0x18>
	  {
		  //Datos: variable que va desde 0 a 65535
		  Datos = MPU_readRawData();
 800085c:	f7ff ffb8 	bl	80007d0 <MPU_readRawData>
 8000860:	4603      	mov	r3, r0
 8000862:	461a      	mov	r2, r3
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <main+0xb0>)
 8000866:	801a      	strh	r2, [r3, #0]

		  aceleracion = (float)Datos/16384;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <main+0xb0>)
 800086a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fd26 	bl	80002c0 <__aeabi_i2f>
 8000874:	4603      	mov	r3, r0
 8000876:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fe28 	bl	80004d0 <__aeabi_fdiv>
 8000880:	4603      	mov	r3, r0
 8000882:	461a      	mov	r2, r3
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <main+0xb4>)
 8000886:	601a      	str	r2, [r3, #0]

		  //Para pasar de datos a resultado, divido por la gravedad y hago regla de 3 para convertirlo al rango de resultado
		  //Arcoseno recibe de -1 a 1, si 65535 es 8192, entonces datos es x
		  //Resultado, variable que va de 4096 a 8192 (0: 4096, 8192:pi/2)
		  //resultado = 4097 + (5*Datos/(8*10)); //Gravedad 10
		  angulo = asinf(aceleracion)*k;
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <main+0xb4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f002 f8eb 	bl	8002a68 <asinf>
 8000892:	4602      	mov	r2, r0
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <main+0xb8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	4610      	mov	r0, r2
 800089c:	f7ff fd64 	bl	8000368 <__aeabi_fmul>
 80008a0:	4603      	mov	r3, r0
 80008a2:	461a      	mov	r2, r3
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <main+0xbc>)
 80008a6:	601a      	str	r2, [r3, #0]
		  angulofinal = arcsen(Datos);
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <main+0xb0>)
 80008aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f813 	bl	80008dc <arcsen>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <main+0xc0>)
 80008bc:	801a      	strh	r2, [r3, #0]
	  ticks = HAL_GetTick();
 80008be:	e7b7      	b.n	8000830 <main+0x18>
 80008c0:	200000f0 	.word	0x200000f0
 80008c4:	10624dd3 	.word	0x10624dd3
 80008c8:	200000ec 	.word	0x200000ec
 80008cc:	200000f8 	.word	0x200000f8
 80008d0:	20000004 	.word	0x20000004
 80008d4:	20000000 	.word	0x20000000
 80008d8:	200000f4 	.word	0x200000f4

080008dc <arcsen>:

    return c ? -y : y;;
}

int16_t arcsen(uint16_t dato)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
	static int a = 0;
	uint16_t res = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	817b      	strh	r3, [r7, #10]
	//Dato es resultado, un valor que va de -1 a 1, o mas exactamente de 0 a 8192 (unsigned) donde 0, 180 y 360 son 4096
	//90 grados son 8192 y 270 grados es 0
	//Dato empieza en 0, va para 1, baja a 0 y termina ahi (180 grados)
	//Yo tengo una LUT que va de 0 a 8192, empieza en 4096, sube hasta 8192, vuelve a bajar hasta 0 y termina en 4096
	//Comparando LUT y dato (hasta pi/2): si 4096 es 0(dato), entonces  es 2048(dato)
	for (i = 0; i<= 90; i++)
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	e016      	b.n	8000922 <arcsen+0x46>
	{
		if ((dato >= LUTsin[i]) && ((dato <= LUTsin[i+1])))
 80008f4:	4a22      	ldr	r2, [pc, #136]	; (8000980 <arcsen+0xa4>)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008fc:	88fa      	ldrh	r2, [r7, #6]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d30c      	bcc.n	800091c <arcsen+0x40>
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	3301      	adds	r3, #1
 8000906:	4a1e      	ldr	r2, [pc, #120]	; (8000980 <arcsen+0xa4>)
 8000908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800090c:	88fa      	ldrh	r2, [r7, #6]
 800090e:	429a      	cmp	r2, r3
 8000910:	d804      	bhi.n	800091c <arcsen+0x40>
		{
			res = i;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	817b      	strh	r3, [r7, #10]
			a = 0;//No estoy en 90 grados
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <arcsen+0xa8>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
	for (i = 0; i<= 90; i++)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2b5a      	cmp	r3, #90	; 0x5a
 8000926:	dde5      	ble.n	80008f4 <arcsen+0x18>
		}
	}
	if (dato == 8192) //Caso 90 grados, pto maximo de la funcion solo puedo verla de esta forma, 8191 ya son 89 grados
 8000928:	88fb      	ldrh	r3, [r7, #6]
 800092a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800092e:	d113      	bne.n	8000958 <arcsen+0x7c>
	{
		//A esta funcion puede entrar varias veces seguidas hasta que se cambie el angulo, defino variable a, que se pondrá en 1
		//si es la primera vez que entra a este if
		if (!a)
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <arcsen+0xa8>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d10d      	bne.n	8000954 <arcsen+0x78>
		{
			a = 1;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <arcsen+0xa8>)
 800093a:	2201      	movs	r2, #1
 800093c:	601a      	str	r2, [r3, #0]
			if (!masnoventa) //Si estaba en 89 y subí a 90, ahora el resultado va a estar entre 91 y 180, por lo que cambio el modo
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <arcsen+0xac>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d103      	bne.n	800094e <arcsen+0x72>
				masnoventa = 1;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <arcsen+0xac>)
 8000948:	2201      	movs	r2, #1
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	e002      	b.n	8000954 <arcsen+0x78>
			else masnoventa = 0;//si estaba en 91 y bajó, hago lo contrario
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <arcsen+0xac>)
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
		}
		res = 90;
 8000954:	235a      	movs	r3, #90	; 0x5a
 8000956:	817b      	strh	r3, [r7, #10]
	}
	//ME PASO DE 90 GRADOS ---> sen(x) = sen(180-x)
	if ((masnoventa == 1) && (a == 0))
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <arcsen+0xac>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d107      	bne.n	8000970 <arcsen+0x94>
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <arcsen+0xa8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d103      	bne.n	8000970 <arcsen+0x94>
	{
		res = 180-res;
 8000968:	897b      	ldrh	r3, [r7, #10]
 800096a:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800096e:	817b      	strh	r3, [r7, #10]
	}
	return res;
 8000970:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	08002e08 	.word	0x08002e08
 8000984:	200000fc 	.word	0x200000fc
 8000988:	20000100 	.word	0x20000100

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b090      	sub	sp, #64	; 0x40
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0318 	add.w	r3, r7, #24
 8000996:	2228      	movs	r2, #40	; 0x28
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f002 f85c 	bl	8002a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009bc:	2301      	movs	r3, #1
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c0:	2302      	movs	r3, #2
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d0:	f107 0318 	add.w	r3, r7, #24
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fc0f 	bl	80021f8 <HAL_RCC_OscConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009e0:	f000 f876 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e4:	230f      	movs	r3, #15
 80009e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e8:	2302      	movs	r3, #2
 80009ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2102      	movs	r1, #2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 fe7c 	bl	80026fc <HAL_RCC_ClockConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a0a:	f000 f861 	bl	8000ad0 <Error_Handler>
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3740      	adds	r7, #64	; 0x40
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a1e:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <MX_I2C1_Init+0x54>)
 8000a20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a24:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_I2C1_Init+0x58>)
 8000a26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a56:	f000 fbcf 	bl	80011f8 <HAL_I2C_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a60:	f000 f836 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000098 	.word	0x20000098
 8000a6c:	40005400 	.word	0x40005400
 8000a70:	00061a80 	.word	0x00061a80

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_GPIO_Init+0x58>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4a13      	ldr	r2, [pc, #76]	; (8000acc <MX_GPIO_Init+0x58>)
 8000a80:	f043 0320 	orr.w	r3, r3, #32
 8000a84:	6193      	str	r3, [r2, #24]
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_GPIO_Init+0x58>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f003 0320 	and.w	r3, r3, #32
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_GPIO_Init+0x58>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <MX_GPIO_Init+0x58>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6193      	str	r3, [r2, #24]
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_GPIO_Init+0x58>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_GPIO_Init+0x58>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	4a07      	ldr	r2, [pc, #28]	; (8000acc <MX_GPIO_Init+0x58>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6193      	str	r3, [r2, #24]
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <MX_GPIO_Init+0x58>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

}
 8000ac2:	bf00      	nop
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	40021000 	.word	0x40021000

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_MspInit+0x5c>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <HAL_MspInit+0x5c>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6193      	str	r3, [r2, #24]
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_MspInit+0x5c>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <HAL_MspInit+0x5c>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <HAL_MspInit+0x5c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	61d3      	str	r3, [r2, #28]
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_MspInit+0x5c>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_MspInit+0x60>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_MspInit+0x60>)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010000 	.word	0x40010000

08000b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <HAL_I2C_MspInit+0x70>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d123      	bne.n	8000ba8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_I2C_MspInit+0x74>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <HAL_I2C_MspInit+0x74>)
 8000b66:	f043 0308 	orr.w	r3, r3, #8
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_I2C_MspInit+0x74>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0308 	and.w	r3, r3, #8
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b78:	23c0      	movs	r3, #192	; 0xc0
 8000b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7c:	2312      	movs	r3, #18
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <HAL_I2C_MspInit+0x78>)
 8000b8c:	f000 f9b0 	bl	8000ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_I2C_MspInit+0x74>)
 8000b92:	69db      	ldr	r3, [r3, #28]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_I2C_MspInit+0x74>)
 8000b96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b9a:	61d3      	str	r3, [r2, #28]
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <HAL_I2C_MspInit+0x74>)
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba8:	bf00      	nop
 8000baa:	3720      	adds	r7, #32
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40005400 	.word	0x40005400
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010c00 	.word	0x40010c00

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr

08000bfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c02:	f000 f875 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
	...

08000c18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c18:	480c      	ldr	r0, [pc, #48]	; (8000c4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c1a:	490d      	ldr	r1, [pc, #52]	; (8000c50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c30:	4c0a      	ldr	r4, [pc, #40]	; (8000c5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c3e:	f7ff ffe4 	bl	8000c0a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c42:	f001 fee5 	bl	8002a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c46:	f7ff fde7 	bl	8000818 <main>
  bx lr
 8000c4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c54:	080030fc 	.word	0x080030fc
  ldr r2, =_sbss
 8000c58:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c5c:	20000108 	.word	0x20000108

08000c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_2_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_Init+0x28>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_Init+0x28>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f907 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7a:	200f      	movs	r0, #15
 8000c7c:	f000 f808 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c80:	f7ff ff2c 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40022000 	.word	0x40022000

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x54>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_InitTick+0x58>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f911 	bl	8000ed6 <HAL_SYSTICK_Config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00e      	b.n	8000cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d80a      	bhi.n	8000cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f000 f8e7 	bl	8000e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_InitTick+0x5c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000010 	.word	0x20000010
 8000cec:	2000000c 	.word	0x2000000c

08000cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <HAL_IncTick+0x1c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_IncTick+0x20>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a03      	ldr	r2, [pc, #12]	; (8000d10 <HAL_IncTick+0x20>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	20000010 	.word	0x20000010
 8000d10:	20000104 	.word	0x20000104

08000d14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b02      	ldr	r3, [pc, #8]	; (8000d24 <HAL_GetTick+0x10>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	20000104 	.word	0x20000104

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff90 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff49 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb0:	f7ff ff5e 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	6978      	ldr	r0, [r7, #20]
 8000ebc:	f7ff ff90 	bl	8000de0 <NVIC_EncodePriority>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff5f 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ffb0 	bl	8000e44 <SysTick_Config>
 8000ee4:	4603      	mov	r3, r0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b08b      	sub	sp, #44	; 0x2c
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	e169      	b.n	80011d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f04:	2201      	movs	r2, #1
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 8158 	bne.w	80011d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	4a9a      	ldr	r2, [pc, #616]	; (8001190 <HAL_GPIO_Init+0x2a0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d05e      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f2c:	4a98      	ldr	r2, [pc, #608]	; (8001190 <HAL_GPIO_Init+0x2a0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d875      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f32:	4a98      	ldr	r2, [pc, #608]	; (8001194 <HAL_GPIO_Init+0x2a4>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d058      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f38:	4a96      	ldr	r2, [pc, #600]	; (8001194 <HAL_GPIO_Init+0x2a4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d86f      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f3e:	4a96      	ldr	r2, [pc, #600]	; (8001198 <HAL_GPIO_Init+0x2a8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d052      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f44:	4a94      	ldr	r2, [pc, #592]	; (8001198 <HAL_GPIO_Init+0x2a8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d869      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f4a:	4a94      	ldr	r2, [pc, #592]	; (800119c <HAL_GPIO_Init+0x2ac>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d04c      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f50:	4a92      	ldr	r2, [pc, #584]	; (800119c <HAL_GPIO_Init+0x2ac>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d863      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f56:	4a92      	ldr	r2, [pc, #584]	; (80011a0 <HAL_GPIO_Init+0x2b0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d046      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f5c:	4a90      	ldr	r2, [pc, #576]	; (80011a0 <HAL_GPIO_Init+0x2b0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d85d      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f62:	2b12      	cmp	r3, #18
 8000f64:	d82a      	bhi.n	8000fbc <HAL_GPIO_Init+0xcc>
 8000f66:	2b12      	cmp	r3, #18
 8000f68:	d859      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f6a:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <HAL_GPIO_Init+0x80>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000feb 	.word	0x08000feb
 8000f74:	08000fc5 	.word	0x08000fc5
 8000f78:	08000fd7 	.word	0x08000fd7
 8000f7c:	08001019 	.word	0x08001019
 8000f80:	0800101f 	.word	0x0800101f
 8000f84:	0800101f 	.word	0x0800101f
 8000f88:	0800101f 	.word	0x0800101f
 8000f8c:	0800101f 	.word	0x0800101f
 8000f90:	0800101f 	.word	0x0800101f
 8000f94:	0800101f 	.word	0x0800101f
 8000f98:	0800101f 	.word	0x0800101f
 8000f9c:	0800101f 	.word	0x0800101f
 8000fa0:	0800101f 	.word	0x0800101f
 8000fa4:	0800101f 	.word	0x0800101f
 8000fa8:	0800101f 	.word	0x0800101f
 8000fac:	0800101f 	.word	0x0800101f
 8000fb0:	0800101f 	.word	0x0800101f
 8000fb4:	08000fcd 	.word	0x08000fcd
 8000fb8:	08000fe1 	.word	0x08000fe1
 8000fbc:	4a79      	ldr	r2, [pc, #484]	; (80011a4 <HAL_GPIO_Init+0x2b4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fc2:	e02c      	b.n	800101e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	623b      	str	r3, [r7, #32]
          break;
 8000fca:	e029      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	623b      	str	r3, [r7, #32]
          break;
 8000fd4:	e024      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	3308      	adds	r3, #8
 8000fdc:	623b      	str	r3, [r7, #32]
          break;
 8000fde:	e01f      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	330c      	adds	r3, #12
 8000fe6:	623b      	str	r3, [r7, #32]
          break;
 8000fe8:	e01a      	b.n	8001020 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	623b      	str	r3, [r7, #32]
          break;
 8000ff6:	e013      	b.n	8001020 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d105      	bne.n	800100c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001000:	2308      	movs	r3, #8
 8001002:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	611a      	str	r2, [r3, #16]
          break;
 800100a:	e009      	b.n	8001020 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800100c:	2308      	movs	r3, #8
 800100e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	615a      	str	r2, [r3, #20]
          break;
 8001016:	e003      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
          break;
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x130>
          break;
 800101e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2bff      	cmp	r3, #255	; 0xff
 8001024:	d801      	bhi.n	800102a <HAL_GPIO_Init+0x13a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	e001      	b.n	800102e <HAL_GPIO_Init+0x13e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3304      	adds	r3, #4
 800102e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	2bff      	cmp	r3, #255	; 0xff
 8001034:	d802      	bhi.n	800103c <HAL_GPIO_Init+0x14c>
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	e002      	b.n	8001042 <HAL_GPIO_Init+0x152>
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	3b08      	subs	r3, #8
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	210f      	movs	r1, #15
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	401a      	ands	r2, r3
 8001054:	6a39      	ldr	r1, [r7, #32]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	431a      	orrs	r2, r3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 80b1 	beq.w	80011d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001070:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <HAL_GPIO_Init+0x2b8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <HAL_GPIO_Init+0x2b8>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <HAL_GPIO_Init+0x2b8>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001088:	4a48      	ldr	r2, [pc, #288]	; (80011ac <HAL_GPIO_Init+0x2bc>)
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001094:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a40      	ldr	r2, [pc, #256]	; (80011b0 <HAL_GPIO_Init+0x2c0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_GPIO_Init+0x1ec>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a3f      	ldr	r2, [pc, #252]	; (80011b4 <HAL_GPIO_Init+0x2c4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1e8>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a3e      	ldr	r2, [pc, #248]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1e4>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a3d      	ldr	r2, [pc, #244]	; (80011bc <HAL_GPIO_Init+0x2cc>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1e0>
 80010cc:	2303      	movs	r3, #3
 80010ce:	e006      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010d0:	2304      	movs	r3, #4
 80010d2:	e004      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e002      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010dc:	2300      	movs	r3, #0
 80010de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e0:	f002 0203 	and.w	r2, r2, #3
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	4093      	lsls	r3, r2
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ee:	492f      	ldr	r1, [pc, #188]	; (80011ac <HAL_GPIO_Init+0x2bc>)
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d006      	beq.n	8001116 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	492c      	ldr	r1, [pc, #176]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	600b      	str	r3, [r1, #0]
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	43db      	mvns	r3, r3
 800111e:	4928      	ldr	r1, [pc, #160]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001120:	4013      	ands	r3, r2
 8001122:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	4922      	ldr	r1, [pc, #136]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
 800113c:	e006      	b.n	800114c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	43db      	mvns	r3, r3
 8001146:	491e      	ldr	r1, [pc, #120]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001148:	4013      	ands	r3, r2
 800114a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d006      	beq.n	8001166 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	4918      	ldr	r1, [pc, #96]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	608b      	str	r3, [r1, #8]
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	43db      	mvns	r3, r3
 800116e:	4914      	ldr	r1, [pc, #80]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001170:	4013      	ands	r3, r2
 8001172:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d021      	beq.n	80011c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	490e      	ldr	r1, [pc, #56]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	60cb      	str	r3, [r1, #12]
 800118c:	e021      	b.n	80011d2 <HAL_GPIO_Init+0x2e2>
 800118e:	bf00      	nop
 8001190:	10320000 	.word	0x10320000
 8001194:	10310000 	.word	0x10310000
 8001198:	10220000 	.word	0x10220000
 800119c:	10210000 	.word	0x10210000
 80011a0:	10120000 	.word	0x10120000
 80011a4:	10110000 	.word	0x10110000
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000
 80011b0:	40010800 	.word	0x40010800
 80011b4:	40010c00 	.word	0x40010c00
 80011b8:	40011000 	.word	0x40011000
 80011bc:	40011400 	.word	0x40011400
 80011c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_GPIO_Init+0x304>)
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	4909      	ldr	r1, [pc, #36]	; (80011f4 <HAL_GPIO_Init+0x304>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	3301      	adds	r3, #1
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	fa22 f303 	lsr.w	r3, r2, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f47f ae8e 	bne.w	8000f04 <HAL_GPIO_Init+0x14>
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	372c      	adds	r7, #44	; 0x2c
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	40010400 	.word	0x40010400

080011f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e12b      	b.n	8001462 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d106      	bne.n	8001224 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fc8e 	bl	8000b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2224      	movs	r2, #36	; 0x24
 8001228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0201 	bic.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800124a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800125a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800125c:	f001 fba0 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 8001260:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	4a81      	ldr	r2, [pc, #516]	; (800146c <HAL_I2C_Init+0x274>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d807      	bhi.n	800127c <HAL_I2C_Init+0x84>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4a80      	ldr	r2, [pc, #512]	; (8001470 <HAL_I2C_Init+0x278>)
 8001270:	4293      	cmp	r3, r2
 8001272:	bf94      	ite	ls
 8001274:	2301      	movls	r3, #1
 8001276:	2300      	movhi	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	e006      	b.n	800128a <HAL_I2C_Init+0x92>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4a7d      	ldr	r2, [pc, #500]	; (8001474 <HAL_I2C_Init+0x27c>)
 8001280:	4293      	cmp	r3, r2
 8001282:	bf94      	ite	ls
 8001284:	2301      	movls	r3, #1
 8001286:	2300      	movhi	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0e7      	b.n	8001462 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4a78      	ldr	r2, [pc, #480]	; (8001478 <HAL_I2C_Init+0x280>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	0c9b      	lsrs	r3, r3, #18
 800129c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a6a      	ldr	r2, [pc, #424]	; (800146c <HAL_I2C_Init+0x274>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d802      	bhi.n	80012cc <HAL_I2C_Init+0xd4>
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	3301      	adds	r3, #1
 80012ca:	e009      	b.n	80012e0 <HAL_I2C_Init+0xe8>
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012d2:	fb02 f303 	mul.w	r3, r2, r3
 80012d6:	4a69      	ldr	r2, [pc, #420]	; (800147c <HAL_I2C_Init+0x284>)
 80012d8:	fba2 2303 	umull	r2, r3, r2, r3
 80012dc:	099b      	lsrs	r3, r3, #6
 80012de:	3301      	adds	r3, #1
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	430b      	orrs	r3, r1
 80012e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	495c      	ldr	r1, [pc, #368]	; (800146c <HAL_I2C_Init+0x274>)
 80012fc:	428b      	cmp	r3, r1
 80012fe:	d819      	bhi.n	8001334 <HAL_I2C_Init+0x13c>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	1e59      	subs	r1, r3, #1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	fbb1 f3f3 	udiv	r3, r1, r3
 800130e:	1c59      	adds	r1, r3, #1
 8001310:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001314:	400b      	ands	r3, r1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00a      	beq.n	8001330 <HAL_I2C_Init+0x138>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1e59      	subs	r1, r3, #1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fbb1 f3f3 	udiv	r3, r1, r3
 8001328:	3301      	adds	r3, #1
 800132a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800132e:	e051      	b.n	80013d4 <HAL_I2C_Init+0x1dc>
 8001330:	2304      	movs	r3, #4
 8001332:	e04f      	b.n	80013d4 <HAL_I2C_Init+0x1dc>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d111      	bne.n	8001360 <HAL_I2C_Init+0x168>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	1e58      	subs	r0, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6859      	ldr	r1, [r3, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	440b      	add	r3, r1
 800134a:	fbb0 f3f3 	udiv	r3, r0, r3
 800134e:	3301      	adds	r3, #1
 8001350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001354:	2b00      	cmp	r3, #0
 8001356:	bf0c      	ite	eq
 8001358:	2301      	moveq	r3, #1
 800135a:	2300      	movne	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	e012      	b.n	8001386 <HAL_I2C_Init+0x18e>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	1e58      	subs	r0, r3, #1
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6859      	ldr	r1, [r3, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	0099      	lsls	r1, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	fbb0 f3f3 	udiv	r3, r0, r3
 8001376:	3301      	adds	r3, #1
 8001378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800137c:	2b00      	cmp	r3, #0
 800137e:	bf0c      	ite	eq
 8001380:	2301      	moveq	r3, #1
 8001382:	2300      	movne	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_I2C_Init+0x196>
 800138a:	2301      	movs	r3, #1
 800138c:	e022      	b.n	80013d4 <HAL_I2C_Init+0x1dc>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10e      	bne.n	80013b4 <HAL_I2C_Init+0x1bc>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1e58      	subs	r0, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6859      	ldr	r1, [r3, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	440b      	add	r3, r1
 80013a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80013a8:	3301      	adds	r3, #1
 80013aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013b2:	e00f      	b.n	80013d4 <HAL_I2C_Init+0x1dc>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	1e58      	subs	r0, r3, #1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6859      	ldr	r1, [r3, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	0099      	lsls	r1, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ca:	3301      	adds	r3, #1
 80013cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	6809      	ldr	r1, [r1, #0]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69da      	ldr	r2, [r3, #28]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6911      	ldr	r1, [r2, #16]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68d2      	ldr	r2, [r2, #12]
 800140e:	4311      	orrs	r1, r2
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	430b      	orrs	r3, r1
 8001416:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	430a      	orrs	r2, r1
 8001432:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0201 	orr.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2220      	movs	r2, #32
 800144e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	000186a0 	.word	0x000186a0
 8001470:	001e847f 	.word	0x001e847f
 8001474:	003d08ff 	.word	0x003d08ff
 8001478:	431bde83 	.word	0x431bde83
 800147c:	10624dd3 	.word	0x10624dd3

08001480 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af02      	add	r7, sp, #8
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	4608      	mov	r0, r1
 800148a:	4611      	mov	r1, r2
 800148c:	461a      	mov	r2, r3
 800148e:	4603      	mov	r3, r0
 8001490:	817b      	strh	r3, [r7, #10]
 8001492:	460b      	mov	r3, r1
 8001494:	813b      	strh	r3, [r7, #8]
 8001496:	4613      	mov	r3, r2
 8001498:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800149a:	f7ff fc3b 	bl	8000d14 <HAL_GetTick>
 800149e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b20      	cmp	r3, #32
 80014aa:	f040 80d9 	bne.w	8001660 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2319      	movs	r3, #25
 80014b4:	2201      	movs	r2, #1
 80014b6:	496d      	ldr	r1, [pc, #436]	; (800166c <HAL_I2C_Mem_Write+0x1ec>)
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 fcc1 	bl	8001e40 <I2C_WaitOnFlagUntilTimeout>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80014c4:	2302      	movs	r3, #2
 80014c6:	e0cc      	b.n	8001662 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_I2C_Mem_Write+0x56>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e0c5      	b.n	8001662 <HAL_I2C_Mem_Write+0x1e2>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d007      	beq.n	80014fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800150a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2221      	movs	r2, #33	; 0x21
 8001510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2240      	movs	r2, #64	; 0x40
 8001518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2200      	movs	r2, #0
 8001520:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a3a      	ldr	r2, [r7, #32]
 8001526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800152c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001532:	b29a      	uxth	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4a4d      	ldr	r2, [pc, #308]	; (8001670 <HAL_I2C_Mem_Write+0x1f0>)
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800153e:	88f8      	ldrh	r0, [r7, #6]
 8001540:	893a      	ldrh	r2, [r7, #8]
 8001542:	8979      	ldrh	r1, [r7, #10]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	4603      	mov	r3, r0
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 faf8 	bl	8001b44 <I2C_RequestMemoryWrite>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d052      	beq.n	8001600 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e081      	b.n	8001662 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f000 fd42 	bl	8001fec <I2C_WaitOnTXEFlagUntilTimeout>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00d      	beq.n	800158a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	2b04      	cmp	r3, #4
 8001574:	d107      	bne.n	8001586 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001584:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e06b      	b.n	8001662 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a4:	3b01      	subs	r3, #1
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	3b01      	subs	r3, #1
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d11b      	bne.n	8001600 <HAL_I2C_Mem_Write+0x180>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d017      	beq.n	8001600 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ea:	3b01      	subs	r3, #1
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1aa      	bne.n	800155e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f000 fd2e 	bl	800206e <I2C_WaitOnBTFFlagUntilTimeout>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00d      	beq.n	8001634 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	2b04      	cmp	r3, #4
 800161e:	d107      	bne.n	8001630 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800162e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e016      	b.n	8001662 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2220      	movs	r2, #32
 8001648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	e000      	b.n	8001662 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001660:	2302      	movs	r3, #2
  }
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	00100002 	.word	0x00100002
 8001670:	ffff0000 	.word	0xffff0000

08001674 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af02      	add	r7, sp, #8
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	4608      	mov	r0, r1
 800167e:	4611      	mov	r1, r2
 8001680:	461a      	mov	r2, r3
 8001682:	4603      	mov	r3, r0
 8001684:	817b      	strh	r3, [r7, #10]
 8001686:	460b      	mov	r3, r1
 8001688:	813b      	strh	r3, [r7, #8]
 800168a:	4613      	mov	r3, r2
 800168c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001692:	f7ff fb3f 	bl	8000d14 <HAL_GetTick>
 8001696:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b20      	cmp	r3, #32
 80016a2:	f040 8244 	bne.w	8001b2e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2319      	movs	r3, #25
 80016ac:	2201      	movs	r2, #1
 80016ae:	4982      	ldr	r1, [pc, #520]	; (80018b8 <HAL_I2C_Mem_Read+0x244>)
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 fbc5 	bl	8001e40 <I2C_WaitOnFlagUntilTimeout>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80016bc:	2302      	movs	r3, #2
 80016be:	e237      	b.n	8001b30 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_I2C_Mem_Read+0x5a>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e230      	b.n	8001b30 <HAL_I2C_Mem_Read+0x4bc>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d007      	beq.n	80016f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001702:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2222      	movs	r2, #34	; 0x22
 8001708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2240      	movs	r2, #64	; 0x40
 8001710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800171e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001724:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4a62      	ldr	r2, [pc, #392]	; (80018bc <HAL_I2C_Mem_Read+0x248>)
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001736:	88f8      	ldrh	r0, [r7, #6]
 8001738:	893a      	ldrh	r2, [r7, #8]
 800173a:	8979      	ldrh	r1, [r7, #10]
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4603      	mov	r3, r0
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 fa92 	bl	8001c70 <I2C_RequestMemoryRead>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e1ec      	b.n	8001b30 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175a:	2b00      	cmp	r3, #0
 800175c:	d113      	bne.n	8001786 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e1c0      	b.n	8001b08 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178a:	2b01      	cmp	r3, #1
 800178c:	d11e      	bne.n	80017cc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800179c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800179e:	b672      	cpsid	i
}
 80017a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80017c8:	b662      	cpsie	i
}
 80017ca:	e035      	b.n	8001838 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d11e      	bne.n	8001812 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800180c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800180e:	b662      	cpsie	i
}
 8001810:	e012      	b.n	8001838 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001820:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001838:	e166      	b.n	8001b08 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183e:	2b03      	cmp	r3, #3
 8001840:	f200 811f 	bhi.w	8001a82 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001848:	2b01      	cmp	r3, #1
 800184a:	d123      	bne.n	8001894 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800184c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 fc4d 	bl	80020f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e167      	b.n	8001b30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187c:	3b01      	subs	r3, #1
 800187e:	b29a      	uxth	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001888:	b29b      	uxth	r3, r3
 800188a:	3b01      	subs	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001892:	e139      	b.n	8001b08 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001898:	2b02      	cmp	r3, #2
 800189a:	d152      	bne.n	8001942 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018a2:	2200      	movs	r2, #0
 80018a4:	4906      	ldr	r1, [pc, #24]	; (80018c0 <HAL_I2C_Mem_Read+0x24c>)
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 faca 	bl	8001e40 <I2C_WaitOnFlagUntilTimeout>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d008      	beq.n	80018c4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e13c      	b.n	8001b30 <HAL_I2C_Mem_Read+0x4bc>
 80018b6:	bf00      	nop
 80018b8:	00100002 	.word	0x00100002
 80018bc:	ffff0000 	.word	0xffff0000
 80018c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001900:	b29b      	uxth	r3, r3
 8001902:	3b01      	subs	r3, #1
 8001904:	b29a      	uxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800190a:	b662      	cpsie	i
}
 800190c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192a:	3b01      	subs	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001936:	b29b      	uxth	r3, r3
 8001938:	3b01      	subs	r3, #1
 800193a:	b29a      	uxth	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001940:	e0e2      	b.n	8001b08 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001948:	2200      	movs	r2, #0
 800194a:	497b      	ldr	r1, [pc, #492]	; (8001b38 <HAL_I2C_Mem_Read+0x4c4>)
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 fa77 	bl	8001e40 <I2C_WaitOnFlagUntilTimeout>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0e9      	b.n	8001b30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800196a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800196c:	b672      	cpsid	i
}
 800196e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198c:	3b01      	subs	r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001998:	b29b      	uxth	r3, r3
 800199a:	3b01      	subs	r3, #1
 800199c:	b29a      	uxth	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80019a2:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <HAL_I2C_Mem_Read+0x4c8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	08db      	lsrs	r3, r3, #3
 80019a8:	4a65      	ldr	r2, [pc, #404]	; (8001b40 <HAL_I2C_Mem_Read+0x4cc>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0a1a      	lsrs	r2, r3, #8
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	00da      	lsls	r2, r3, #3
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	3b01      	subs	r3, #1
 80019c0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d118      	bne.n	80019fa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2220      	movs	r2, #32
 80019d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f043 0220 	orr.w	r2, r3, #32
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80019ea:	b662      	cpsie	i
}
 80019ec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e09a      	b.n	8001b30 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d1d9      	bne.n	80019bc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a4a:	b662      	cpsie	i
}
 8001a4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a80:	e042      	b.n	8001b08 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 fb32 	bl	80020f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e04c      	b.n	8001b30 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d118      	bne.n	8001b08 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f47f ae94 	bne.w	800183a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2220      	movs	r2, #32
 8001b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001b2e:	2302      	movs	r3, #2
  }
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3728      	adds	r7, #40	; 0x28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	00010004 	.word	0x00010004
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	14f8b589 	.word	0x14f8b589

08001b44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	4611      	mov	r1, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	4603      	mov	r3, r0
 8001b54:	817b      	strh	r3, [r7, #10]
 8001b56:	460b      	mov	r3, r1
 8001b58:	813b      	strh	r3, [r7, #8]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f960 	bl	8001e40 <I2C_WaitOnFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00d      	beq.n	8001ba2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b94:	d103      	bne.n	8001b9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e05f      	b.n	8001c62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ba2:	897b      	ldrh	r3, [r7, #10]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	6a3a      	ldr	r2, [r7, #32]
 8001bb6:	492d      	ldr	r1, [pc, #180]	; (8001c6c <I2C_RequestMemoryWrite+0x128>)
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f998 	bl	8001eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e04c      	b.n	8001c62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be0:	6a39      	ldr	r1, [r7, #32]
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 fa02 	bl	8001fec <I2C_WaitOnTXEFlagUntilTimeout>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00d      	beq.n	8001c0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d107      	bne.n	8001c06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e02b      	b.n	8001c62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c10:	893b      	ldrh	r3, [r7, #8]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	611a      	str	r2, [r3, #16]
 8001c1a:	e021      	b.n	8001c60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c1c:	893b      	ldrh	r3, [r7, #8]
 8001c1e:	0a1b      	lsrs	r3, r3, #8
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2c:	6a39      	ldr	r1, [r7, #32]
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f9dc 	bl	8001fec <I2C_WaitOnTXEFlagUntilTimeout>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00d      	beq.n	8001c56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d107      	bne.n	8001c52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e005      	b.n	8001c62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c56:	893b      	ldrh	r3, [r7, #8]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	00010002 	.word	0x00010002

08001c70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	4608      	mov	r0, r1
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	817b      	strh	r3, [r7, #10]
 8001c82:	460b      	mov	r3, r1
 8001c84:	813b      	strh	r3, [r7, #8]
 8001c86:	4613      	mov	r3, r2
 8001c88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f8c2 	bl	8001e40 <I2C_WaitOnFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00d      	beq.n	8001cde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd0:	d103      	bne.n	8001cda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e0aa      	b.n	8001e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	6a3a      	ldr	r2, [r7, #32]
 8001cf2:	4952      	ldr	r1, [pc, #328]	; (8001e3c <I2C_RequestMemoryRead+0x1cc>)
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f8fa 	bl	8001eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e097      	b.n	8001e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1c:	6a39      	ldr	r1, [r7, #32]
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f964 	bl	8001fec <I2C_WaitOnTXEFlagUntilTimeout>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00d      	beq.n	8001d46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d107      	bne.n	8001d42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e076      	b.n	8001e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d105      	bne.n	8001d58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d4c:	893b      	ldrh	r3, [r7, #8]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	611a      	str	r2, [r3, #16]
 8001d56:	e021      	b.n	8001d9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d58:	893b      	ldrh	r3, [r7, #8]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d68:	6a39      	ldr	r1, [r7, #32]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 f93e 	bl	8001fec <I2C_WaitOnTXEFlagUntilTimeout>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00d      	beq.n	8001d92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d107      	bne.n	8001d8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e050      	b.n	8001e34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d92:	893b      	ldrh	r3, [r7, #8]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9e:	6a39      	ldr	r1, [r7, #32]
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 f923 	bl	8001fec <I2C_WaitOnTXEFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00d      	beq.n	8001dc8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d107      	bne.n	8001dc4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e035      	b.n	8001e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 f82b 	bl	8001e40 <I2C_WaitOnFlagUntilTimeout>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00d      	beq.n	8001e0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dfe:	d103      	bne.n	8001e08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e013      	b.n	8001e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e0c:	897b      	ldrh	r3, [r7, #10]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	6a3a      	ldr	r2, [r7, #32]
 8001e20:	4906      	ldr	r1, [pc, #24]	; (8001e3c <I2C_RequestMemoryRead+0x1cc>)
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f863 	bl	8001eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	00010002 	.word	0x00010002

08001e40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e50:	e025      	b.n	8001e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d021      	beq.n	8001e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e5a:	f7fe ff5b 	bl	8000d14 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d302      	bcc.n	8001e70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d116      	bne.n	8001e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f043 0220 	orr.w	r2, r3, #32
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e023      	b.n	8001ee6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	0c1b      	lsrs	r3, r3, #16
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d10d      	bne.n	8001ec4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf0c      	ite	eq
 8001eba:	2301      	moveq	r3, #1
 8001ebc:	2300      	movne	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	e00c      	b.n	8001ede <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bf0c      	ite	eq
 8001ed6:	2301      	moveq	r3, #1
 8001ed8:	2300      	movne	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d0b6      	beq.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001efc:	e051      	b.n	8001fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0c:	d123      	bne.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2220      	movs	r2, #32
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f043 0204 	orr.w	r2, r3, #4
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e046      	b.n	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d021      	beq.n	8001fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5e:	f7fe fed9 	bl	8000d14 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d302      	bcc.n	8001f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d116      	bne.n	8001fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f043 0220 	orr.w	r2, r3, #32
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e020      	b.n	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d10c      	bne.n	8001fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	e00b      	b.n	8001fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d18d      	bne.n	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ff8:	e02d      	b.n	8002056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f8ce 	bl	800219c <I2C_IsAcknowledgeFailed>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e02d      	b.n	8002066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d021      	beq.n	8002056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002012:	f7fe fe7f 	bl	8000d14 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	429a      	cmp	r2, r3
 8002020:	d302      	bcc.n	8002028 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d116      	bne.n	8002056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f043 0220 	orr.w	r2, r3, #32
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e007      	b.n	8002066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002060:	2b80      	cmp	r3, #128	; 0x80
 8002062:	d1ca      	bne.n	8001ffa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800207a:	e02d      	b.n	80020d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 f88d 	bl	800219c <I2C_IsAcknowledgeFailed>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e02d      	b.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002092:	d021      	beq.n	80020d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002094:	f7fe fe3e 	bl	8000d14 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d302      	bcc.n	80020aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d116      	bne.n	80020d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f043 0220 	orr.w	r2, r3, #32
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e007      	b.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d1ca      	bne.n	800207c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020fc:	e042      	b.n	8002184 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b10      	cmp	r3, #16
 800210a:	d119      	bne.n	8002140 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0210 	mvn.w	r2, #16
 8002114:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e029      	b.n	8002194 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002140:	f7fe fde8 	bl	8000d14 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	429a      	cmp	r2, r3
 800214e:	d302      	bcc.n	8002156 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d116      	bne.n	8002184 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f043 0220 	orr.w	r2, r3, #32
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e007      	b.n	8002194 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218e:	2b40      	cmp	r3, #64	; 0x40
 8002190:	d1b5      	bne.n	80020fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b2:	d11b      	bne.n	80021ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f043 0204 	orr.w	r2, r3, #4
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e272      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8087 	beq.w	8002326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002218:	4b92      	ldr	r3, [pc, #584]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b04      	cmp	r3, #4
 8002222:	d00c      	beq.n	800223e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002224:	4b8f      	ldr	r3, [pc, #572]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d112      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
 8002230:	4b8c      	ldr	r3, [pc, #560]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223c:	d10b      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223e:	4b89      	ldr	r3, [pc, #548]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d06c      	beq.n	8002324 <HAL_RCC_OscConfig+0x12c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d168      	bne.n	8002324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e24c      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x76>
 8002260:	4b80      	ldr	r3, [pc, #512]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a7f      	ldr	r2, [pc, #508]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e02e      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x98>
 8002276:	4b7b      	ldr	r3, [pc, #492]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7a      	ldr	r2, [pc, #488]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800227c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b78      	ldr	r3, [pc, #480]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a77      	ldr	r2, [pc, #476]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0xbc>
 800229a:	4b72      	ldr	r3, [pc, #456]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a71      	ldr	r2, [pc, #452]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b6f      	ldr	r3, [pc, #444]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6e      	ldr	r2, [pc, #440]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 80022b4:	4b6b      	ldr	r3, [pc, #428]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a6a      	ldr	r2, [pc, #424]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b68      	ldr	r3, [pc, #416]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a67      	ldr	r2, [pc, #412]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe fd1e 	bl	8000d14 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7fe fd1a 	bl	8000d14 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e200      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b5d      	ldr	r3, [pc, #372]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xe4>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7fe fd0a 	bl	8000d14 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7fe fd06 	bl	8000d14 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1ec      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x10c>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d063      	beq.n	80023fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002332:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800233e:	4b49      	ldr	r3, [pc, #292]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b08      	cmp	r3, #8
 8002348:	d11c      	bne.n	8002384 <HAL_RCC_OscConfig+0x18c>
 800234a:	4b46      	ldr	r3, [pc, #280]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	4b43      	ldr	r3, [pc, #268]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e1c0      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4939      	ldr	r1, [pc, #228]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	e03a      	b.n	80023fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe fcbf 	bl	8000d14 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7fe fcbb 	bl	8000d14 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1a1      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4927      	ldr	r1, [pc, #156]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e015      	b.n	80023fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe fc9e 	bl	8000d14 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023dc:	f7fe fc9a 	bl	8000d14 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e180      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d03a      	beq.n	800247c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d019      	beq.n	8002442 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_RCC_OscConfig+0x274>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002414:	f7fe fc7e 	bl	8000d14 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241c:	f7fe fc7a 	bl	8000d14 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e160      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800243a:	2001      	movs	r0, #1
 800243c:	f000 fac4 	bl	80029c8 <RCC_Delay>
 8002440:	e01c      	b.n	800247c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_RCC_OscConfig+0x274>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002448:	f7fe fc64 	bl	8000d14 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244e:	e00f      	b.n	8002470 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002450:	f7fe fc60 	bl	8000d14 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d908      	bls.n	8002470 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e146      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	42420000 	.word	0x42420000
 800246c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	4b92      	ldr	r3, [pc, #584]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e9      	bne.n	8002450 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a6 	beq.w	80025d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248e:	4b8b      	ldr	r3, [pc, #556]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10d      	bne.n	80024b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	4b88      	ldr	r3, [pc, #544]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4a87      	ldr	r2, [pc, #540]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	61d3      	str	r3, [r2, #28]
 80024a6:	4b85      	ldr	r3, [pc, #532]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b82      	ldr	r3, [pc, #520]	; (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b7f      	ldr	r3, [pc, #508]	; (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a7e      	ldr	r2, [pc, #504]	; (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7fe fc21 	bl	8000d14 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7fe fc1d 	bl	8000d14 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	; 0x64
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e103      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b75      	ldr	r3, [pc, #468]	; (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x312>
 80024fc:	4b6f      	ldr	r3, [pc, #444]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4a6e      	ldr	r2, [pc, #440]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	e02d      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x334>
 8002512:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a69      	ldr	r2, [pc, #420]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b67      	ldr	r3, [pc, #412]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a66      	ldr	r2, [pc, #408]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
 800252a:	e01c      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b05      	cmp	r3, #5
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0x356>
 8002534:	4b61      	ldr	r3, [pc, #388]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a60      	ldr	r2, [pc, #384]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	4b5e      	ldr	r3, [pc, #376]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a5d      	ldr	r2, [pc, #372]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	e00b      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800254e:	4b5b      	ldr	r3, [pc, #364]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a5a      	ldr	r2, [pc, #360]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4b58      	ldr	r3, [pc, #352]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a57      	ldr	r2, [pc, #348]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d015      	beq.n	800259a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7fe fbd1 	bl	8000d14 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe fbcd 	bl	8000d14 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0b1      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	4b4b      	ldr	r3, [pc, #300]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ee      	beq.n	8002576 <HAL_RCC_OscConfig+0x37e>
 8002598:	e014      	b.n	80025c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7fe fbbb 	bl	8000d14 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe fbb7 	bl	8000d14 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e09b      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	4b40      	ldr	r3, [pc, #256]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ee      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ca:	4b3c      	ldr	r3, [pc, #240]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a3b      	ldr	r2, [pc, #236]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8087 	beq.w	80026ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e0:	4b36      	ldr	r3, [pc, #216]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d061      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d146      	bne.n	8002682 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f4:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7fe fb8b 	bl	8000d14 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002602:	f7fe fb87 	bl	8000d14 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e06d      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	4b29      	ldr	r3, [pc, #164]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d108      	bne.n	800263c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800262a:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	4921      	ldr	r1, [pc, #132]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800263c:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a19      	ldr	r1, [r3, #32]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	430b      	orrs	r3, r1
 800264e:	491b      	ldr	r1, [pc, #108]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002654:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_RCC_OscConfig+0x4cc>)
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe fb5b 	bl	8000d14 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7fe fb57 	bl	8000d14 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e03d      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x46a>
 8002680:	e035      	b.n	80026ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_RCC_OscConfig+0x4cc>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fb44 	bl	8000d14 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002690:	f7fe fb40 	bl	8000d14 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e026      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x498>
 80026ae:	e01e      	b.n	80026ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e019      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40007000 	.word	0x40007000
 80026c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_OscConfig+0x500>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000

080026fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0d0      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d910      	bls.n	8002740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b67      	ldr	r3, [pc, #412]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0207 	bic.w	r2, r3, #7
 8002726:	4965      	ldr	r1, [pc, #404]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b63      	ldr	r3, [pc, #396]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0b8      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002758:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002762:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002770:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a52      	ldr	r2, [pc, #328]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800277a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	494d      	ldr	r1, [pc, #308]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d040      	beq.n	800281c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d115      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e07f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e073      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06b      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027da:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f023 0203 	bic.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4936      	ldr	r1, [pc, #216]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ec:	f7fe fa92 	bl	8000d14 <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7fe fa8e 	bl	8000d14 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e053      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 020c 	and.w	r2, r3, #12
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1eb      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d210      	bcs.n	800284c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 0207 	bic.w	r2, r3, #7
 8002832:	4922      	ldr	r1, [pc, #136]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e032      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4916      	ldr	r1, [pc, #88]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	490e      	ldr	r1, [pc, #56]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800288a:	f000 f821 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 800288e:	4602      	mov	r2, r0
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	490a      	ldr	r1, [pc, #40]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	5ccb      	ldrb	r3, [r1, r3]
 800289e:	fa22 f303 	lsr.w	r3, r2, r3
 80028a2:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <HAL_RCC_ClockConfig+0x1cc>)
 80028a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_RCC_ClockConfig+0x1d0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe f9f0 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40022000 	.word	0x40022000
 80028c0:	40021000 	.word	0x40021000
 80028c4:	080030d8 	.word	0x080030d8
 80028c8:	20000008 	.word	0x20000008
 80028cc:	2000000c 	.word	0x2000000c

080028d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	b490      	push	{r4, r7}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028d6:	4b29      	ldr	r3, [pc, #164]	; (800297c <HAL_RCC_GetSysClockFreq+0xac>)
 80028d8:	1d3c      	adds	r4, r7, #4
 80028da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028e0:	f240 2301 	movw	r3, #513	; 0x201
 80028e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028fa:	4b21      	ldr	r3, [pc, #132]	; (8002980 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b04      	cmp	r3, #4
 8002908:	d002      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x40>
 800290a:	2b08      	cmp	r3, #8
 800290c:	d003      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x46>
 800290e:	e02b      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002910:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002912:	623b      	str	r3, [r7, #32]
      break;
 8002914:	e02b      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	0c9b      	lsrs	r3, r3, #18
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	3328      	adds	r3, #40	; 0x28
 8002920:	443b      	add	r3, r7
 8002922:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002926:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d012      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002932:	4b13      	ldr	r3, [pc, #76]	; (8002980 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	0c5b      	lsrs	r3, r3, #17
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	3328      	adds	r3, #40	; 0x28
 800293e:	443b      	add	r3, r7
 8002940:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002944:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb4>)
 800294a:	fb03 f202 	mul.w	r2, r3, r2
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
 8002956:	e004      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	623b      	str	r3, [r7, #32]
      break;
 8002966:	e002      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb4>)
 800296a:	623b      	str	r3, [r7, #32]
      break;
 800296c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296e:	6a3b      	ldr	r3, [r7, #32]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3728      	adds	r7, #40	; 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bc90      	pop	{r4, r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	08002df8 	.word	0x08002df8
 8002980:	40021000 	.word	0x40021000
 8002984:	007a1200 	.word	0x007a1200
 8002988:	003d0900 	.word	0x003d0900

0800298c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002990:	4b02      	ldr	r3, [pc, #8]	; (800299c <HAL_RCC_GetHCLKFreq+0x10>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	20000008 	.word	0x20000008

080029a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029a4:	f7ff fff2 	bl	800298c <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	; (80029c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	080030e8 	.word	0x080030e8

080029c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <RCC_Delay+0x34>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <RCC_Delay+0x38>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0a5b      	lsrs	r3, r3, #9
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029e4:	bf00      	nop
  }
  while (Delay --);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1e5a      	subs	r2, r3, #1
 80029ea:	60fa      	str	r2, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f9      	bne.n	80029e4 <RCC_Delay+0x1c>
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	20000008 	.word	0x20000008
 8002a00:	10624dd3 	.word	0x10624dd3

08002a04 <__errno>:
 8002a04:	4b01      	ldr	r3, [pc, #4]	; (8002a0c <__errno+0x8>)
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000014 	.word	0x20000014

08002a10 <__libc_init_array>:
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	2600      	movs	r6, #0
 8002a14:	4d0c      	ldr	r5, [pc, #48]	; (8002a48 <__libc_init_array+0x38>)
 8002a16:	4c0d      	ldr	r4, [pc, #52]	; (8002a4c <__libc_init_array+0x3c>)
 8002a18:	1b64      	subs	r4, r4, r5
 8002a1a:	10a4      	asrs	r4, r4, #2
 8002a1c:	42a6      	cmp	r6, r4
 8002a1e:	d109      	bne.n	8002a34 <__libc_init_array+0x24>
 8002a20:	f000 f9de 	bl	8002de0 <_init>
 8002a24:	2600      	movs	r6, #0
 8002a26:	4d0a      	ldr	r5, [pc, #40]	; (8002a50 <__libc_init_array+0x40>)
 8002a28:	4c0a      	ldr	r4, [pc, #40]	; (8002a54 <__libc_init_array+0x44>)
 8002a2a:	1b64      	subs	r4, r4, r5
 8002a2c:	10a4      	asrs	r4, r4, #2
 8002a2e:	42a6      	cmp	r6, r4
 8002a30:	d105      	bne.n	8002a3e <__libc_init_array+0x2e>
 8002a32:	bd70      	pop	{r4, r5, r6, pc}
 8002a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a38:	4798      	blx	r3
 8002a3a:	3601      	adds	r6, #1
 8002a3c:	e7ee      	b.n	8002a1c <__libc_init_array+0xc>
 8002a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a42:	4798      	blx	r3
 8002a44:	3601      	adds	r6, #1
 8002a46:	e7f2      	b.n	8002a2e <__libc_init_array+0x1e>
 8002a48:	080030f4 	.word	0x080030f4
 8002a4c:	080030f4 	.word	0x080030f4
 8002a50:	080030f4 	.word	0x080030f4
 8002a54:	080030f8 	.word	0x080030f8

08002a58 <memset>:
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4402      	add	r2, r0
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d100      	bne.n	8002a62 <memset+0xa>
 8002a60:	4770      	bx	lr
 8002a62:	f803 1b01 	strb.w	r1, [r3], #1
 8002a66:	e7f9      	b.n	8002a5c <memset+0x4>

08002a68 <asinf>:
 8002a68:	b538      	push	{r3, r4, r5, lr}
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	f000 f81c 	bl	8002aa8 <__ieee754_asinf>
 8002a70:	4621      	mov	r1, r4
 8002a72:	4605      	mov	r5, r0
 8002a74:	4620      	mov	r0, r4
 8002a76:	f7fd fe3d 	bl	80006f4 <__aeabi_fcmpun>
 8002a7a:	b980      	cbnz	r0, 8002a9e <asinf+0x36>
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f000 f9a8 	bl	8002dd2 <fabsf>
 8002a82:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a86:	f7fd fe2b 	bl	80006e0 <__aeabi_fcmpgt>
 8002a8a:	b140      	cbz	r0, 8002a9e <asinf+0x36>
 8002a8c:	f7ff ffba 	bl	8002a04 <__errno>
 8002a90:	2321      	movs	r3, #33	; 0x21
 8002a92:	6003      	str	r3, [r0, #0]
 8002a94:	4803      	ldr	r0, [pc, #12]	; (8002aa4 <asinf+0x3c>)
 8002a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a9a:	f000 b99d 	b.w	8002dd8 <nanf>
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	bd38      	pop	{r3, r4, r5, pc}
 8002aa2:	bf00      	nop
 8002aa4:	080030f0 	.word	0x080030f0

08002aa8 <__ieee754_asinf>:
 8002aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aac:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8002ab0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	4605      	mov	r5, r0
 8002ab8:	d10c      	bne.n	8002ad4 <__ieee754_asinf+0x2c>
 8002aba:	498d      	ldr	r1, [pc, #564]	; (8002cf0 <__ieee754_asinf+0x248>)
 8002abc:	f7fd fc54 	bl	8000368 <__aeabi_fmul>
 8002ac0:	498c      	ldr	r1, [pc, #560]	; (8002cf4 <__ieee754_asinf+0x24c>)
 8002ac2:	4605      	mov	r5, r0
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	f7fd fc4f 	bl	8000368 <__aeabi_fmul>
 8002aca:	4601      	mov	r1, r0
 8002acc:	4628      	mov	r0, r5
 8002ace:	f7fd fb43 	bl	8000158 <__addsf3>
 8002ad2:	e006      	b.n	8002ae2 <__ieee754_asinf+0x3a>
 8002ad4:	dd07      	ble.n	8002ae6 <__ieee754_asinf+0x3e>
 8002ad6:	4601      	mov	r1, r0
 8002ad8:	f7fd fb3c 	bl	8000154 <__aeabi_fsub>
 8002adc:	4601      	mov	r1, r0
 8002ade:	f7fd fcf7 	bl	80004d0 <__aeabi_fdiv>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	e00e      	b.n	8002b04 <__ieee754_asinf+0x5c>
 8002ae6:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8002aea:	da58      	bge.n	8002b9e <__ieee754_asinf+0xf6>
 8002aec:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8002af0:	da0b      	bge.n	8002b0a <__ieee754_asinf+0x62>
 8002af2:	4981      	ldr	r1, [pc, #516]	; (8002cf8 <__ieee754_asinf+0x250>)
 8002af4:	f7fd fb30 	bl	8000158 <__addsf3>
 8002af8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002afc:	f7fd fdf0 	bl	80006e0 <__aeabi_fcmpgt>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d04c      	beq.n	8002b9e <__ieee754_asinf+0xf6>
 8002b04:	4620      	mov	r0, r4
 8002b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b0a:	4601      	mov	r1, r0
 8002b0c:	f7fd fc2c 	bl	8000368 <__aeabi_fmul>
 8002b10:	4605      	mov	r5, r0
 8002b12:	497a      	ldr	r1, [pc, #488]	; (8002cfc <__ieee754_asinf+0x254>)
 8002b14:	f7fd fc28 	bl	8000368 <__aeabi_fmul>
 8002b18:	4979      	ldr	r1, [pc, #484]	; (8002d00 <__ieee754_asinf+0x258>)
 8002b1a:	f7fd fb1d 	bl	8000158 <__addsf3>
 8002b1e:	4629      	mov	r1, r5
 8002b20:	f7fd fc22 	bl	8000368 <__aeabi_fmul>
 8002b24:	4977      	ldr	r1, [pc, #476]	; (8002d04 <__ieee754_asinf+0x25c>)
 8002b26:	f7fd fb15 	bl	8000154 <__aeabi_fsub>
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	f7fd fc1c 	bl	8000368 <__aeabi_fmul>
 8002b30:	4975      	ldr	r1, [pc, #468]	; (8002d08 <__ieee754_asinf+0x260>)
 8002b32:	f7fd fb11 	bl	8000158 <__addsf3>
 8002b36:	4629      	mov	r1, r5
 8002b38:	f7fd fc16 	bl	8000368 <__aeabi_fmul>
 8002b3c:	4973      	ldr	r1, [pc, #460]	; (8002d0c <__ieee754_asinf+0x264>)
 8002b3e:	f7fd fb09 	bl	8000154 <__aeabi_fsub>
 8002b42:	4629      	mov	r1, r5
 8002b44:	f7fd fc10 	bl	8000368 <__aeabi_fmul>
 8002b48:	4971      	ldr	r1, [pc, #452]	; (8002d10 <__ieee754_asinf+0x268>)
 8002b4a:	f7fd fb05 	bl	8000158 <__addsf3>
 8002b4e:	4629      	mov	r1, r5
 8002b50:	f7fd fc0a 	bl	8000368 <__aeabi_fmul>
 8002b54:	496f      	ldr	r1, [pc, #444]	; (8002d14 <__ieee754_asinf+0x26c>)
 8002b56:	4606      	mov	r6, r0
 8002b58:	4628      	mov	r0, r5
 8002b5a:	f7fd fc05 	bl	8000368 <__aeabi_fmul>
 8002b5e:	496e      	ldr	r1, [pc, #440]	; (8002d18 <__ieee754_asinf+0x270>)
 8002b60:	f7fd faf8 	bl	8000154 <__aeabi_fsub>
 8002b64:	4629      	mov	r1, r5
 8002b66:	f7fd fbff 	bl	8000368 <__aeabi_fmul>
 8002b6a:	496c      	ldr	r1, [pc, #432]	; (8002d1c <__ieee754_asinf+0x274>)
 8002b6c:	f7fd faf4 	bl	8000158 <__addsf3>
 8002b70:	4629      	mov	r1, r5
 8002b72:	f7fd fbf9 	bl	8000368 <__aeabi_fmul>
 8002b76:	496a      	ldr	r1, [pc, #424]	; (8002d20 <__ieee754_asinf+0x278>)
 8002b78:	f7fd faec 	bl	8000154 <__aeabi_fsub>
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	f7fd fbf3 	bl	8000368 <__aeabi_fmul>
 8002b82:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002b86:	f7fd fae7 	bl	8000158 <__addsf3>
 8002b8a:	4601      	mov	r1, r0
 8002b8c:	4630      	mov	r0, r6
 8002b8e:	f7fd fc9f 	bl	80004d0 <__aeabi_fdiv>
 8002b92:	4621      	mov	r1, r4
 8002b94:	f7fd fbe8 	bl	8000368 <__aeabi_fmul>
 8002b98:	4601      	mov	r1, r0
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	e797      	b.n	8002ace <__ieee754_asinf+0x26>
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f000 f917 	bl	8002dd2 <fabsf>
 8002ba4:	4601      	mov	r1, r0
 8002ba6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002baa:	f7fd fad3 	bl	8000154 <__aeabi_fsub>
 8002bae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002bb2:	f7fd fbd9 	bl	8000368 <__aeabi_fmul>
 8002bb6:	4606      	mov	r6, r0
 8002bb8:	4950      	ldr	r1, [pc, #320]	; (8002cfc <__ieee754_asinf+0x254>)
 8002bba:	f7fd fbd5 	bl	8000368 <__aeabi_fmul>
 8002bbe:	4950      	ldr	r1, [pc, #320]	; (8002d00 <__ieee754_asinf+0x258>)
 8002bc0:	f7fd faca 	bl	8000158 <__addsf3>
 8002bc4:	4631      	mov	r1, r6
 8002bc6:	f7fd fbcf 	bl	8000368 <__aeabi_fmul>
 8002bca:	494e      	ldr	r1, [pc, #312]	; (8002d04 <__ieee754_asinf+0x25c>)
 8002bcc:	f7fd fac2 	bl	8000154 <__aeabi_fsub>
 8002bd0:	4631      	mov	r1, r6
 8002bd2:	f7fd fbc9 	bl	8000368 <__aeabi_fmul>
 8002bd6:	494c      	ldr	r1, [pc, #304]	; (8002d08 <__ieee754_asinf+0x260>)
 8002bd8:	f7fd fabe 	bl	8000158 <__addsf3>
 8002bdc:	4631      	mov	r1, r6
 8002bde:	f7fd fbc3 	bl	8000368 <__aeabi_fmul>
 8002be2:	494a      	ldr	r1, [pc, #296]	; (8002d0c <__ieee754_asinf+0x264>)
 8002be4:	f7fd fab6 	bl	8000154 <__aeabi_fsub>
 8002be8:	4631      	mov	r1, r6
 8002bea:	f7fd fbbd 	bl	8000368 <__aeabi_fmul>
 8002bee:	4948      	ldr	r1, [pc, #288]	; (8002d10 <__ieee754_asinf+0x268>)
 8002bf0:	f7fd fab2 	bl	8000158 <__addsf3>
 8002bf4:	4631      	mov	r1, r6
 8002bf6:	f7fd fbb7 	bl	8000368 <__aeabi_fmul>
 8002bfa:	4946      	ldr	r1, [pc, #280]	; (8002d14 <__ieee754_asinf+0x26c>)
 8002bfc:	4681      	mov	r9, r0
 8002bfe:	4630      	mov	r0, r6
 8002c00:	f7fd fbb2 	bl	8000368 <__aeabi_fmul>
 8002c04:	4944      	ldr	r1, [pc, #272]	; (8002d18 <__ieee754_asinf+0x270>)
 8002c06:	f7fd faa5 	bl	8000154 <__aeabi_fsub>
 8002c0a:	4631      	mov	r1, r6
 8002c0c:	f7fd fbac 	bl	8000368 <__aeabi_fmul>
 8002c10:	4942      	ldr	r1, [pc, #264]	; (8002d1c <__ieee754_asinf+0x274>)
 8002c12:	f7fd faa1 	bl	8000158 <__addsf3>
 8002c16:	4631      	mov	r1, r6
 8002c18:	f7fd fba6 	bl	8000368 <__aeabi_fmul>
 8002c1c:	4940      	ldr	r1, [pc, #256]	; (8002d20 <__ieee754_asinf+0x278>)
 8002c1e:	f7fd fa99 	bl	8000154 <__aeabi_fsub>
 8002c22:	4631      	mov	r1, r6
 8002c24:	f7fd fba0 	bl	8000368 <__aeabi_fmul>
 8002c28:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002c2c:	f7fd fa94 	bl	8000158 <__addsf3>
 8002c30:	4682      	mov	sl, r0
 8002c32:	4630      	mov	r0, r6
 8002c34:	f000 f87c 	bl	8002d30 <__ieee754_sqrtf>
 8002c38:	4b3a      	ldr	r3, [pc, #232]	; (8002d24 <__ieee754_asinf+0x27c>)
 8002c3a:	4607      	mov	r7, r0
 8002c3c:	4598      	cmp	r8, r3
 8002c3e:	dd1a      	ble.n	8002c76 <__ieee754_asinf+0x1ce>
 8002c40:	4651      	mov	r1, sl
 8002c42:	4648      	mov	r0, r9
 8002c44:	f7fd fc44 	bl	80004d0 <__aeabi_fdiv>
 8002c48:	4639      	mov	r1, r7
 8002c4a:	f7fd fb8d 	bl	8000368 <__aeabi_fmul>
 8002c4e:	4639      	mov	r1, r7
 8002c50:	f7fd fa82 	bl	8000158 <__addsf3>
 8002c54:	4601      	mov	r1, r0
 8002c56:	f7fd fa7f 	bl	8000158 <__addsf3>
 8002c5a:	4933      	ldr	r1, [pc, #204]	; (8002d28 <__ieee754_asinf+0x280>)
 8002c5c:	f7fd fa7c 	bl	8000158 <__addsf3>
 8002c60:	4601      	mov	r1, r0
 8002c62:	4823      	ldr	r0, [pc, #140]	; (8002cf0 <__ieee754_asinf+0x248>)
 8002c64:	f7fd fa76 	bl	8000154 <__aeabi_fsub>
 8002c68:	2d00      	cmp	r5, #0
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	f73f af4a 	bgt.w	8002b04 <__ieee754_asinf+0x5c>
 8002c70:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8002c74:	e735      	b.n	8002ae2 <__ieee754_asinf+0x3a>
 8002c76:	4601      	mov	r1, r0
 8002c78:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8002c7c:	f7fd fa6c 	bl	8000158 <__addsf3>
 8002c80:	4651      	mov	r1, sl
 8002c82:	4604      	mov	r4, r0
 8002c84:	4648      	mov	r0, r9
 8002c86:	f7fd fc23 	bl	80004d0 <__aeabi_fdiv>
 8002c8a:	4601      	mov	r1, r0
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	f7fd fb6b 	bl	8000368 <__aeabi_fmul>
 8002c92:	f028 080f 	bic.w	r8, r8, #15
 8002c96:	4681      	mov	r9, r0
 8002c98:	4641      	mov	r1, r8
 8002c9a:	4640      	mov	r0, r8
 8002c9c:	f7fd fb64 	bl	8000368 <__aeabi_fmul>
 8002ca0:	4601      	mov	r1, r0
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	f7fd fa56 	bl	8000154 <__aeabi_fsub>
 8002ca8:	4641      	mov	r1, r8
 8002caa:	4604      	mov	r4, r0
 8002cac:	4638      	mov	r0, r7
 8002cae:	f7fd fa53 	bl	8000158 <__addsf3>
 8002cb2:	4601      	mov	r1, r0
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f7fd fc0b 	bl	80004d0 <__aeabi_fdiv>
 8002cba:	4601      	mov	r1, r0
 8002cbc:	f7fd fa4c 	bl	8000158 <__addsf3>
 8002cc0:	4601      	mov	r1, r0
 8002cc2:	480c      	ldr	r0, [pc, #48]	; (8002cf4 <__ieee754_asinf+0x24c>)
 8002cc4:	f7fd fa46 	bl	8000154 <__aeabi_fsub>
 8002cc8:	4601      	mov	r1, r0
 8002cca:	4648      	mov	r0, r9
 8002ccc:	f7fd fa42 	bl	8000154 <__aeabi_fsub>
 8002cd0:	4641      	mov	r1, r8
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	4640      	mov	r0, r8
 8002cd6:	f7fd fa3f 	bl	8000158 <__addsf3>
 8002cda:	4601      	mov	r1, r0
 8002cdc:	4813      	ldr	r0, [pc, #76]	; (8002d2c <__ieee754_asinf+0x284>)
 8002cde:	f7fd fa39 	bl	8000154 <__aeabi_fsub>
 8002ce2:	4601      	mov	r1, r0
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f7fd fa35 	bl	8000154 <__aeabi_fsub>
 8002cea:	4601      	mov	r1, r0
 8002cec:	480f      	ldr	r0, [pc, #60]	; (8002d2c <__ieee754_asinf+0x284>)
 8002cee:	e7b9      	b.n	8002c64 <__ieee754_asinf+0x1bc>
 8002cf0:	3fc90fdb 	.word	0x3fc90fdb
 8002cf4:	b33bbd2e 	.word	0xb33bbd2e
 8002cf8:	7149f2ca 	.word	0x7149f2ca
 8002cfc:	3811ef08 	.word	0x3811ef08
 8002d00:	3a4f7f04 	.word	0x3a4f7f04
 8002d04:	3d241146 	.word	0x3d241146
 8002d08:	3e4e0aa8 	.word	0x3e4e0aa8
 8002d0c:	3ea6b090 	.word	0x3ea6b090
 8002d10:	3e2aaaab 	.word	0x3e2aaaab
 8002d14:	3d9dc62e 	.word	0x3d9dc62e
 8002d18:	3f303361 	.word	0x3f303361
 8002d1c:	4001572d 	.word	0x4001572d
 8002d20:	4019d139 	.word	0x4019d139
 8002d24:	3f799999 	.word	0x3f799999
 8002d28:	333bbd2e 	.word	0x333bbd2e
 8002d2c:	3f490fdb 	.word	0x3f490fdb

08002d30 <__ieee754_sqrtf>:
 8002d30:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8002d34:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4604      	mov	r4, r0
 8002d3e:	d309      	bcc.n	8002d54 <__ieee754_sqrtf+0x24>
 8002d40:	4601      	mov	r1, r0
 8002d42:	f7fd fb11 	bl	8000368 <__aeabi_fmul>
 8002d46:	4601      	mov	r1, r0
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f7fd fa05 	bl	8000158 <__addsf3>
 8002d4e:	4604      	mov	r4, r0
 8002d50:	4620      	mov	r0, r4
 8002d52:	bd70      	pop	{r4, r5, r6, pc}
 8002d54:	2a00      	cmp	r2, #0
 8002d56:	d0fb      	beq.n	8002d50 <__ieee754_sqrtf+0x20>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	da06      	bge.n	8002d6a <__ieee754_sqrtf+0x3a>
 8002d5c:	4601      	mov	r1, r0
 8002d5e:	f7fd f9f9 	bl	8000154 <__aeabi_fsub>
 8002d62:	4601      	mov	r1, r0
 8002d64:	f7fd fbb4 	bl	80004d0 <__aeabi_fdiv>
 8002d68:	e7f1      	b.n	8002d4e <__ieee754_sqrtf+0x1e>
 8002d6a:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8002d6e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8002d72:	d029      	beq.n	8002dc8 <__ieee754_sqrtf+0x98>
 8002d74:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8002d78:	07cb      	lsls	r3, r1, #31
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8002d82:	f04f 0419 	mov.w	r4, #25
 8002d86:	461e      	mov	r6, r3
 8002d88:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002d8c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d90:	bf58      	it	pl
 8002d92:	0052      	lslpl	r2, r2, #1
 8002d94:	1040      	asrs	r0, r0, #1
 8002d96:	0052      	lsls	r2, r2, #1
 8002d98:	1875      	adds	r5, r6, r1
 8002d9a:	4295      	cmp	r5, r2
 8002d9c:	bfde      	ittt	le
 8002d9e:	186e      	addle	r6, r5, r1
 8002da0:	1b52      	suble	r2, r2, r5
 8002da2:	185b      	addle	r3, r3, r1
 8002da4:	3c01      	subs	r4, #1
 8002da6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8002daa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002dae:	d1f3      	bne.n	8002d98 <__ieee754_sqrtf+0x68>
 8002db0:	b112      	cbz	r2, 8002db8 <__ieee754_sqrtf+0x88>
 8002db2:	3301      	adds	r3, #1
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	105c      	asrs	r4, r3, #1
 8002dba:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8002dbe:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8002dc2:	e7c5      	b.n	8002d50 <__ieee754_sqrtf+0x20>
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	3201      	adds	r2, #1
 8002dc8:	0218      	lsls	r0, r3, #8
 8002dca:	d5fb      	bpl.n	8002dc4 <__ieee754_sqrtf+0x94>
 8002dcc:	3a01      	subs	r2, #1
 8002dce:	1a89      	subs	r1, r1, r2
 8002dd0:	e7d0      	b.n	8002d74 <__ieee754_sqrtf+0x44>

08002dd2 <fabsf>:
 8002dd2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002dd6:	4770      	bx	lr

08002dd8 <nanf>:
 8002dd8:	4800      	ldr	r0, [pc, #0]	; (8002ddc <nanf+0x4>)
 8002dda:	4770      	bx	lr
 8002ddc:	7fc00000 	.word	0x7fc00000

08002de0 <_init>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	bf00      	nop
 8002de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de6:	bc08      	pop	{r3}
 8002de8:	469e      	mov	lr, r3
 8002dea:	4770      	bx	lr

08002dec <_fini>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	bf00      	nop
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr
